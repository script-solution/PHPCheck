<?php
/* Driver template for the PHP_PC_Stmt_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class PC_Stmt_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof PC_Stmt_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof PC_Stmt_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof PC_Stmt_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof PC_Stmt_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class PC_Stmt_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "src/engine/stmtparser.y"
class PC_Engine_StmtParser#line 102 "src/engine/stmtparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 13 "src/engine/stmtparser.y"

		// current state, i.e. the function, class and variables in scope
		private $state;
		
		public $transTable = array();

    function __construct($state)
    {
				$this->state = $state;
				if(!count($this->transTable))
				{
					$start = 240; // start nice and low to be sure
					while(token_name($start) == 'UNKNOWN')
						$start++;
					$hash = array_flip(self::$yyTokenName);
					$map = array(
						ord(',') => self::COMMA,
						ord('=') => self::EQUALS,
						ord('?') => self::QUESTION,
						ord(':') => self::COLON,
						ord('|') => self::BAR,
						ord('^') => self::CARAT,
						ord('&') => self::AMPERSAND,
						ord('<') => self::LESSTHAN,
						ord('>') => self::GREATERTHAN,
						ord('+') => self::PLUS,
						ord('-') => self::MINUS,
						ord('.') => self::DOT,
						ord('*') => self::TIMES,
						ord('/') => self::DIVIDE,
						ord('%') => self::PERCENT,
						ord('!') => self::EXCLAM,
						ord('~') => self::TILDE,
						ord('@') => self::AT,
						ord('[') => self::LBRACKET,
						ord('(') => self::LPAREN,
						ord(')') => self::RPAREN,
						ord(';') => self::SEMI,
						ord('{') => self::LCURLY,
						ord('}') => self::RCURLY,
						ord('`') => self::BACKQUOTE,
						ord('$') => self::DOLLAR,
						ord(']') => self::RBRACKET,
						ord('"') => self::DOUBLEQUOTE,
						ord("'") => self::SINGLEQUOTE,
					);
					for($i = $start; $i < self::YYERRORSYMBOL + $start; $i++)
					{
						$lt = token_name($i);
      			$lt = ($lt == 'T_ML_COMMENT') ? 'T_COMMENT' : $lt;
						$lt = ($lt == 'T_DOUBLE_COLON') ?  'T_PAAMAYIM_NEKUDOTAYIM' : $lt;
						if(!isset($hash[$lt]))
							continue;
		
						$map[$i] = $hash[$lt];
					}
					$this->transTable = $map;
				}
    }
#line 167 "src/engine/stmtparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_INCLUDE                      =  1;
    const T_INCLUDE_ONCE                 =  2;
    const T_EVAL                         =  3;
    const T_REQUIRE                      =  4;
    const T_REQUIRE_ONCE                 =  5;
    const COMMA                          =  6;
    const T_LOGICAL_OR                   =  7;
    const T_LOGICAL_XOR                  =  8;
    const T_LOGICAL_AND                  =  9;
    const T_PRINT                        = 10;
    const EQUALS                         = 11;
    const T_PLUS_EQUAL                   = 12;
    const T_MINUS_EQUAL                  = 13;
    const T_MUL_EQUAL                    = 14;
    const T_DIV_EQUAL                    = 15;
    const T_CONCAT_EQUAL                 = 16;
    const T_MOD_EQUAL                    = 17;
    const T_AND_EQUAL                    = 18;
    const T_OR_EQUAL                     = 19;
    const T_XOR_EQUAL                    = 20;
    const T_SL_EQUAL                     = 21;
    const T_SR_EQUAL                     = 22;
    const QUESTION                       = 23;
    const COLON                          = 24;
    const T_BOOLEAN_OR                   = 25;
    const T_BOOLEAN_AND                  = 26;
    const BAR                            = 27;
    const CARAT                          = 28;
    const AMPERSAND                      = 29;
    const T_IS_EQUAL                     = 30;
    const T_IS_NOT_EQUAL                 = 31;
    const T_IS_IDENTICAL                 = 32;
    const T_IS_NOT_IDENTICAL             = 33;
    const LESSTHAN                       = 34;
    const T_IS_SMALLER_OR_EQUAL          = 35;
    const GREATERTHAN                    = 36;
    const T_IS_GREATER_OR_EQUAL          = 37;
    const T_SL                           = 38;
    const T_SR                           = 39;
    const PLUS                           = 40;
    const MINUS                          = 41;
    const DOT                            = 42;
    const TIMES                          = 43;
    const DIVIDE                         = 44;
    const PERCENT                        = 45;
    const EXCLAM                         = 46;
    const T_INSTANCEOF                   = 47;
    const TILDE                          = 48;
    const T_INC                          = 49;
    const T_DEC                          = 50;
    const T_INT_CAST                     = 51;
    const T_DOUBLE_CAST                  = 52;
    const T_STRING_CAST                  = 53;
    const T_ARRAY_CAST                   = 54;
    const T_OBJECT_CAST                  = 55;
    const T_BOOL_CAST                    = 56;
    const T_UNSET_CAST                   = 57;
    const AT                             = 58;
    const LBRACKET                       = 59;
    const T_NEW                          = 60;
    const T_CLONE                        = 61;
    const T_ELSEIF                       = 62;
    const T_ELSE                         = 63;
    const T_ENDIF                        = 64;
    const T_STATIC                       = 65;
    const T_ABSTRACT                     = 66;
    const T_FINAL                        = 67;
    const T_PRIVATE                      = 68;
    const T_PROTECTED                    = 69;
    const T_PUBLIC                       = 70;
    const T_HALT_COMPILER                = 71;
    const LPAREN                         = 72;
    const RPAREN                         = 73;
    const SEMI                           = 74;
    const LCURLY                         = 75;
    const RCURLY                         = 76;
    const T_IF                           = 77;
    const T_WHILE                        = 78;
    const T_DO                           = 79;
    const T_FOR                          = 80;
    const T_SWITCH                       = 81;
    const T_BREAK                        = 82;
    const T_CONTINUE                     = 83;
    const T_RETURN                       = 84;
    const T_GLOBAL                       = 85;
    const T_ECHO                         = 86;
    const T_INLINE_HTML                  = 87;
    const T_USE                          = 88;
    const T_UNSET                        = 89;
    const T_DECLARE                      = 90;
    const T_TRY                          = 91;
    const T_THROW                        = 92;
    const T_FOREACH                      = 93;
    const T_AS                           = 94;
    const T_CATCH                        = 95;
    const T_VARIABLE                     = 96;
    const T_FUNCTION                     = 97;
    const T_STRING                       = 98;
    const T_CLASS                        = 99;
    const T_EXTENDS                      = 100;
    const T_INTERFACE                    = 101;
    const T_IMPLEMENTS                   = 102;
    const T_LIST                         = 103;
    const T_EXIT                         = 104;
    const T_ARRAY                        = 105;
    const BACKQUOTE                      = 106;
    const T_LNUMBER                      = 107;
    const T_DNUMBER                      = 108;
    const T_CONSTANT_ENCAPSED_STRING     = 109;
    const T_LINE                         = 110;
    const T_FILE                         = 111;
    const T_CLASS_C                      = 112;
    const T_METHOD_C                     = 113;
    const T_FUNC_C                       = 114;
    const T_DOUBLE_ARROW                 = 115;
    const T_PAAMAYIM_NEKUDOTAYIM         = 116;
    const T_ENDFOR                       = 117;
    const T_ENDFOREACH                   = 118;
    const T_ENDDECLARE                   = 119;
    const T_ENDSWITCH                    = 120;
    const T_CASE                         = 121;
    const T_DEFAULT                      = 122;
    const T_ENDWHILE                     = 123;
    const DOLLAR                         = 124;
    const T_VAR                          = 125;
    const T_CONST                        = 126;
    const T_OBJECT_OPERATOR              = 127;
    const RBRACKET                       = 128;
    const T_NUM_STRING                   = 129;
    const T_ENCAPSED_AND_WHITESPACE      = 130;
    const T_CHARACTER                    = 131;
    const T_BAD_CHARACTER                = 132;
    const T_DOLLAR_OPEN_CURLY_BRACES     = 133;
    const T_STRING_VARNAME               = 134;
    const T_CURLY_OPEN                   = 135;
    const T_ISSET                        = 136;
    const T_EMPTY                        = 137;
    const DOUBLEQUOTE                    = 138;
    const SINGLEQUOTE                    = 139;
    const T_START_HEREDOC                = 140;
    const T_END_HEREDOC                  = 141;
    const YY_NO_ACTION = 1090;
    const YY_ACCEPT_ACTION = 1089;
    const YY_ERROR_ACTION = 1088;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 11316;
static public $yy_action = array(
 /*     0 */    88,   90,  467,   67,   86,  415,  110,  203,   53,   76,
 /*    10 */   113,  100,  101,  111,  112,   51,   49,  102,   55,   66,
 /*    20 */    56,   64,   61,  117,  118,  123,  126,   93,  124,  115,
 /*    30 */   114,  575,  151,  511,  511,  511,  511,  511,  511,   52,
 /*    40 */    84,  414,  110,  203,  682,   83,  371,   81,  145,  138,
 /*    50 */    91,   89,   80,   72,   71,   70,   68,   77,  381,  152,
 /*    60 */   105, 1089,   16,  367,  210,  391,  390,  365,  408,  572,
 /*    70 */   428,   82,  651,  623,  237,  223,  400,  470,   23,  481,
 /*    80 */   468,   42,   43,   41,  187,   36,  616,  206,  374,  379,
 /*    90 */   383,   96,  435,  509,  402,  565,  213,  362,  510,  604,
 /*   100 */   586,  604,  433,  229,  407,  243,  654,  665,  663,  641,
 /*   110 */   639,  638,  638,  638,  646,   88,   90,  467,   67,   86,
 /*   120 */   531,  245,  207,  495,   76,  511,  511,  511,  511,  511,
 /*   130 */   511,  176,  604,  601,  224,  492,  498,  239,  244,  257,
 /*   140 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*   150 */   115,  114,  171,  151,   52,   84,  189,  956,  519,  358,
 /*   160 */    83,  572,   81,  145,  138,   91,   89,   80,   72,   71,
 /*   170 */    70,   68,   77,  130,  152,  105,  151,  432,  709,  210,
 /*   180 */   391,  390,  190,  578,  619,  428,   82,  172,  623,  237,
 /*   190 */   661,  400,  470,   23,  481,  468,   42,   43,   41,  187,
 /*   200 */    36,  616,  206,  374,  379,  383,   96,  435,  133,  167,
 /*   210 */   565,  213,  362,  510,  593,  586,   37,  433,  229,  407,
 /*   220 */   243,  654,  665,  663,  641,  639,  638,  638,  638,  110,
 /*   230 */   203,  416,   78,   88,   90,  467,   67,   86,  495,  464,
 /*   240 */   349,  164,   76,  519,  358,  372,  572,  592,  601,  651,
 /*   250 */   492,  498,  239,  244,  257,  573,  123,  126,   93,  124,
 /*   260 */   115,  114,   73,  151,  593,  137,  511,  511,  511,  511,
 /*   270 */   511,  511,   52,   84,  499,  711,  497,  534,   83,  605,
 /*   280 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*   290 */    77,  584,  152,  105,  636,  615,  395,  210,  391,  390,
 /*   300 */   110,  203,  488,  428,   82,  610,  623,  237,  165,  400,
 /*   310 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*   320 */   206,  374,  379,  383,   96,  435,  509,  402,  565,  213,
 /*   330 */   362,  510,  565,  586,  502,  433,  229,  407,  243,  654,
 /*   340 */   665,  663,  641,  639,  638,  638,  638,  432,   88,   90,
 /*   350 */   467,   67,   86,  708,  180,  449,  495,   76,  683,  209,
 /*   360 */   495,  361,  444,   19,  198,  508,  601,  162,  492,  498,
 /*   370 */   239,  244,  257,  650,  689,  215,  662,  394,  644,  680,
 /*   380 */   349,  186,  650,  380,  452,  662,  377,   52,   84,  651,
 /*   390 */   368,  676,  482,   83,   38,   81,  145,  138,   91,   89,
 /*   400 */    80,   72,   71,   70,   68,   77,  134,  152,  105,  529,
 /*   410 */    74,  367,  210,  391,  390,  643,  527,  918,  428,   82,
 /*   420 */   651,  623,  237,  685,  400,  470,   23,  481,  468,   42,
 /*   430 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*   440 */   435,  427,  529,  565,  213,  362,  510,  588,  586,  527,
 /*   450 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*   460 */   638,  638,  687,  218,  226,  405,  440,  356,  680,  349,
 /*   470 */   186,  495,   27,   88,   90,  467,   67,   86,  651,  368,
 /*   480 */   676,  601,   76,  492,  498,  239,  244,  257,  100,  101,
 /*   490 */   111,  112,   51,   49,  102,   55,   66,   56,   64,   61,
 /*   500 */   117,  118,  123,  126,   93,  124,  115,  114,  119,  151,
 /*   510 */   398, 1003,   52,   84,  650,  540, 1059,  662,   83,  505,
 /*   520 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*   530 */    77,  396,  152,  105,  674,  440,  356,  210,  391,  390,
 /*   540 */   409,  410,  252,  428,   82,  199,  623,  237,  446,  400,
 /*   550 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*   560 */   206,  374,  379,  383,   96,  435,  135,  932,  565,  213,
 /*   570 */   362,  510,  365,  586,  572,  433,  229,  407,  243,  654,
 /*   580 */   665,  663,  641,  639,  638,  638,  638,  153,   88,   90,
 /*   590 */   467,   67,   86,  434,   25,  413,  495,   76,  124,  115,
 /*   600 */   114,  104,  151,  715,  650,  658,  601,  662,  492,  498,
 /*   610 */   239,  244,  257,  447,  144,  722,  692,  363,  565,  680,
 /*   620 */   349,  186,  565,  565,  502,  502,  651,   52,   84,  651,
 /*   630 */   368,  676,  673,   83,  932,   81,  145,  138,   91,   89,
 /*   640 */    80,   72,   71,   70,   68,   77,  496,  152,  105,  109,
 /*   650 */   495,  495,  210,  391,  390,   50,  154,  163,  428,   82,
 /*   660 */   465,  623,  237,  670,  400,  470,   23,  481,  468,   42,
 /*   670 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*   680 */   435,  388,  714,  565,  213,  362,  510,  524,  586,  499,
 /*   690 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*   700 */   638,  638,   99,   88,   90,  467,   67,   86,  565,  251,
 /*   710 */   502,  495,   76,  345,  250,  475,  121,  491,  680,  349,
 /*   720 */   186,  601,   37,  492,  498,  239,  244,  257,  651,  368,
 /*   730 */   676,   37,  339,  566,  174,  985,  495,  565,   78,  677,
 /*   740 */    31,  651,   52,   84,  984,  208,  132,   78,   83,  505,
 /*   750 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*   760 */    77,  392,  152,  105,  695,  495,  150,  210,  391,  390,
 /*   770 */   635,  513,  178,  428,   82, 1002,  623,  237,  549,  400,
 /*   780 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*   790 */   206,  374,  379,  383,   96,  435,  220,  122,  565,  213,
 /*   800 */   362,  510,   39,  586,  159,  433,  229,  407,  243,  654,
 /*   810 */   665,  663,  641,  639,  638,  638,  638,  116,  125,  420,
 /*   820 */   630,  393,  650,  541,  443,  662,  495,  624,   88,   90,
 /*   830 */   467,   67,   86,  537,  169,   45,  601,   76,  492,  498,
 /*   840 */   239,  244,  257,  101,  111,  112,   51,   49,  102,   55,
 /*   850 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*   860 */   115,  114,  565,  151,  502, 1059,  656,   52,   84,  650,
 /*   870 */   518,   95,  662,   83,   27,   81,  145,  138,   91,   89,
 /*   880 */    80,   72,   71,   70,   68,   77,  421,  152,  105,   32,
 /*   890 */   495,  441,  210,  391,  390,  672,  585,  204,  428,   82,
 /*   900 */   148,  623,  237,  718,  400,  470,   23,  481,  468,   42,
 /*   910 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*   920 */   435,  103,  133,  565,  213,  362,  510,  565,  586,  466,
 /*   930 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*   940 */   638,  638,   20,   88,   90,  467,   67,   86,  499,  376,
 /*   950 */   457,  495,   76,  650,  637,  495,  662,  650,  660,  397,
 /*   960 */   662,  601,  170,  492,  498,  239,  244,  257,   17,   69,
 /*   970 */   650,  514,  177,  662,   28,  249,  488,  650,  597,   34,
 /*   980 */   662,  108,   52,   84,  650,  697,  373,  662,   83,  370,
 /*   990 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  1000 */    77,  935,  152,  105,   35,   87,  729,  210,  391,  390,
 /*  1010 */   217,   18,   13,  428,   82,   30,  623,  237,  580,  400,
 /*  1020 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*  1030 */   206,  374,  379,  383,   96,  435,  673,   33,  565,  213,
 /*  1040 */   362,  510,  606,  586,   26,  433,  229,  407,  243,  654,
 /*  1050 */   665,  663,  641,  639,  638,  638,  638,  366,   88,   90,
 /*  1060 */   467,   67,   86,  404,  463,  701,  495,   76,  935,   29,
 /*  1070 */   650,  690,  625,  662,  129,  431,  601,  707,  492,  498,
 /*  1080 */   239,  244,  257,  650,  653,  382,  662,  650,  655,  451,
 /*  1090 */   662,  650,  640,  232,  662,  343,  577,   52,   84,  582,
 /*  1100 */   716,  650,  375,   83,  662,   81,  145,  138,   91,   89,
 /*  1110 */    80,   72,   71,   70,   68,   77,  609,  152,  105,  439,
 /*  1120 */    46,   10,  210,  391,  390,   15,  179,  205,  428,   82,
 /*  1130 */     3,  623,  237,  587,  400,  470,   23,  481,  468,   42,
 /*  1140 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*  1150 */   435,  194,    5,  565,  213,  362,  510,  691,  586,  221,
 /*  1160 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  1170 */   638,  638,  211,   88,   90,  467,   67,   86,  725,  155,
 /*  1180 */   562,  495,   76,  650,  600,  717,  662,  650,  523,  246,
 /*  1190 */   662,  601,  173,  492,  498,  239,  244,  257,  342,  520,
 /*  1200 */   406,  620,  724,  445,  235,  530,  642,  256,  369,  354,
 /*  1210 */   536,  581,   52,   84,  233,  344,  212,  219,   83,   40,
 /*  1220 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  1230 */    77,  403,  152,  105,  234,  192,  424,  210,  391,  390,
 /*  1240 */   385,  686,  352,  428,   82,  448,  623,  237,  346,  400,
 /*  1250 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*  1260 */   206,  374,  379,  383,   96,  435,  156,  437,  565,  213,
 /*  1270 */   362,  510,  191,  586,  622,  433,  229,  407,  243,  654,
 /*  1280 */   665,  663,  641,  639,  638,  638,  638,    4,   88,   90,
 /*  1290 */   467,   67,   86,  438,  652,  247,  495,   76,  426,  184,
 /*  1300 */   425,  422,  442,  227,  340,  430,  601,  161,  492,  498,
 /*  1310 */   239,  244,  257,  712,  196,  423,  166,  157,  678,  158,
 /*  1320 */   551,  554,  559,  418,  241,  602,  703,   52,   84,  546,
 /*  1330 */   399,  181,  544,   83,  419,   81,  145,  138,   91,   89,
 /*  1340 */    80,   72,   71,   70,   68,   77,  120,  152,  105,  528,
 /*  1350 */   201,  136,  210,  391,  390,  255,  127,    9,  412,   82,
 /*  1360 */    11,  623,  237,  168,  400,  470,   23,  481,  468,   42,
 /*  1370 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*  1380 */   435,  195,    8,  565,  213,  362,  510,   98,  586,  669,
 /*  1390 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  1400 */   638,  638,  214,  231,    2,  197,    6,  160,  183,   12,
 /*  1410 */     1,  495,  238,   88,   90,  467,   67,   86,   14,  389,
 /*  1420 */   131,  601,   76,  492,  498,  239,  244,  257,  450,    7,
 /*  1430 */   612,  612,  612,  612,  612,  612,  236,   44,  106,   79,
 /*  1440 */    85,   65,   54,   62,   63,   60,   59,   58,   57,  612,
 /*  1450 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  1460 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  1470 */    77,  612,  152,  105,  612,  976,  976,  210,  612,  612,
 /*  1480 */   612,  612,  612,  612,   82,  612,  623,  237,  612,  400,
 /*  1490 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*  1500 */   206,  374,  379,  383,   96,  435,  612,  612,  565,  612,
 /*  1510 */   362,  612,  612,  472,  612,  433,  229,  407,  243,  654,
 /*  1520 */   665,  663,  641,  639,  638,  638,  638,  612,  222,  612,
 /*  1530 */   612,  612,  612,  612,  612,  612,  495,  612,   88,   90,
 /*  1540 */   467,   67,   86,  612,  612,  612,  601,   76,  492,  498,
 /*  1550 */   239,  244,  257,  612,  612,  612,  612,  612,  612,  612,
 /*  1560 */   612,  248,  612,  364,  185,  567,  612,  612,  612,  612,
 /*  1570 */   461,  612,  651,  612,  612,  612,  612,   52,   84,  612,
 /*  1580 */   612,  612,  668,   83,  612,   81,  145,  138,   91,   89,
 /*  1590 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  1600 */   612,  612,  210,  612,  612,  612,  612,  612,  612,   82,
 /*  1610 */   612,  623,  237,  612,  400,  470,   23,  481,  468,   42,
 /*  1620 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*  1630 */   435,  612,  612,  565,  612,  362,  612,  612,  472,  612,
 /*  1640 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  1650 */   638,  638,  612,  539,  612,  612,  612,  612,  612,  612,
 /*  1660 */   612,  495,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  1670 */   612,  601,   76,  492,  498,  239,  244,  257,  612,  612,
 /*  1680 */   612,  612,  612,  612,  612,  612,  242,  612,  364,  185,
 /*  1690 */   567,  612,  612,  612,  612,  461,  612,  651,  612,  612,
 /*  1700 */   612,  612,   52,   84,  612,  612,  612,  668,   83,  612,
 /*  1710 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  1720 */    77,  612,  152,  105,  612,  612,  612,  210,  612,  612,
 /*  1730 */   612,  612,  612,  612,   82,  612,  623,  237,  612,  400,
 /*  1740 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*  1750 */   206,  374,  379,  383,   96,  435,  612,  612,  565,  612,
 /*  1760 */   362,  612,  472,  612,  612,  433,  229,  407,  243,  654,
 /*  1770 */   665,  663,  641,  639,  638,  638,  638,  225,  612,  612,
 /*  1780 */   612,  612,  612,  612,  612,  612,  495,  612,   88,   90,
 /*  1790 */   467,   67,   86,  612,  612,  612,  601,   76,  492,  498,
 /*  1800 */   239,  244,  257,  612,  612,  612,  612,  612,  612,  612,
 /*  1810 */   612,  253,  364,  185,  567,  612,  612,  612,  612,  461,
 /*  1820 */   612,  651,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  1830 */   612,  668,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  1840 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  1850 */   612,  612,  210,  612,  612,  612,  612,  612,  612,   82,
 /*  1860 */   612,  623,  237,  612,  400,  470,   23,  481,  468,   42,
 /*  1870 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*  1880 */   435,  612,  612,  565,  612,  362,  612,  612,  612,  612,
 /*  1890 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  1900 */   638,  638,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  1910 */   612,  495,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  1920 */   612,  601,   76,  492,  498,  239,  244,  257,  612,  612,
 /*  1930 */   612,  612,  612,  612,  612,  612,  240,  612,  612,  612,
 /*  1940 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  1950 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  1960 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  1970 */    77,  612,  152,  105,  612,  612,  612,  210,  612,  612,
 /*  1980 */   612,  612,  612,  612,   82,  612,  623,  237,  612,  400,
 /*  1990 */   470,   23,  481,  468,   42,   43,   41,  187,   36,  616,
 /*  2000 */   206,  374,  379,  383,   96,  435,  612,  612,  565,  612,
 /*  2010 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  2020 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  2030 */   467,   67,   86,  612,  612,  612,  495,   76,  612,  612,
 /*  2040 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  2050 */   239,  244,  257,  612,  612,  612,  612,  612,  612,  612,
 /*  2060 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  2070 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  2080 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  2090 */   612,  612,  210,  612,  612,  612,  612,  612,  612,   82,
 /*  2100 */   612,  623,  237,  612,  400,  470,   23,  481,  468,   42,
 /*  2110 */    43,   41,  187,   36,  616,  206,  374,  379,  383,   96,
 /*  2120 */   435,  612,  612,  565,  612,  362,  612,  612,  612,  612,
 /*  2130 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  2140 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  2150 */   612,  495,   76,  612,  612,  612,  612,  612,  612,  612,
 /*  2160 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  2170 */   612,  143,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  2180 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  2190 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  2200 */    77,   94,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  2210 */   612,  612,  612,  612,   82,   53,  612,  113,  100,  101,
 /*  2220 */   111,  112,   51,   49,  102,   55,   66,   56,   64,   61,
 /*  2230 */   117,  118,  123,  126,   93,  124,  115,  114,  565,  151,
 /*  2240 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  2250 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  2260 */   467,   67,   86,  612,  612,  612,  495,   76,  612,  612,
 /*  2270 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  2280 */   239,  244,  257,  612,  612,  612,  141,  612,  612,  612,
 /*  2290 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  2300 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  2310 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  2320 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   82,
 /*  2330 */   612,  612,  113,  100,  101,  111,  112,   51,   49,  102,
 /*  2340 */    55,   66,   56,   64,   61,  117,  118,  123,  126,   93,
 /*  2350 */   124,  115,  114,  565,  151,  362,  612,  612,  612,  612,
 /*  2360 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  2370 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  2380 */   612,  495,   76,  612,  612,  612,  612,  612,  612,  612,
 /*  2390 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  2400 */   612,  146,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  2410 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  2420 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  2430 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  2440 */   612,  612,  612,  612,   82,  612,  612,  111,  112,   51,
 /*  2450 */    49,  102,   55,   66,   56,   64,   61,  117,  118,  123,
 /*  2460 */   126,   93,  124,  115,  114,  612,  151,  612,  565,  612,
 /*  2470 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  2480 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  2490 */   467,   67,   86,  612,  612,  612,  495,   76,  612,  612,
 /*  2500 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  2510 */   239,  244,  257,  612,  612,  612,  147,  612,  612,  612,
 /*  2520 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  2530 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  2540 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  2550 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   82,
 /*  2560 */   612,  612,  612,  112,   51,   49,  102,   55,   66,   56,
 /*  2570 */    64,   61,  117,  118,  123,  126,   93,  124,  115,  114,
 /*  2580 */   612,  151,  612,  565,  612,  362,  612,  612,  612,  612,
 /*  2590 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  2600 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  2610 */   612,  495,   76,  612,  612,  612,  612,  612,  612,  612,
 /*  2620 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  2630 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  2640 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  2650 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  2660 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  2670 */   612,  612,  612,  612,   82,  693,  612,  612,  612,   51,
 /*  2680 */    49,  102,   55,   66,   56,   64,   61,  117,  118,  123,
 /*  2690 */   126,   93,  124,  115,  114,  612,  151,  612,  565,  612,
 /*  2700 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  2710 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  2720 */   467,   67,   86,  612,  612,  612,  495,   76,  612,  612,
 /*  2730 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  2740 */   239,  244,  257,  612,  612,  612,  139,  612,  612,  612,
 /*  2750 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  2760 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  2770 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  2780 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   82,
 /*  2790 */   612,  612,  612,  612,  612,  612,  933,  612,  612,  612,
 /*  2800 */   612,   44,  106,   79,   85,   65,   54,   62,   63,   60,
 /*  2810 */    59,   58,   57,  565,  612,  362,  612,  612,  612,  612,
 /*  2820 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  2830 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  976,
 /*  2840 */   976,  495,   76,  612,  612,  612,  612,  612,  612,  612,
 /*  2850 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  2860 */   612,  142,  612,  933,  612,  612,  612,  612,  612,  612,
 /*  2870 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  2880 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  2890 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  2900 */   612,  612,  612,  612,   82,  612,  612,  612,  612,  612,
 /*  2910 */   612,  936,  612,  612,  612,  612,   44,  106,   79,   85,
 /*  2920 */    65,   54,   62,   63,   60,   59,   58,   57,  565,  612,
 /*  2930 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  2940 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  2950 */   467,   67,   86,  612,  976,  976,  495,   76,  612,  612,
 /*  2960 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  2970 */   239,  244,  257,  612,  612,  612,  612,  612,  936,  612,
 /*  2980 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  2990 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  3000 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  3010 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   82,
 /*  3020 */   612,  613,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3030 */   612,   44,  106,   79,   85,   65,   54,   62,   63,   60,
 /*  3040 */    59,   58,   57,  565,  612,  362,  612,  612,  612,  612,
 /*  3050 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  3060 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  976,
 /*  3070 */   976,  495,   76,  713,  612,  612,  612,  612,  612,  612,
 /*  3080 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  3090 */   612,  487,  612,  612,  659,  612,  612,  612,  612,  612,
 /*  3100 */   612,  612,   52,   84,  612,  347,  612,  612,   83,  612,
 /*  3110 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  3120 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  3130 */   612,  612,  612,  612,   82,  454,  657,  612,  612,  612,
 /*  3140 */   485,  341,  188,  567,  612,  612,  612,  612,  583,  579,
 /*  3150 */   651,  612,  612,  710,  612,  612,  612,  612,  565,  612,
 /*  3160 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  3170 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  3180 */   467,   67,   86,  182,  175,  612,  495,   76,  612,  612,
 /*  3190 */   612,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  3200 */   239,  244,  257,  612,  612,  612,  140,  612,  612,  612,
 /*  3210 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  3220 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  3230 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  3240 */   612,  378,  612,  612,  612,  612,  612,  612,  384,   82,
 /*  3250 */   654,  665,  663,  641,  639,  638,  638,  638,  612,  612,
 /*  3260 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3270 */   612,  612,  612,  565,  612,  362,  612,  612,  612,  612,
 /*  3280 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  3290 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  3300 */   612,  495,   76,  713,  612,  612,  612,  612,  612,  612,
 /*  3310 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  3320 */   612,  487,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3330 */   612,  612,   52,   84,  612,  351,  612,  612,   83,  612,
 /*  3340 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  3350 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  3360 */   612,  612,  612,  612,   82,  454,  611,  612,  612,  612,
 /*  3370 */   485,  341,  188,  567,  612,  612,  612,  612,  583,  579,
 /*  3380 */   651,  612,  612,  710,  612,  612,  612,  612,  565,  612,
 /*  3390 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  3400 */   665,  663,  641,  639,  638,  638,  638,  612,   88,   90,
 /*  3410 */   467,   67,   86,  612,  612,  632,  495,   76,  612,  591,
 /*  3420 */   360,  612,  612,  612,  612,  612,  601,  612,  492,  498,
 /*  3430 */   239,  244,  257,  487,  696,  612,  612,  487,  612,  612,
 /*  3440 */   612,  612,  612,  612,  612,  612,  612,   52,   84,  612,
 /*  3450 */   612,  612,  612,   83,  612,   81,  145,  138,   91,   89,
 /*  3460 */    80,   72,   71,   70,   68,   77,  612,  152,  105,  612,
 /*  3470 */   612,  612,  612,  612,  612,  612,  634,  454,  612,   82,
 /*  3480 */   612,  454,  485,  341,  188,  567,  485,  341,  188,  567,
 /*  3490 */   583,  579,  651,  612,  583,  579,  651,  612,  612,  612,
 /*  3500 */   612,  612,  612,  565,  612,  362,  612,  612,  612,  612,
 /*  3510 */   433,  229,  407,  243,  654,  665,  663,  641,  639,  638,
 /*  3520 */   638,  638,  612,   88,   90,  467,   67,   86,  612,  612,
 /*  3530 */   612,  495,   76,  612,  612,  612,  612,  612,  612,  612,
 /*  3540 */   612,  601,  612,  492,  498,  239,  244,  257,  612,  612,
 /*  3550 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3560 */   612,  612,   52,   84,  612,  612,  612,  612,   83,  612,
 /*  3570 */    81,  145,  138,   91,   89,   80,   72,   71,   70,   68,
 /*  3580 */    77,  612,  152,  105,  612,  612,  612,  612,  612,  612,
 /*  3590 */   612,  612,  612,  612,   82,  612,  612,  612,  612,  612,
 /*  3600 */   612,  612,  612,  612,  612,  612,   44,  106,   79,   85,
 /*  3610 */    65,   54,   62,   63,   60,   59,   58,   57,  565,  612,
 /*  3620 */   362,  612,  612,  612,  612,  433,  229,  407,  243,  654,
 /*  3630 */   665,  663,  641,  639,  638,  638,  638,  612,  612,  612,
 /*  3640 */   612,  612,  612,  612,  976,  976,  495,  612,  612,  612,
 /*  3650 */   612,  612,  612,  612,  612,  612,  494,  612,  492,  498,
 /*  3660 */   239,  244,  257,  721,  720,  699,  594,  591,  267,  612,
 /*  3670 */   612,  202,  612,  612,  612,  612,  612,  702,  327,  612,
 /*  3680 */   726,  612,  727,  612,  386,  487,  387,  612,  612,  128,
 /*  3690 */   612,  612,  612,  612,  612,  612,  458,  719,  679,  681,
 /*  3700 */   612,  612,  436,  612,  612,  612,  401,  591,  612,  704,
 /*  3710 */   612,  612,  612,  350,  552,  612,  728,  612,  612,  589,
 /*  3720 */   230,  612,  727,  612,  612,  487,  612,  612,  612,  454,
 /*  3730 */   612,  612,  612,  612,  485,  341,  188,  567,  612,  612,
 /*  3740 */   454,  612,  583,  579,  651,  485,  341,  188,  567,  612,
 /*  3750 */   612,  612,  612,  583,  579,  651,  506,  612,  612,  612,
 /*  3760 */   612,  612,  612,  612,  599,  721,  720,  699,  594,  454,
 /*  3770 */   267,  612,  525,  522,  485,  341,  188,  567,  612,  702,
 /*  3780 */   327,  612,  583,  579,  651,  612,  386,  612,  387,  612,
 /*  3790 */   612,  612,  612,  355,  612,  515,  612,  612,  458,  719,
 /*  3800 */   679,  681,  612,  612,  436,  612,  612,  612,  401,  612,
 /*  3810 */   612,  704,  612,  612,  612,  350,  552,  612,  728,  612,
 /*  3820 */   612,  589,  612,  612,  507,  512,  517,  535,  538,  542,
 /*  3830 */    75,  612,  149,  612,  612,  576,  612,  612,  612,  612,
 /*  3840 */   612,  612,  454,  612,  612,  612,  612,  485,  341,  188,
 /*  3850 */   567,  612,  612,  506,  612,  583,  579,  651,  612,  564,
 /*  3860 */   563,  561,  571,  594,  612,  267,  599,  612,  612,  525,
 /*  3870 */   522,  612,  612,  612,  702,  327,  612,  612,  612,  612,
 /*  3880 */   612,  386,  612,  387,  612,  612,  612,  612,  612,  612,
 /*  3890 */   355,  612,  515,  458,  612,  679,  681,  612,  612,  436,
 /*  3900 */   612,  612,  612,  401,  612,  612,  704,  612,  612,  612,
 /*  3910 */   350,  552,  612,  728,  612,  612,  589,  612,  612,  612,
 /*  3920 */   612,  507,  512,  517,  535,  538,  542,   75,  612,  149,
 /*  3930 */   713,  612,  612,  603,  612,  612,  612,  454,  612,  612,
 /*  3940 */   612,  612,  485,  341,  188,  567,  533,  612,  487,  612,
 /*  3950 */   583,  579,  651,  107,   97,   94,  612,  612,  612,  612,
 /*  3960 */   612,  599,  612,  612,  487,  612,  612,  612,  612,   53,
 /*  3970 */   593,  113,  100,  101,  111,  112,   51,   49,  102,   55,
 /*  3980 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*  3990 */   115,  114,  454,  151,  612,  612,  612,  485,  341,  188,
 /*  4000 */   567,  612,  612,  612,  612,  583,  579,  651,  454,  612,
 /*  4010 */   706,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  4020 */   593,  583,  579,  651,  612,  612,  612,  612,  107,   97,
 /*  4030 */    94,  357,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4040 */   612,  612,  612,  612,   53,  612,  113,  100,  101,  111,
 /*  4050 */   112,   51,   49,  102,   55,   66,   56,   64,   61,  117,
 /*  4060 */   118,  123,  126,   93,  124,  115,  114,  612,  151,  612,
 /*  4070 */   107,   97,   94,  612,  612,  612,  612,  612,  612,  612,
 /*  4080 */   612,  612,  612,  612,  612,  612,   53,  612,  113,  100,
 /*  4090 */   101,  111,  112,   51,   49,  102,   55,   66,   56,   64,
 /*  4100 */    61,  117,  118,  123,  126,   93,  124,  115,  114,  612,
 /*  4110 */   151,  612,  612,  612,  612,  612,  612,  506,  612,  612,
 /*  4120 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4130 */   612,  612,  612,  525,  522,  591,   47,  705,  612,  612,
 /*  4140 */   612,  612,  612,  612,  107,   97,   94,  612,  612,  612,
 /*  4150 */   684,  612,  612,  487,  355,  612,  515,  612,  612,  612,
 /*  4160 */    53,  612,  113,  100,  101,  111,  112,   51,   49,  102,
 /*  4170 */    55,   66,   56,   64,   61,  117,  118,  123,  126,   93,
 /*  4180 */   124,  115,  114,  612,  151,  507,  512,  517,  535,  538,
 /*  4190 */   542,   75,  612,  149,  612,  612,  612,  454,  612,  516,
 /*  4200 */   612,  612,  485,  341,  188,  567,  612,  612,  612,  591,
 /*  4210 */   583,  579,  651,  647,  612,  612,  612,  612,  612,  612,
 /*  4220 */   612,  107,   97,   94,  228,  612,  612,  487,  612,  612,
 /*  4230 */   612,  612,  612,  612,  612,  612,  612,   53,  612,  113,
 /*  4240 */   100,  101,  111,  112,   51,   49,  102,   55,   66,   56,
 /*  4250 */    64,   61,  117,  118,  123,  126,   93,  124,  115,  114,
 /*  4260 */   612,  151,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4270 */   612,  454,  612,  612,  612,  612,  485,  341,  188,  567,
 /*  4280 */   612,  612,  612,  612,  583,  579,  651,  612,  614,  612,
 /*  4290 */   612,  612,  612,  612,  612,  612,  107,   97,   94,  612,
 /*  4300 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4310 */   612,  612,   53,  612,  113,  100,  101,  111,  112,   51,
 /*  4320 */    49,  102,   55,   66,   56,   64,   61,  117,  118,  123,
 /*  4330 */   126,   93,  124,  115,  114,  612,  151,  612,  612,  612,
 /*  4340 */   612,  612,  612,  612,  612,  612,  612,  645,  612,  612,
 /*  4350 */   612,  591,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4360 */   612,  612,  553,  612,  612,  487,  723,  591,  612,  487,
 /*  4370 */   107,   97,   94,  612,  612,  612,  612,  612,  649,  612,
 /*  4380 */   612,  612,  694,  612,  612,  487,   53,  612,  113,  100,
 /*  4390 */   101,  111,  112,   51,   49,  102,   55,   66,   56,   64,
 /*  4400 */    61,  117,  118,  123,  126,   93,  124,  115,  114,  454,
 /*  4410 */   151,  612,  612,  454,  485,  341,  188,  567,  485,  341,
 /*  4420 */   188,  567,  583,  579,  651,  612,  583,  579,  651,  454,
 /*  4430 */   612,  612,  612,  612,  485,  341,  188,  567,  612,  560,
 /*  4440 */   612,  612,  583,  579,  651,  612,  612,  107,   97,   94,
 /*  4450 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4460 */   612,  612,  612,   53,  612,  113,  100,  101,  111,  112,
 /*  4470 */    51,   49,  102,   55,   66,   56,   64,   61,  117,  118,
 /*  4480 */   123,  126,   93,  124,  115,  114,  612,  151,  107,   97,
 /*  4490 */    94,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4500 */   612,  612,  612,  612,   53,  612,  113,  100,  101,  111,
 /*  4510 */   112,   51,   49,  102,   55,   66,   56,   64,   61,  117,
 /*  4520 */   118,  123,  126,   93,  124,  115,  114,  612,  151,  612,
 /*  4530 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4540 */   608,  612,  612,  612,  591,  612,  612,  612,  612,  612,
 /*  4550 */   612,  612,  612,  612,  612,   48,  612,  490,  487,  590,
 /*  4560 */   612,  612,  487,  107,   97,   94,  612,  612,  612,  612,
 /*  4570 */   612,  612,  612,  612,  612,  666,  612,  612,  612,   53,
 /*  4580 */   612,  113,  100,  101,  111,  112,   51,   49,  102,   55,
 /*  4590 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*  4600 */   115,  114,  454,  151,  612,  612,  454,  485,  341,  188,
 /*  4610 */   567,  485,  341,  188,  567,  583,  579,  651,  612,  583,
 /*  4620 */   579,  651,  612,  612,  612,  632,  612,  612,  612,  574,
 /*  4630 */   612,  612,  612,  612,  612,  612,  612,  107,   97,   94,
 /*  4640 */   612,  612,  612,  487,  612,  612,  612,  612,  612,  612,
 /*  4650 */   612,  612,  612,   53,  612,  113,  100,  101,  111,  112,
 /*  4660 */    51,   49,  102,   55,   66,   56,   64,   61,  117,  118,
 /*  4670 */   123,  126,   93,  124,  115,  114,  612,  151,  612,  612,
 /*  4680 */   612,  612,  612,  612,  612,  612,  631,  454,  612,  612,
 /*  4690 */   612,  612,  485,  341,  188,  567,  612,  612,  612,  612,
 /*  4700 */   583,  579,  651,  612,  612,  612,  667,  612,  612,  612,
 /*  4710 */   612,  612,  612,  612,  107,   97,   94,  612,  612,  612,
 /*  4720 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4730 */    53,  612,  113,  100,  101,  111,  112,   51,   49,  102,
 /*  4740 */    55,   66,   56,   64,   61,  117,  118,  123,  126,   93,
 /*  4750 */   124,  115,  114,  612,  151,  612,  612,  612,  612,  612,
 /*  4760 */   612,  612,  612,  612,  612,  608,  612,  612,  612,  591,
 /*  4770 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4780 */    22,  591,  612,  487,  688,  612,  612,  487,  107,   97,
 /*  4790 */    94,  612,  612,  612,  612,  612,  532,  612,  612,  487,
 /*  4800 */   607,  612,  612,  612,   53,  612,  113,  100,  101,  111,
 /*  4810 */   112,   51,   49,  102,   55,   66,   56,   64,   61,  117,
 /*  4820 */   118,  123,  126,   93,  124,  115,  114,  454,  151,  612,
 /*  4830 */   612,  454,  485,  341,  188,  567,  485,  341,  188,  567,
 /*  4840 */   583,  579,  651,  454,  583,  579,  651,  612,  485,  341,
 /*  4850 */   188,  567,  612,  612,   21,  612,  583,  579,  651,  612,
 /*  4860 */   612,  612,  107,   97,   94,  612,  612,  612,  612,  612,
 /*  4870 */   612,  612,  612,  612,  612,  612,  612,  612,   53,   92,
 /*  4880 */   113,  100,  101,  111,  112,   51,   49,  102,   55,   66,
 /*  4890 */    56,   64,   61,  117,  118,  123,  126,   93,  124,  115,
 /*  4900 */   114,  612,  151,  107,   97,   94,  612,  612,  612,  612,
 /*  4910 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   53,
 /*  4920 */   612,  113,  100,  101,  111,  112,   51,   49,  102,   55,
 /*  4930 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*  4940 */   115,  114,  612,  151,  612,  612,  612,  612,  612,  612,
 /*  4950 */   612,  612,  612,  612,  612,  612,  612,  612,  504,  612,
 /*  4960 */   612,  612,  476,  612,  612,  612,  612,  612,  612,   24,
 /*  4970 */   612,  612,  612,  612,  612,  612,  487,  107,   97,   94,
 /*  4980 */   487,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4990 */   612,  612,  612,   53,  612,  113,  100,  101,  111,  112,
 /*  5000 */    51,   49,  102,   55,   66,   56,   64,   61,  117,  118,
 /*  5010 */   123,  126,   93,  124,  115,  114,  612,  151,  612,  612,
 /*  5020 */   454,  612,  612,  612,  454,  485,  341,  188,  567,  485,
 /*  5030 */   341,  188,  567,  583,  579,  651,  612,  583,  579,  651,
 /*  5040 */   700,  612,  612,  612,  618,  612,  612,  612,  612,  612,
 /*  5050 */   612,  612,  107,   97,   94,  612,  612,  612,  487,  612,
 /*  5060 */   612,  612,  612,  612,  612,  612,  612,  612,   53,  612,
 /*  5070 */   113,  100,  101,  111,  112,   51,   49,  102,   55,   66,
 /*  5080 */    56,   64,   61,  117,  118,  123,  126,   93,  124,  115,
 /*  5090 */   114,  612,  151,  612,  612,  612,  612,  612,  612,  612,
 /*  5100 */   612,  612,  454,  526,  612,  612,  612,  485,  341,  188,
 /*  5110 */   567,  612,  612,  612,  612,  583,  579,  651,  411,  612,
 /*  5120 */   612,  487,  612,  612,  612,  612,  107,   97,   94,  612,
 /*  5130 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5140 */   612,  612,   53,  612,  113,  100,  101,  111,  112,   51,
 /*  5150 */    49,  102,   55,   66,   56,   64,   61,  117,  118,  123,
 /*  5160 */   126,   93,  124,  115,  114,  454,  151,  612,  612,  612,
 /*  5170 */   485,  341,  188,  567,  612,  612,  612,  612,  583,  579,
 /*  5180 */   651,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5190 */   612,  612,  612,  612,  612,  521,  612,  612,  612,  612,
 /*  5200 */   612,  612,  612,  107,   97,   94,  612,  612,  612,  612,
 /*  5210 */   612,  612,  612,  612,  612,  612,  612,  612,  612,   53,
 /*  5220 */   612,  113,  100,  101,  111,  112,   51,   49,  102,   55,
 /*  5230 */    66,   56,   64,   61,  117,  118,  123,  126,   93,  124,
 /*  5240 */   115,  114,  612,  151,  612,  612,  612,  612,  612,  612,
 /*  5250 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5260 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5270 */   612,  612,  671,  612,  612,  612,  612,  612,  612,  612,
 /*  5280 */   107,   97,   94,  612,  612,  612,  612,  612,  612,  612,
 /*  5290 */   612,  612,  612,  612,  612,  612,   53,  612,  113,  100,
 /*  5300 */   101,  111,  112,   51,   49,  102,   55,   66,   56,   64,
 /*  5310 */    61,  117,  118,  123,  126,   93,  124,  115,  114,  612,
 /*  5320 */   151,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5330 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5340 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  675,
 /*  5350 */   612,  612,  612,  612,  612,  612,  612,  107,   97,   94,
 /*  5360 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5370 */   612,  612,  612,   53,  612,  113,  100,  101,  111,  112,
 /*  5380 */    51,   49,  102,   55,   66,   56,   64,   61,  117,  118,
 /*  5390 */   123,  126,   93,  124,  115,  114,  612,  151,  612,  612,
 /*  5400 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5410 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5420 */   612,  612,  612,  664,  612,  612,  612,  612,  612,  612,
 /*  5430 */   612,  107,   97,   94,  612,  612,  612,  612,  612,  612,
 /*  5440 */   612,  612,  612,  612,  612,  612,  612,   53,  612,  113,
 /*  5450 */   100,  101,  111,  112,   51,   49,  102,   55,   66,   56,
 /*  5460 */    64,   61,  117,  118,  123,  126,   93,  124,  115,  114,
 /*  5470 */   612,  151,  107,   97,   94,  612,  612,  612,  612,  612,
 /*  5480 */   612,  612,  612,  612,  612,  612,  612,  612,   53,  612,
 /*  5490 */   113,  100,  101,  111,  112,   51,   49,  102,   55,   66,
 /*  5500 */    56,   64,   61,  117,  118,  123,  126,   93,  124,  115,
 /*  5510 */   114,  612,  151,  612,  612,  612,  612,  612,  612,  612,
 /*  5520 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5530 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  617,
 /*  5540 */   612,  612,  612,  612,  612,  612,  612,  107,   97,   94,
 /*  5550 */   612,  612,  471,  612,  612,  612,  612,  612,  612,  612,
 /*  5560 */   612,  612,  612,   53,  612,  113,  100,  101,  111,  112,
 /*  5570 */    51,   49,  102,   55,   66,   56,   64,   61,  117,  118,
 /*  5580 */   123,  126,   93,  124,  115,  114,  612,  151,  612,  612,
 /*  5590 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5600 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5610 */   612,  612,  612,  612,  612,  612,  698,  612,  612,  612,
 /*  5620 */   612,  612,  612,  612,  107,   97,   94,  612,  612,  612,
 /*  5630 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5640 */    53,  612,  113,  100,  101,  111,  112,   51,   49,  102,
 /*  5650 */    55,   66,   56,   64,   61,  117,  118,  123,  126,   93,
 /*  5660 */   124,  115,  114,  612,  151,  612,  612,  612,  612,  612,
 /*  5670 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5680 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5690 */   483,  612,  612,  612,  612,  612,  612,  612,  107,   97,
 /*  5700 */    94,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5710 */   612,  612,  612,  612,   53,  612,  113,  100,  101,  111,
 /*  5720 */   112,   51,   49,  102,   55,   66,   56,   64,   61,  117,
 /*  5730 */   118,  123,  126,   93,  124,  115,  114,  612,  151,  612,
 /*  5740 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5750 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5760 */   612,  612,  612,  612,  200,  612,  612,  612,  612,  612,
 /*  5770 */   612,  612,  107,   97,   94,  612,  612,  612,  612,  612,
 /*  5780 */   612,  612,  612,  612,  612,  612,  612,  612,   53,  612,
 /*  5790 */   113,  100,  101,  111,  112,   51,   49,  102,   55,   66,
 /*  5800 */    56,   64,   61,  117,  118,  123,  126,   93,  124,  115,
 /*  5810 */   114,  612,  151,  612,  612,  612,  612,  612,  612,  612,
 /*  5820 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5830 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5840 */   612,  629,  612,  612,  612,  612,  612,  612,  612,  107,
 /*  5850 */    97,   94,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5860 */   612,  612,  612,  612,  612,   53,  612,  113,  100,  101,
 /*  5870 */   111,  112,   51,   49,  102,   55,   66,   56,   64,   61,
 /*  5880 */   117,  118,  123,  126,   93,  124,  115,  114,  612,  151,
 /*  5890 */    97,   94,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5900 */   612,  612,  612,  612,  612,   53,  612,  113,  100,  101,
 /*  5910 */   111,  112,   51,   49,  102,   55,   66,   56,   64,   61,
 /*  5920 */   117,  118,  123,  126,   93,  124,  115,  114,  612,  151,
 /*  5930 */   612,  612,  612,  612,  612,  548,  612,  612,  594,  612,
 /*  5940 */   267,  612,  612,  612,  612,  626,  612,  612,  612,  702,
 /*  5950 */   327,  612,  612,  612,  612,  612,  386,  543,  387,  612,
 /*  5960 */   594,  612,  267,  612,  612,  612,  612,  612,  458,  612,
 /*  5970 */   612,  702,  327,  612,  612,  612,  612,  612,  386,  612,
 /*  5980 */   387,  704,  621,  612,  612,  350,  552,  612,  728,  612,
 /*  5990 */   458,  589,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6000 */   612,  612,  612,  704,  612,  612,  612,  350,  552,  612,
 /*  6010 */   728,  612,  454,  589,  612,  612,  612,  485,  341,  188,
 /*  6020 */   567,  612,  612,  612,  612,  583,  579,  651,  612,  612,
 /*  6030 */   596,  612,  612,  594,  454,  267,  599,  612,  612,  485,
 /*  6040 */   341,  188,  567,  612,  702,  327,  612,  583,  579,  651,
 /*  6050 */   612,  386,  633,  387,  612,  612,  612,  612,  599,  612,
 /*  6060 */   612,  612,  612,  458,  612,  612,  612,  612,  612,  612,
 /*  6070 */   612,  612,  612,  612,  612,  612,  704,  612,  612,  612,
 /*  6080 */   350,  552,  612,  728,  612,  612,  589,  506,  612,  612,
 /*  6090 */   612,  612,  612,  612,  612,  612,  550,  612,  612,  594,
 /*  6100 */   612,  267,  612,  525,  522,  612,  612,  454,  628,  612,
 /*  6110 */   702,  327,  485,  341,  188,  567,  612,  386,  612,  387,
 /*  6120 */   583,  579,  651,  612,  355,  612,  515,  612,  612,  458,
 /*  6130 */   612,  599,  612,  612,  598,  612,  612,  612,  612,  612,
 /*  6140 */   612,  612,  704,  612,  612,  612,  350,  552,  612,  728,
 /*  6150 */   612,  612,  589,  612,  612,  507,  512,  517,  535,  538,
 /*  6160 */   542,   75,  612,  149,  612,  612,  612,  612,  612,  612,
 /*  6170 */   612,  612,  612,  454,  612,  612,  612,  612,  485,  341,
 /*  6180 */   188,  567,  612,  612,  612,  612,  583,  579,  651,  596,
 /*  6190 */   612,  612,  594,  612,  267,  612,  612,  599,  612,  612,
 /*  6200 */   612,  612,  612,  702,  327,  612,  612,  612,  612,  612,
 /*  6210 */   386,  627,  387,  612,  612,  612,  612,  612,  612,  612,
 /*  6220 */   612,  612,  458,  612,  612,  612,  612,  612,  612,  612,
 /*  6230 */   612,  612,  612,  612,  612,  704,  612,  612,  612,  350,
 /*  6240 */   552,  612,  728,  612,  612,  589,  612,  612,  612,  612,
 /*  6250 */   612,  612,  612,  612,  570,  612,  612,  594,  612,  267,
 /*  6260 */   612,  612,  612,  612,  612,  612,  454,  612,  702,  327,
 /*  6270 */   612,  485,  341,  188,  567,  386,  612,  387,  612,  583,
 /*  6280 */   579,  651,  612,  612,  612,  612,  612,  458,  612,  612,
 /*  6290 */   599,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6300 */   704,  612,  612,  612,  350,  552,  612,  728,  612,  612,
 /*  6310 */   589,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6320 */   254,  612,  612,  594,  612,  267,  612,  612,  612,  612,
 /*  6330 */   612,  454,  612,  612,  702,  327,  485,  341,  188,  567,
 /*  6340 */   612,  386,  612,  387,  583,  579,  651,  612,  612,  612,
 /*  6350 */   612,  612,  612,  458,  612,  599,  612,  612,  612,  612,
 /*  6360 */   612,  612,  612,  612,  612,  612,  704,  612,  612,  612,
 /*  6370 */   350,  552,  612,  728,  612,  612,  589,  612,  612,  612,
 /*  6380 */   612,  612,  612,  612,  612,  612,  569,  612,  612,  594,
 /*  6390 */   612,  267,  612,  612,  612,  612,  612,  454,  612,  612,
 /*  6400 */   702,  327,  485,  341,  188,  567,  612,  386,  612,  387,
 /*  6410 */   583,  579,  651,  612,  612,  612,  612,  612,  612,  458,
 /*  6420 */   612,  599,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6430 */   612,  612,  704,  612,  612,  612,  350,  552,  612,  728,
 /*  6440 */   612,  612,  589,  612,  612,  612,  612,  612,  612,  612,
 /*  6450 */   612,  477,  612,  612,  594,  612,  267,  612,  612,  612,
 /*  6460 */   612,  612,  612,  454,  612,  702,  327,  612,  485,  341,
 /*  6470 */   188,  567,  386,  612,  387,  612,  583,  579,  651,  612,
 /*  6480 */   612,  612,  612,  612,  458,  612,  612,  599,  612,  612,
 /*  6490 */   612,  612,  612,  612,  612,  612,  612,  704,  612,  612,
 /*  6500 */   612,  350,  552,  612,  728,  612,  612,  589,  612,  612,
 /*  6510 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6520 */   612,  612,  285,  612,  612,  612,  612,  612,  454,  612,
 /*  6530 */   612,  359,  323,  485,  341,  188,  567,  612,  612,  612,
 /*  6540 */   612,  583,  579,  651,  612,  612,  612,  612,  612,  612,
 /*  6550 */   458,  612,  599,  612,  612,  612,  612,  612,  612,  612,
 /*  6560 */   612,  612,  612,  704,  612,  612,  612,  350,  552,  612,
 /*  6570 */   728,  612,  612,  589,  612,  612,  612,  612,  612,  612,
 /*  6580 */   612,  612,  459,  503,  612,  612,  612,  612,  282,  612,
 /*  6590 */   612,  612,  612,  612,  454,  612,  612,  702,  327,  485,
 /*  6600 */   341,  188,  567,  612,  612,  612,  612,  583,  579,  651,
 /*  6610 */   612,  612,  612,  612,  612,  612,  458,  612,  599,  612,
 /*  6620 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  704,
 /*  6630 */   612,  612,  612,  350,  552,  612,  728,  493,  612,  589,
 /*  6640 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  288,
 /*  6650 */   612,  612,  612,  612,  612,  478,  612,  612,  702,  327,
 /*  6660 */   454,  612,  612,  612,  612,  485,  341,  188,  567,  612,
 /*  6670 */   612,  612,  612,  583,  579,  651,  612,  458,  612,  216,
 /*  6680 */   612,  612,  612,  612,  599,  612,  612,  612,  612,  612,
 /*  6690 */   704,  612,  612,  612,  350,  552,  612,  728,  612,  612,
 /*  6700 */   589,  612,  285,  612,  612,  612,  612,  612,  612,  612,
 /*  6710 */   612,  359,  323,  612,  612,  612,  612,  612,  612,  612,
 /*  6720 */   612,  454,  612,  612,  612,  612,  485,  341,  188,  567,
 /*  6730 */   458,  612,  612,  612,  583,  579,  651,  612,  612,  612,
 /*  6740 */   612,  612,  612,  704,  612,  599,  612,  350,  552,  417,
 /*  6750 */   728,  612,  612,  589,  612,  612,  612,  612,  612,  612,
 /*  6760 */   612,  612,  484,  503,  612,  612,  612,  612,  285,  612,
 /*  6770 */   612,  612,  612,  612,  454,  612,  612,  359,  323,  485,
 /*  6780 */   341,  188,  567,  612,  612,  612,  612,  583,  579,  651,
 /*  6790 */   612,  612,  612,  612,  612,  612,  458,  612,  599,  612,
 /*  6800 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  704,
 /*  6810 */   612,  288,  612,  350,  552,  612,  728,  480,  612,  589,
 /*  6820 */   702,  327,  612,  612,  612,  612,  612,  612,  474,  503,
 /*  6830 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  458,
 /*  6840 */   454,  612,  612,  612,  612,  485,  341,  188,  567,  612,
 /*  6850 */   612,  612,  704,  583,  579,  651,  350,  552,  612,  728,
 /*  6860 */   612,  612,  589,  612,  599,  612,  612,  612,  612,  612,
 /*  6870 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6880 */   612,  612,  612,  454,  612,  612,  612,  612,  485,  341,
 /*  6890 */   188,  567,  612,  612,  612,  285,  583,  579,  651,  612,
 /*  6900 */   612,  612,  612,  612,  359,  323,  612,  599,  612,  612,
 /*  6910 */   612,  417,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6920 */   288,  612,  612,  458,  612,  612,  479,  612,  612,  702,
 /*  6930 */   327,  612,  612,  612,  612,  612,  704,  612,  612,  612,
 /*  6940 */   350,  552,  612,  728,  612,  612,  589,  612,  458,  612,
 /*  6950 */   612,  612,  612,  612,  612,  456,  503,  612,  612,  612,
 /*  6960 */   612,  704,  612,  612,  612,  350,  552,  454,  728,  612,
 /*  6970 */   612,  589,  485,  341,  188,  567,  612,  612,  612,  612,
 /*  6980 */   583,  579,  651,  612,  612,  612,  612,  612,  612,  612,
 /*  6990 */   612,  599,  454,  612,  612,  612,  612,  485,  341,  188,
 /*  7000 */   567,  612,  612,  612,  285,  583,  579,  651,  612,  612,
 /*  7010 */   612,  612,  612,  359,  323,  612,  599,  612,  612,  612,
 /*  7020 */   417,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7030 */   612,  612,  458,  612,  612,  612,  612,  612,  612,  612,
 /*  7040 */   612,  612,  612,  612,  612,  704,  612,  285,  612,  350,
 /*  7050 */   552,  612,  728,  612,  612,  589,  359,  323,  612,  612,
 /*  7060 */   612,  612,  612,  612,  469,  503,  612,  612,  612,  612,
 /*  7070 */   612,  612,  612,  612,  612,  458,  454,  612,  612,  612,
 /*  7080 */   612,  485,  341,  188,  567,  612,  612,  612,  704,  583,
 /*  7090 */   579,  651,  350,  552,  612,  728,  612,  612,  589,  612,
 /*  7100 */   599,  612,  612,  612,  612,  612,  612,  455,  503,  612,
 /*  7110 */   612,  612,  612,  286,  612,  612,  612,  612,  612,  454,
 /*  7120 */   612,  612,  702,  327,  485,  341,  188,  567,  612,  612,
 /*  7130 */   612,  612,  583,  579,  651,  612,  612,  612,  612,  612,
 /*  7140 */   612,  458,  612,  599,  612,  612,  612,  612,  612,  612,
 /*  7150 */   612,  612,  612,  612,  704,  612,  286,  612,  350,  552,
 /*  7160 */   612,  728,  612,  612,  589,  702,  327,  612,  612,  612,
 /*  7170 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7180 */   612,  612,  612,  612,  458,  454,  612,  612,  612,  612,
 /*  7190 */   485,  341,  188,  567,  612,  612,  473,  704,  583,  579,
 /*  7200 */   651,  350,  552,  612,  728,  612,  612,  589,  612,  599,
 /*  7210 */   612,  612,  612,  612,  612,  612,  286,  612,  612,  612,
 /*  7220 */   612,  612,  612,  612,  612,  702,  327,  612,  454,  612,
 /*  7230 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  501,
 /*  7240 */   612,  583,  579,  651,  458,  612,  612,  612,  612,  612,
 /*  7250 */   612,  612,  599,  612,  612,  612,  612,  704,  612,  293,
 /*  7260 */   612,  350,  552,  612,  728,  612,  612,  589,  702,  327,
 /*  7270 */   612,  612,  353,  612,  612,  612,  612,  612,  612,  612,
 /*  7280 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7290 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  460,
 /*  7300 */   704,  583,  579,  651,  350,  552,  261,  728,  612,  612,
 /*  7310 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7320 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7330 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7340 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  321,
 /*  7350 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7360 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7370 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7380 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7390 */   704,  583,  579,  651,  350,  552,  258,  728,  612,  612,
 /*  7400 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7410 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7420 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7430 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  292,
 /*  7440 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7450 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7460 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7470 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7480 */   704,  583,  579,  651,  350,  552,  277,  728,  612,  612,
 /*  7490 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7500 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7510 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7520 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  278,
 /*  7530 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7540 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7550 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7560 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7570 */   704,  583,  579,  651,  350,  552,  545,  728,  612,  612,
 /*  7580 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7590 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7600 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7610 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  297,
 /*  7620 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7630 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7640 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7650 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7660 */   704,  583,  579,  651,  350,  552,  285,  728,  612,  612,
 /*  7670 */   589,  612,  599,  612,  612,  429,  325,  612,  612,  612,
 /*  7680 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7690 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7700 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  568,
 /*  7710 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7720 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7730 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7740 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7750 */   704,  583,  579,  651,  350,  552,  315,  728,  612,  612,
 /*  7760 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7770 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7780 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7790 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  275,
 /*  7800 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7810 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7820 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7830 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7840 */   704,  583,  579,  651,  350,  552,  309,  728,  612,  612,
 /*  7850 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7860 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7870 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7880 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  316,
 /*  7890 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7900 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7910 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  7920 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  7930 */   704,  583,  579,  651,  350,  552,  284,  728,  612,  612,
 /*  7940 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  7950 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7960 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  7970 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  558,
 /*  7980 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  7990 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8000 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8010 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8020 */   704,  583,  579,  651,  350,  552,  547,  728,  612,  612,
 /*  8030 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8040 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8050 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8060 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  555,
 /*  8070 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8080 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8090 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8100 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8110 */   704,  583,  579,  651,  350,  552,  290,  728,  612,  612,
 /*  8120 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8130 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8140 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8150 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  556,
 /*  8160 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8170 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8180 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8190 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8200 */   704,  583,  579,  651,  350,  552,  557,  728,  612,  612,
 /*  8210 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8220 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8230 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8240 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  311,
 /*  8250 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8260 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8270 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8280 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8290 */   704,  583,  579,  651,  350,  552,  595,  728,  612,  612,
 /*  8300 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8310 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8320 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8330 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  280,
 /*  8340 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8350 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8360 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8370 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8380 */   704,  583,  579,  651,  350,  552,  302,  728,  612,  612,
 /*  8390 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8400 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8410 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8420 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  453,
 /*  8430 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8440 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8450 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8460 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8470 */   704,  583,  579,  651,  350,  552,  294,  728,  612,  612,
 /*  8480 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8490 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8500 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8510 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  276,
 /*  8520 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8530 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8540 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8550 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8560 */   704,  583,  579,  651,  350,  552,  337,  728,  612,  612,
 /*  8570 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8580 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8590 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8600 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  313,
 /*  8610 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8620 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8630 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8640 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8650 */   704,  583,  579,  651,  350,  552,  307,  728,  612,  612,
 /*  8660 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8670 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8680 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8690 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  335,
 /*  8700 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8710 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8720 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8730 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8740 */   704,  583,  579,  651,  350,  552,  273,  728,  612,  612,
 /*  8750 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8760 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8770 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8780 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  612,
 /*  8790 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8800 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8810 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8820 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8830 */   704,  583,  579,  651,  350,  552,  329,  728,  612,  612,
 /*  8840 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8850 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8860 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8870 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  271,
 /*  8880 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8890 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8900 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  8910 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  8920 */   704,  583,  579,  651,  350,  552,  289,  728,  612,  612,
 /*  8930 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  8940 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8950 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  8960 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  274,
 /*  8970 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  8980 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8990 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9000 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9010 */   704,  583,  579,  651,  350,  552,  285,  728,  612,  612,
 /*  9020 */   589,  612,  599,  612,  612,  500,  326,  612,  612,  612,
 /*  9030 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9040 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9050 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  272,
 /*  9060 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9070 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9080 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9090 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9100 */   704,  583,  579,  651,  350,  552,  334,  728,  612,  612,
 /*  9110 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9120 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9130 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9140 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  332,
 /*  9150 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9160 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9170 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9180 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9190 */   704,  583,  579,  651,  350,  552,  318,  728,  612,  612,
 /*  9200 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9210 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9220 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9230 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  262,
 /*  9240 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9250 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9260 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9270 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9280 */   704,  583,  579,  651,  350,  552,  279,  728,  612,  612,
 /*  9290 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9300 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9310 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9320 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  486,
 /*  9330 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9340 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9350 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9360 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9370 */   704,  583,  579,  651,  350,  552,  310,  728,  612,  612,
 /*  9380 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9390 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9400 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9410 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  489,
 /*  9420 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9430 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9440 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9450 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9460 */   704,  583,  579,  651,  350,  552,  333,  728,  612,  612,
 /*  9470 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9480 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9490 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9500 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  269,
 /*  9510 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9520 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9530 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9540 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9550 */   704,  583,  579,  651,  350,  552,  263,  728,  612,  612,
 /*  9560 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9570 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9580 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9590 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  268,
 /*  9600 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9610 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9620 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9630 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9640 */   704,  583,  579,  651,  350,  552,  336,  728,  612,  612,
 /*  9650 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9660 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9670 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9680 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  295,
 /*  9690 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9700 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9710 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9720 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9730 */   704,  583,  579,  651,  350,  552,  266,  728,  612,  612,
 /*  9740 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9750 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9760 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9770 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  283,
 /*  9780 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9790 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9800 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9810 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9820 */   704,  583,  579,  651,  350,  552,  322,  728,  612,  612,
 /*  9830 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9840 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9850 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9860 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  291,
 /*  9870 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9880 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9890 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9900 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /*  9910 */   704,  583,  579,  651,  350,  552,  319,  728,  612,  612,
 /*  9920 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /*  9930 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9940 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /*  9950 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  314,
 /*  9960 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /*  9970 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9980 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /*  9990 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10000 */   704,  583,  579,  651,  350,  552,  296,  728,  612,  612,
 /* 10010 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10020 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10030 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10040 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  331,
 /* 10050 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10060 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10070 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10080 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10090 */   704,  583,  579,  651,  350,  552,  312,  728,  612,  612,
 /* 10100 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10110 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10120 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10130 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  308,
 /* 10140 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10150 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10160 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10170 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10180 */   704,  583,  579,  651,  350,  552,  300,  728,  612,  612,
 /* 10190 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10200 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10210 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10220 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  328,
 /* 10230 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10240 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10250 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10260 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10270 */   704,  583,  579,  651,  350,  552,  648,  728,  612,  612,
 /* 10280 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10290 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10300 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10310 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  306,
 /* 10320 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10330 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10340 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10350 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10360 */   704,  583,  579,  651,  350,  552,  304,  728,  612,  612,
 /* 10370 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10380 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10390 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10400 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  270,
 /* 10410 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10420 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10430 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10440 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10450 */   704,  583,  579,  651,  350,  552,  298,  728,  612,  612,
 /* 10460 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10470 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10480 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10490 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  320,
 /* 10500 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10510 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10520 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10530 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10540 */   704,  583,  579,  651,  350,  552,  330,  728,  612,  612,
 /* 10550 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10560 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10570 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10580 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  317,
 /* 10590 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10600 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10610 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10620 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10630 */   704,  583,  579,  651,  350,  552,  305,  728,  612,  612,
 /* 10640 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10650 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10660 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10670 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  303,
 /* 10680 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10690 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10700 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10710 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10720 */   704,  583,  579,  651,  350,  552,  193,  728,  612,  612,
 /* 10730 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10740 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10750 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10760 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  285,
 /* 10770 */   612,  350,  552,  612,  728,  599,  612,  589,  348,  324,
 /* 10780 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10790 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10800 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10810 */   704,  583,  579,  651,  350,  552,  287,  728,  612,  612,
 /* 10820 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10830 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10840 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10850 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  260,
 /* 10860 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10870 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10880 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10890 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10900 */   704,  583,  579,  651,  350,  552,  299,  728,  612,  612,
 /* 10910 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 10920 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10930 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 10940 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  462,
 /* 10950 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 10960 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10970 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 10980 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 10990 */   704,  583,  579,  651,  350,  552,  281,  728,  612,  612,
 /* 11000 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 11010 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11020 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 11030 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  301,
 /* 11040 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 11050 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11060 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 11070 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 11080 */   704,  583,  579,  651,  350,  552,  264,  728,  612,  612,
 /* 11090 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 11100 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11110 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 11120 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  259,
 /* 11130 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 11140 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11150 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 11160 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 11170 */   704,  583,  579,  651,  350,  552,  265,  728,  612,  612,
 /* 11180 */   589,  612,  599,  612,  612,  702,  327,  612,  612,  612,
 /* 11190 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11200 */   612,  454,  612,  612,  458,  612,  485,  341,  188,  567,
 /* 11210 */   612,  612,  612,  612,  583,  579,  651,  704,  612,  338,
 /* 11220 */   612,  350,  552,  612,  728,  599,  612,  589,  702,  327,
 /* 11230 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11240 */   612,  612,  612,  612,  612,  612,  612,  458,  454,  612,
 /* 11250 */   612,  612,  612,  485,  341,  188,  567,  612,  612,  612,
 /* 11260 */   704,  583,  579,  651,  350,  552,  612,  728,  612,  612,
 /* 11270 */   589,  612,  599,  612,  612,  612,  612,  612,  612,  612,
 /* 11280 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 11290 */   612,  454,  612,  612,  612,  612,  485,  341,  188,  567,
 /* 11300 */   612,  612,  612,  612,  583,  579,  651,  612,  612,  612,
 /* 11310 */   612,  612,  612,  612,  612,  599,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    2,    3,    4,    5,  120,  121,  122,   23,   10,
 /*    10 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*    20 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*    30 */    45,   76,   47,   65,   66,   67,   68,   69,   70,   40,
 /*    40 */    41,  120,  121,  122,   76,   46,    6,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,  116,   60,
 /*    60 */    61,  143,  144,  229,   65,   66,   67,  233,   64,  235,
 /*    70 */    71,   72,  238,   74,   75,   76,   77,   78,   79,   80,
 /*    80 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*    90 */    91,   92,   93,  125,  126,   96,   97,   98,   99,   96,
 /*   100 */   101,   98,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   110 */   111,  112,  113,  114,   74,    1,    2,    3,    4,    5,
 /*   120 */    74,   75,    6,  124,   10,   65,   66,   67,   68,   69,
 /*   130 */    70,   11,  129,  134,   72,  136,  137,  138,  139,  140,
 /*   140 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   150 */    44,   45,  115,   47,   40,   41,  230,   97,  232,  233,
 /*   160 */    46,  235,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   170 */    56,   57,   58,   72,   60,   61,   47,  172,  173,   65,
 /*   180 */    66,   67,  177,  178,   76,   71,   72,    6,   74,   75,
 /*   190 */    74,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   200 */    86,   87,   88,   89,   90,   91,   92,   93,    6,  115,
 /*   210 */    96,   97,   98,   99,   24,  101,   59,  103,  104,  105,
 /*   220 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  121,
 /*   230 */   122,  117,   75,    1,    2,    3,    4,    5,  124,  228,
 /*   240 */   229,  230,   10,  232,  233,   75,  235,   74,  134,  238,
 /*   250 */   136,  137,  138,  139,  140,   76,   40,   41,   42,   43,
 /*   260 */    44,   45,   75,   47,   74,   29,   65,   66,   67,   68,
 /*   270 */    69,   70,   40,   41,   96,   73,   98,   76,   46,  109,
 /*   280 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   290 */    58,   99,   60,   61,   49,   50,    6,   65,   66,   67,
 /*   300 */   121,  122,  124,   71,   72,   76,   74,   75,   76,   77,
 /*   310 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   320 */    88,   89,   90,   91,   92,   93,  125,  126,   96,   97,
 /*   330 */    98,   99,   96,  101,   98,  103,  104,  105,  106,  107,
 /*   340 */   108,  109,  110,  111,  112,  113,  114,  172,    1,    2,
 /*   350 */     3,    4,    5,  178,   11,    6,  124,   10,  214,  215,
 /*   360 */   124,  217,  218,   73,  220,  221,  134,   72,  136,  137,
 /*   370 */   138,  139,  140,  202,  203,  224,  205,   98,   96,  228,
 /*   380 */   229,  230,  202,  203,  204,  205,  206,   40,   41,  238,
 /*   390 */   239,  240,   78,   46,   59,   48,   49,   50,   51,   52,
 /*   400 */    53,   54,   55,   56,   57,   58,  124,   60,   61,   98,
 /*   410 */    75,  229,   65,   66,   67,   98,  105,   73,   71,   72,
 /*   420 */   238,   74,   75,   74,   77,   78,   79,   80,   81,   82,
 /*   430 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   440 */    93,  184,   98,   96,   97,   98,   99,   74,  101,  105,
 /*   450 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   460 */   113,  114,   73,    6,  224,  118,  209,  210,  228,  229,
 /*   470 */   230,  124,   72,    1,    2,    3,    4,    5,  238,  239,
 /*   480 */   240,  134,   10,  136,  137,  138,  139,  140,   26,   27,
 /*   490 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*   500 */    38,   39,   40,   41,   42,   43,   44,   45,   72,   47,
 /*   510 */   184,   72,   40,   41,  202,  203,  116,  205,   46,  179,
 /*   520 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   530 */    58,  191,   60,   61,  128,  209,  210,   65,   66,   67,
 /*   540 */    62,   63,   24,   71,   72,   59,   74,   75,    6,   77,
 /*   550 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   560 */    88,   89,   90,   91,   92,   93,   72,    6,   96,   97,
 /*   570 */    98,   99,  233,  101,  235,  103,  104,  105,  106,  107,
 /*   580 */   108,  109,  110,  111,  112,  113,  114,   60,    1,    2,
 /*   590 */     3,    4,    5,   62,   63,  123,  124,   10,   43,   44,
 /*   600 */    45,   75,   47,  128,  202,  203,  134,  205,  136,  137,
 /*   610 */   138,  139,  140,  127,    6,  224,   74,  229,   96,  228,
 /*   620 */   229,  230,   96,   96,   98,   98,  238,   40,   41,  238,
 /*   630 */   239,  240,   96,   46,   73,   48,   49,   50,   51,   52,
 /*   640 */    53,   54,   55,   56,   57,   58,  124,   60,   61,   72,
 /*   650 */   124,  124,   65,   66,   67,   59,  127,  116,   71,   72,
 /*   660 */   124,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   670 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   680 */    93,   73,   73,   96,   97,   98,   99,   73,  101,   96,
 /*   690 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   700 */   113,  114,    6,    1,    2,    3,    4,    5,   96,   75,
 /*   710 */    98,  124,   10,  162,  224,  103,   75,  124,  228,  229,
 /*   720 */   230,  134,   59,  136,  137,  138,  139,  140,  238,  239,
 /*   730 */   240,   59,  229,   24,   11,   72,  124,   96,   75,   98,
 /*   740 */    72,  238,   40,   41,   72,   24,   72,   75,   46,  179,
 /*   750 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   760 */    58,  191,   60,   61,  213,  124,    6,   65,   66,   67,
 /*   770 */    74,   73,   11,   71,   72,   72,   74,   75,   73,   77,
 /*   780 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   790 */    88,   89,   90,   91,   92,   93,   75,   75,   96,   97,
 /*   800 */    98,   99,   59,  101,  116,  103,  104,  105,  106,  107,
 /*   810 */   108,  109,  110,  111,  112,  113,  114,   72,   75,   29,
 /*   820 */    74,  119,  202,  203,   29,  205,  124,   74,    1,    2,
 /*   830 */     3,    4,    5,   73,   11,    6,  134,   10,  136,  137,
 /*   840 */   138,  139,  140,   27,   28,   29,   30,   31,   32,   33,
 /*   850 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   860 */    44,   45,   96,   47,   98,  116,   74,   40,   41,  202,
 /*   870 */   203,   72,  205,   46,   72,   48,   49,   50,   51,   52,
 /*   880 */    53,   54,   55,   56,   57,   58,   96,   60,   61,   72,
 /*   890 */   124,   96,   65,   66,   67,  128,   99,   73,   71,   72,
 /*   900 */    72,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   910 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   920 */    93,   72,    6,   96,   97,   98,   99,   96,  101,   98,
 /*   930 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   940 */   113,  114,   73,    1,    2,    3,    4,    5,   96,  109,
 /*   950 */    98,  124,   10,  202,  203,  124,  205,  202,  203,   98,
 /*   960 */   205,  134,   11,  136,  137,  138,  139,  140,   73,   75,
 /*   970 */   202,  203,   11,  205,   72,   75,  124,  202,  203,   74,
 /*   980 */   205,   11,   40,   41,  202,  203,   96,  205,   46,   73,
 /*   990 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1000 */    58,    6,   60,   61,   72,   72,   76,   65,   66,   67,
 /*  1010 */    98,   73,  150,   71,   72,   72,   74,   75,   76,   77,
 /*  1020 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1030 */    88,   89,   90,   91,   92,   93,   96,   74,   96,   97,
 /*  1040 */    98,   99,   74,  101,   72,  103,  104,  105,  106,  107,
 /*  1050 */   108,  109,  110,  111,  112,  113,  114,  170,    1,    2,
 /*  1060 */     3,    4,    5,   98,  124,  195,  124,   10,   73,   72,
 /*  1070 */   202,  203,  225,  205,  115,  179,  134,   98,  136,  137,
 /*  1080 */   138,  139,  140,  202,  203,  172,  205,  202,  203,   95,
 /*  1090 */   205,  202,  203,   74,  205,  207,  179,   40,   41,   29,
 /*  1100 */   175,  202,  203,   46,  205,   48,   49,   50,   51,   52,
 /*  1110 */    53,   54,   55,   56,   57,   58,  195,   60,   61,  183,
 /*  1120 */    72,  150,   65,   66,   67,  150,   11,    6,   71,   72,
 /*  1130 */   150,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*  1140 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1150 */    93,  201,  150,   96,   97,   98,   99,  128,  101,   97,
 /*  1160 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1170 */   113,  114,  226,    1,    2,    3,    4,    5,  175,  127,
 /*  1180 */   198,  124,   10,  202,  203,  250,  205,  202,  203,   75,
 /*  1190 */   205,  134,   11,  136,  137,  138,  139,  140,  207,  179,
 /*  1200 */   155,  159,  153,  245,  208,  219,  213,   74,  165,  210,
 /*  1210 */   221,  244,   40,   41,  208,  207,  186,  100,   46,    6,
 /*  1220 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1230 */    58,  190,   60,   61,  225,  100,  183,   65,   66,   67,
 /*  1240 */    96,  243,  216,   71,   72,   96,   74,   75,  163,   77,
 /*  1250 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1260 */    88,   89,   90,   91,   92,   93,  127,  187,   96,   97,
 /*  1270 */    98,   99,  102,  101,  227,  103,  104,  105,  106,  107,
 /*  1280 */   108,  109,  110,  111,  112,  113,  114,  150,    1,    2,
 /*  1290 */     3,    4,    5,   98,   73,   75,  124,   10,   73,   72,
 /*  1300 */    98,   73,   96,   72,  207,   96,  134,  188,  136,  137,
 /*  1310 */   138,  139,  140,   73,  201,   72,   11,  127,   74,  116,
 /*  1320 */    74,   74,   74,   72,   24,   73,   73,   40,   41,   74,
 /*  1330 */    96,   11,   74,   46,   73,   48,   49,   50,   51,   52,
 /*  1340 */    53,   54,   55,   56,   57,   58,    6,   60,   61,   73,
 /*  1350 */   152,   94,   65,   66,   67,   75,   72,  150,   71,   72,
 /*  1360 */   150,   74,   75,   11,   77,   78,   79,   80,   81,   82,
 /*  1370 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1380 */    93,  201,  150,   96,   97,   98,   99,   72,  101,   98,
 /*  1390 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1400 */   113,  114,   98,  249,  150,  201,  150,  188,   72,  150,
 /*  1410 */   150,  124,   75,    1,    2,    3,    4,    5,  150,   96,
 /*  1420 */    72,  134,   10,  136,  137,  138,  139,  140,   98,  150,
 /*  1430 */   252,  252,  252,  252,  252,  252,   24,   11,   12,   13,
 /*  1440 */    14,   15,   16,   17,   18,   19,   20,   21,   22,  252,
 /*  1450 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  1460 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1470 */    58,  252,   60,   61,  252,   49,   50,   65,  252,  252,
 /*  1480 */   252,  252,  252,  252,   72,  252,   74,   75,  252,   77,
 /*  1490 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1500 */    88,   89,   90,   91,   92,   93,  252,  252,   96,  252,
 /*  1510 */    98,  252,  252,  179,  252,  103,  104,  105,  106,  107,
 /*  1520 */   108,  109,  110,  111,  112,  113,  114,  252,  194,  252,
 /*  1530 */   252,  252,  252,  252,  252,  252,  124,  252,    1,    2,
 /*  1540 */     3,    4,    5,  252,  252,  252,  134,   10,  136,  137,
 /*  1550 */   138,  139,  140,  252,  252,  252,  252,  252,  252,  252,
 /*  1560 */   252,   24,  252,  229,  230,  231,  252,  252,  252,  252,
 /*  1570 */   236,  252,  238,  252,  252,  252,  252,   40,   41,  252,
 /*  1580 */   252,  252,  248,   46,  252,   48,   49,   50,   51,   52,
 /*  1590 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  1600 */   252,  252,   65,  252,  252,  252,  252,  252,  252,   72,
 /*  1610 */   252,   74,   75,  252,   77,   78,   79,   80,   81,   82,
 /*  1620 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1630 */    93,  252,  252,   96,  252,   98,  252,  252,  179,  252,
 /*  1640 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1650 */   113,  114,  252,  194,  252,  252,  252,  252,  252,  252,
 /*  1660 */   252,  124,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  1670 */   252,  134,   10,  136,  137,  138,  139,  140,  252,  252,
 /*  1680 */   252,  252,  252,  252,  252,  252,   24,  252,  229,  230,
 /*  1690 */   231,  252,  252,  252,  252,  236,  252,  238,  252,  252,
 /*  1700 */   252,  252,   40,   41,  252,  252,  252,  248,   46,  252,
 /*  1710 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1720 */    58,  252,   60,   61,  252,  252,  252,   65,  252,  252,
 /*  1730 */   252,  252,  252,  252,   72,  252,   74,   75,  252,   77,
 /*  1740 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1750 */    88,   89,   90,   91,   92,   93,  252,  252,   96,  252,
 /*  1760 */    98,  252,  179,  252,  252,  103,  104,  105,  106,  107,
 /*  1770 */   108,  109,  110,  111,  112,  113,  114,  194,  252,  252,
 /*  1780 */   252,  252,  252,  252,  252,  252,  124,  252,    1,    2,
 /*  1790 */     3,    4,    5,  252,  252,  252,  134,   10,  136,  137,
 /*  1800 */   138,  139,  140,  252,  252,  252,  252,  252,  252,  252,
 /*  1810 */   252,   24,  229,  230,  231,  252,  252,  252,  252,  236,
 /*  1820 */   252,  238,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  1830 */   252,  248,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  1840 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  1850 */   252,  252,   65,  252,  252,  252,  252,  252,  252,   72,
 /*  1860 */   252,   74,   75,  252,   77,   78,   79,   80,   81,   82,
 /*  1870 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1880 */    93,  252,  252,   96,  252,   98,  252,  252,  252,  252,
 /*  1890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1900 */   113,  114,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  1910 */   252,  124,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  1920 */   252,  134,   10,  136,  137,  138,  139,  140,  252,  252,
 /*  1930 */   252,  252,  252,  252,  252,  252,   24,  252,  252,  252,
 /*  1940 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  1950 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  1960 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1970 */    58,  252,   60,   61,  252,  252,  252,   65,  252,  252,
 /*  1980 */   252,  252,  252,  252,   72,  252,   74,   75,  252,   77,
 /*  1990 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2000 */    88,   89,   90,   91,   92,   93,  252,  252,   96,  252,
 /*  2010 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  2020 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  2030 */     3,    4,    5,  252,  252,  252,  124,   10,  252,  252,
 /*  2040 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  2050 */   138,  139,  140,  252,  252,  252,  252,  252,  252,  252,
 /*  2060 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  2070 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  2080 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  2090 */   252,  252,   65,  252,  252,  252,  252,  252,  252,   72,
 /*  2100 */   252,   74,   75,  252,   77,   78,   79,   80,   81,   82,
 /*  2110 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2120 */    93,  252,  252,   96,  252,   98,  252,  252,  252,  252,
 /*  2130 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2140 */   113,  114,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  2150 */   252,  124,   10,  252,  252,  252,  252,  252,  252,  252,
 /*  2160 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  2170 */   252,   29,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  2180 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  2190 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2200 */    58,    9,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  2210 */   252,  252,  252,  252,   72,   23,  252,   25,   26,   27,
 /*  2220 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  2230 */    38,   39,   40,   41,   42,   43,   44,   45,   96,   47,
 /*  2240 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  2250 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  2260 */     3,    4,    5,  252,  252,  252,  124,   10,  252,  252,
 /*  2270 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  2280 */   138,  139,  140,  252,  252,  252,   29,  252,  252,  252,
 /*  2290 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  2300 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  2310 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  2320 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   72,
 /*  2330 */   252,  252,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  2340 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  2350 */    43,   44,   45,   96,   47,   98,  252,  252,  252,  252,
 /*  2360 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2370 */   113,  114,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  2380 */   252,  124,   10,  252,  252,  252,  252,  252,  252,  252,
 /*  2390 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  2400 */   252,   29,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  2410 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  2420 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2430 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  2440 */   252,  252,  252,  252,   72,  252,  252,   28,   29,   30,
 /*  2450 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  2460 */    41,   42,   43,   44,   45,  252,   47,  252,   96,  252,
 /*  2470 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  2480 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  2490 */     3,    4,    5,  252,  252,  252,  124,   10,  252,  252,
 /*  2500 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  2510 */   138,  139,  140,  252,  252,  252,   29,  252,  252,  252,
 /*  2520 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  2530 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  2540 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  2550 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   72,
 /*  2560 */   252,  252,  252,   29,   30,   31,   32,   33,   34,   35,
 /*  2570 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  2580 */   252,   47,  252,   96,  252,   98,  252,  252,  252,  252,
 /*  2590 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2600 */   113,  114,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  2610 */   252,  124,   10,  252,  252,  252,  252,  252,  252,  252,
 /*  2620 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  2630 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  2640 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  2650 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2660 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  2670 */   252,  252,  252,  252,   72,   73,  252,  252,  252,   30,
 /*  2680 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  2690 */    41,   42,   43,   44,   45,  252,   47,  252,   96,  252,
 /*  2700 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  2710 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  2720 */     3,    4,    5,  252,  252,  252,  124,   10,  252,  252,
 /*  2730 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  2740 */   138,  139,  140,  252,  252,  252,   29,  252,  252,  252,
 /*  2750 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  2760 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  2770 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  2780 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   72,
 /*  2790 */   252,  252,  252,  252,  252,  252,    6,  252,  252,  252,
 /*  2800 */   252,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2810 */    20,   21,   22,   96,  252,   98,  252,  252,  252,  252,
 /*  2820 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2830 */   113,  114,  252,    1,    2,    3,    4,    5,  252,   49,
 /*  2840 */    50,  124,   10,  252,  252,  252,  252,  252,  252,  252,
 /*  2850 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  2860 */   252,   29,  252,   73,  252,  252,  252,  252,  252,  252,
 /*  2870 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  2880 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2890 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  2900 */   252,  252,  252,  252,   72,  252,  252,  252,  252,  252,
 /*  2910 */   252,    6,  252,  252,  252,  252,   11,   12,   13,   14,
 /*  2920 */    15,   16,   17,   18,   19,   20,   21,   22,   96,  252,
 /*  2930 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  2940 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  2950 */     3,    4,    5,  252,   49,   50,  124,   10,  252,  252,
 /*  2960 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  2970 */   138,  139,  140,  252,  252,  252,  252,  252,   73,  252,
 /*  2980 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  2990 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  3000 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  3010 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   72,
 /*  3020 */   252,   74,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  3030 */   252,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3040 */    20,   21,   22,   96,  252,   98,  252,  252,  252,  252,
 /*  3050 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3060 */   113,  114,  252,    1,    2,    3,    4,    5,  252,   49,
 /*  3070 */    50,  124,   10,  161,  252,  252,  252,  252,  252,  252,
 /*  3080 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  3090 */   252,  179,  252,  252,   74,  252,  252,  252,  252,  252,
 /*  3100 */   252,  252,   40,   41,  252,  193,  252,  252,   46,  252,
 /*  3110 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3120 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  3130 */   252,  252,  252,  252,   72,  223,   74,  252,  252,  252,
 /*  3140 */   228,  229,  230,  231,  252,  252,  252,  252,  236,  237,
 /*  3150 */   238,  252,  252,  241,  252,  252,  252,  252,   96,  252,
 /*  3160 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  3170 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  3180 */     3,    4,    5,   40,   41,  252,  124,   10,  252,  252,
 /*  3190 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  3200 */   138,  139,  140,  252,  252,  252,   29,  252,  252,  252,
 /*  3210 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  3220 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  3230 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  3240 */   252,   98,  252,  252,  252,  252,  252,  252,  105,   72,
 /*  3250 */   107,  108,  109,  110,  111,  112,  113,  114,  252,  252,
 /*  3260 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  3270 */   252,  252,  252,   96,  252,   98,  252,  252,  252,  252,
 /*  3280 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3290 */   113,  114,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  3300 */   252,  124,   10,  161,  252,  252,  252,  252,  252,  252,
 /*  3310 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  3320 */   252,  179,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  3330 */   252,  252,   40,   41,  252,  193,  252,  252,   46,  252,
 /*  3340 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3350 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  3360 */   252,  252,  252,  252,   72,  223,   74,  252,  252,  252,
 /*  3370 */   228,  229,  230,  231,  252,  252,  252,  252,  236,  237,
 /*  3380 */   238,  252,  252,  241,  252,  252,  252,  252,   96,  252,
 /*  3390 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  3400 */   108,  109,  110,  111,  112,  113,  114,  252,    1,    2,
 /*  3410 */     3,    4,    5,  252,  252,  161,  124,   10,  252,  161,
 /*  3420 */   166,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  3430 */   138,  139,  140,  179,  176,  252,  252,  179,  252,  252,
 /*  3440 */   252,  252,  252,  252,  252,  252,  252,   40,   41,  252,
 /*  3450 */   252,  252,  252,   46,  252,   48,   49,   50,   51,   52,
 /*  3460 */    53,   54,   55,   56,   57,   58,  252,   60,   61,  252,
 /*  3470 */   252,  252,  252,  252,  252,  252,  222,  223,  252,   72,
 /*  3480 */   252,  223,  228,  229,  230,  231,  228,  229,  230,  231,
 /*  3490 */   236,  237,  238,  252,  236,  237,  238,  252,  252,  252,
 /*  3500 */   252,  252,  252,   96,  252,   98,  252,  252,  252,  252,
 /*  3510 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3520 */   113,  114,  252,    1,    2,    3,    4,    5,  252,  252,
 /*  3530 */   252,  124,   10,  252,  252,  252,  252,  252,  252,  252,
 /*  3540 */   252,  134,  252,  136,  137,  138,  139,  140,  252,  252,
 /*  3550 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  3560 */   252,  252,   40,   41,  252,  252,  252,  252,   46,  252,
 /*  3570 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3580 */    58,  252,   60,   61,  252,  252,  252,  252,  252,  252,
 /*  3590 */   252,  252,  252,  252,   72,  252,  252,  252,  252,  252,
 /*  3600 */   252,  252,  252,  252,  252,  252,   11,   12,   13,   14,
 /*  3610 */    15,   16,   17,   18,   19,   20,   21,   22,   96,  252,
 /*  3620 */    98,  252,  252,  252,  252,  103,  104,  105,  106,  107,
 /*  3630 */   108,  109,  110,  111,  112,  113,  114,  252,  252,  252,
 /*  3640 */   252,  252,  252,  252,   49,   50,  124,  252,  252,  252,
 /*  3650 */   252,  252,  252,  252,  252,  252,  134,  252,  136,  137,
 /*  3660 */   138,  139,  140,  146,  147,  148,  149,  161,  151,  252,
 /*  3670 */   252,  154,  252,  252,  252,  252,  252,  160,  161,  252,
 /*  3680 */   174,  252,  176,  252,  167,  179,  169,  252,  252,   94,
 /*  3690 */   252,  252,  252,  252,  252,  252,  179,  180,  181,  182,
 /*  3700 */   252,  252,  185,  252,  252,  252,  189,  161,  252,  192,
 /*  3710 */   252,  252,  252,  196,  197,  252,  199,  252,  252,  202,
 /*  3720 */   174,  252,  176,  252,  252,  179,  252,  252,  252,  223,
 /*  3730 */   252,  252,  252,  252,  228,  229,  230,  231,  252,  252,
 /*  3740 */   223,  252,  236,  237,  238,  228,  229,  230,  231,  252,
 /*  3750 */   252,  252,  252,  236,  237,  238,   59,  252,  252,  252,
 /*  3760 */   252,  252,  252,  252,  247,  146,  147,  148,  149,  223,
 /*  3770 */   151,  252,   75,   76,  228,  229,  230,  231,  252,  160,
 /*  3780 */   161,  252,  236,  237,  238,  252,  167,  252,  169,  252,
 /*  3790 */   252,  252,  252,   96,  252,   98,  252,  252,  179,  180,
 /*  3800 */   181,  182,  252,  252,  185,  252,  252,  252,  189,  252,
 /*  3810 */   252,  192,  252,  252,  252,  196,  197,  252,  199,  252,
 /*  3820 */   252,  202,  252,  252,  127,  128,  129,  130,  131,  132,
 /*  3830 */   133,  252,  135,  252,  252,  138,  252,  252,  252,  252,
 /*  3840 */   252,  252,  223,  252,  252,  252,  252,  228,  229,  230,
 /*  3850 */   231,  252,  252,   59,  252,  236,  237,  238,  252,  145,
 /*  3860 */   146,  147,  148,  149,  252,  151,  247,  252,  252,   75,
 /*  3870 */    76,  252,  252,  252,  160,  161,  252,  252,  252,  252,
 /*  3880 */   252,  167,  252,  169,  252,  252,  252,  252,  252,  252,
 /*  3890 */    96,  252,   98,  179,  252,  181,  182,  252,  252,  185,
 /*  3900 */   252,  252,  252,  189,  252,  252,  192,  252,  252,  252,
 /*  3910 */   196,  197,  252,  199,  252,  252,  202,  252,  252,  252,
 /*  3920 */   252,  127,  128,  129,  130,  131,  132,  133,  252,  135,
 /*  3930 */   161,  252,  252,  139,  252,  252,  252,  223,  252,  252,
 /*  3940 */   252,  252,  228,  229,  230,  231,  161,  252,  179,  252,
 /*  3950 */   236,  237,  238,    7,    8,    9,  252,  252,  252,  252,
 /*  3960 */   252,  247,  252,  252,  179,  252,  252,  252,  252,   23,
 /*  3970 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  3980 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  3990 */    44,   45,  223,   47,  252,  252,  252,  228,  229,  230,
 /*  4000 */   231,  252,  252,  252,  252,  236,  237,  238,  223,  252,
 /*  4010 */   241,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  4020 */    74,  236,  237,  238,  252,  252,  252,  252,    7,    8,
 /*  4030 */     9,  246,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4040 */   252,  252,  252,  252,   23,  252,   25,   26,   27,   28,
 /*  4050 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4060 */    39,   40,   41,   42,   43,   44,   45,  252,   47,  252,
 /*  4070 */     7,    8,    9,  252,  252,  252,  252,  252,  252,  252,
 /*  4080 */   252,  252,  252,  252,  252,  252,   23,  252,   25,   26,
 /*  4090 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  4100 */    37,   38,   39,   40,   41,   42,   43,   44,   45,  252,
 /*  4110 */    47,  252,  252,  252,  252,  252,  252,   59,  252,  252,
 /*  4120 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4130 */   252,  252,  252,   75,   76,  161,  115,   74,  252,  252,
 /*  4140 */   252,  252,  252,  252,    7,    8,    9,  252,  252,  252,
 /*  4150 */   176,  252,  252,  179,   96,  252,   98,  252,  252,  252,
 /*  4160 */    23,  252,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4170 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  4180 */    43,   44,   45,  252,   47,  127,  128,  129,  130,  131,
 /*  4190 */   132,  133,  252,  135,  252,  252,  252,  223,  252,  141,
 /*  4200 */   252,  252,  228,  229,  230,  231,  252,  252,  252,  161,
 /*  4210 */   236,  237,  238,   76,  252,  252,  252,  252,  252,  252,
 /*  4220 */   252,    7,    8,    9,  176,  252,  252,  179,  252,  252,
 /*  4230 */   252,  252,  252,  252,  252,  252,  252,   23,  252,   25,
 /*  4240 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  4250 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  4260 */   252,   47,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4270 */   252,  223,  252,  252,  252,  252,  228,  229,  230,  231,
 /*  4280 */   252,  252,  252,  252,  236,  237,  238,  252,   74,  252,
 /*  4290 */   252,  252,  252,  252,  252,  252,    7,    8,    9,  252,
 /*  4300 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4310 */   252,  252,   23,  252,   25,   26,   27,   28,   29,   30,
 /*  4320 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  4330 */    41,   42,   43,   44,   45,  252,   47,  252,  252,  252,
 /*  4340 */   252,  252,  252,  252,  252,  252,  252,  161,  252,  252,
 /*  4350 */   252,  161,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4360 */   252,  252,   73,  252,  252,  179,  176,  161,  252,  179,
 /*  4370 */     7,    8,    9,  252,  252,  252,  252,  252,  192,  252,
 /*  4380 */   252,  252,  176,  252,  252,  179,   23,  252,   25,   26,
 /*  4390 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  4400 */    37,   38,   39,   40,   41,   42,   43,   44,   45,  223,
 /*  4410 */    47,  252,  252,  223,  228,  229,  230,  231,  228,  229,
 /*  4420 */   230,  231,  236,  237,  238,  252,  236,  237,  238,  223,
 /*  4430 */   252,  252,  252,  252,  228,  229,  230,  231,  252,   76,
 /*  4440 */   252,  252,  236,  237,  238,  252,  252,    7,    8,    9,
 /*  4450 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4460 */   252,  252,  252,   23,  252,   25,   26,   27,   28,   29,
 /*  4470 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4480 */    40,   41,   42,   43,   44,   45,  252,   47,    7,    8,
 /*  4490 */     9,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4500 */   252,  252,  252,  252,   23,  252,   25,   26,   27,   28,
 /*  4510 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4520 */    39,   40,   41,   42,   43,   44,   45,  252,   47,  252,
 /*  4530 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4540 */   161,  252,  252,  252,  161,  252,  252,  252,  252,  252,
 /*  4550 */   252,  252,  252,  252,  252,  115,  252,   76,  179,  176,
 /*  4560 */   252,  252,  179,    7,    8,    9,  252,  252,  252,  252,
 /*  4570 */   252,  252,  252,  252,  252,  196,  252,  252,  252,   23,
 /*  4580 */   252,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4590 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4600 */    44,   45,  223,   47,  252,  252,  223,  228,  229,  230,
 /*  4610 */   231,  228,  229,  230,  231,  236,  237,  238,  252,  236,
 /*  4620 */   237,  238,  252,  252,  252,  161,  252,  252,  252,   73,
 /*  4630 */   252,  252,  252,  252,  252,  252,  252,    7,    8,    9,
 /*  4640 */   252,  252,  252,  179,  252,  252,  252,  252,  252,  252,
 /*  4650 */   252,  252,  252,   23,  252,   25,   26,   27,   28,   29,
 /*  4660 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4670 */    40,   41,   42,   43,   44,   45,  252,   47,  252,  252,
 /*  4680 */   252,  252,  252,  252,  252,  252,  222,  223,  252,  252,
 /*  4690 */   252,  252,  228,  229,  230,  231,  252,  252,  252,  252,
 /*  4700 */   236,  237,  238,  252,  252,  252,   76,  252,  252,  252,
 /*  4710 */   252,  252,  252,  252,    7,    8,    9,  252,  252,  252,
 /*  4720 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4730 */    23,  252,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4740 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  4750 */    43,   44,   45,  252,   47,  252,  252,  252,  252,  252,
 /*  4760 */   252,  252,  252,  252,  252,  161,  252,  252,  252,  161,
 /*  4770 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4780 */    73,  161,  252,  179,  176,  252,  252,  179,    7,    8,
 /*  4790 */     9,  252,  252,  252,  252,  252,  176,  252,  252,  179,
 /*  4800 */   196,  252,  252,  252,   23,  252,   25,   26,   27,   28,
 /*  4810 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4820 */    39,   40,   41,   42,   43,   44,   45,  223,   47,  252,
 /*  4830 */   252,  223,  228,  229,  230,  231,  228,  229,  230,  231,
 /*  4840 */   236,  237,  238,  223,  236,  237,  238,  252,  228,  229,
 /*  4850 */   230,  231,  252,  252,   73,  252,  236,  237,  238,  252,
 /*  4860 */   252,  252,    7,    8,    9,  252,  252,  252,  252,  252,
 /*  4870 */   252,  252,  252,  252,  252,  252,  252,  252,   23,   24,
 /*  4880 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  4890 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  4900 */    45,  252,   47,    7,    8,    9,  252,  252,  252,  252,
 /*  4910 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   23,
 /*  4920 */   252,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4930 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4940 */    44,   45,  252,   47,  252,  252,  252,  252,  252,  252,
 /*  4950 */   252,  252,  252,  252,  252,  252,  252,  252,  161,  252,
 /*  4960 */   252,  252,  161,  252,  252,  252,  252,  252,  252,   73,
 /*  4970 */   252,  252,  252,  252,  252,  252,  179,    7,    8,    9,
 /*  4980 */   179,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  4990 */   252,  252,  252,   23,  252,   25,   26,   27,   28,   29,
 /*  5000 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  5010 */    40,   41,   42,   43,   44,   45,  252,   47,  252,  252,
 /*  5020 */   223,  252,  252,  252,  223,  228,  229,  230,  231,  228,
 /*  5030 */   229,  230,  231,  236,  237,  238,  252,  236,  237,  238,
 /*  5040 */   161,  252,  252,  252,   74,  252,  252,  252,  252,  252,
 /*  5050 */   252,  252,    7,    8,    9,  252,  252,  252,  179,  252,
 /*  5060 */   252,  252,  252,  252,  252,  252,  252,  252,   23,  252,
 /*  5070 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5080 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5090 */    45,  252,   47,  252,  252,  252,  252,  252,  252,  252,
 /*  5100 */   252,  252,  223,  161,  252,  252,  252,  228,  229,  230,
 /*  5110 */   231,  252,  252,  252,  252,  236,  237,  238,   73,  252,
 /*  5120 */   252,  179,  252,  252,  252,  252,    7,    8,    9,  252,
 /*  5130 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5140 */   252,  252,   23,  252,   25,   26,   27,   28,   29,   30,
 /*  5150 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  5160 */    41,   42,   43,   44,   45,  223,   47,  252,  252,  252,
 /*  5170 */   228,  229,  230,  231,  252,  252,  252,  252,  236,  237,
 /*  5180 */   238,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5190 */   252,  252,  252,  252,  252,   76,  252,  252,  252,  252,
 /*  5200 */   252,  252,  252,    7,    8,    9,  252,  252,  252,  252,
 /*  5210 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   23,
 /*  5220 */   252,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  5230 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  5240 */    44,   45,  252,   47,  252,  252,  252,  252,  252,  252,
 /*  5250 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5260 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5270 */   252,  252,   76,  252,  252,  252,  252,  252,  252,  252,
 /*  5280 */     7,    8,    9,  252,  252,  252,  252,  252,  252,  252,
 /*  5290 */   252,  252,  252,  252,  252,  252,   23,  252,   25,   26,
 /*  5300 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  5310 */    37,   38,   39,   40,   41,   42,   43,   44,   45,  252,
 /*  5320 */    47,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5330 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5340 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   76,
 /*  5350 */   252,  252,  252,  252,  252,  252,  252,    7,    8,    9,
 /*  5360 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5370 */   252,  252,  252,   23,  252,   25,   26,   27,   28,   29,
 /*  5380 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  5390 */    40,   41,   42,   43,   44,   45,  252,   47,  252,  252,
 /*  5400 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5410 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5420 */   252,  252,  252,   73,  252,  252,  252,  252,  252,  252,
 /*  5430 */   252,    7,    8,    9,  252,  252,  252,  252,  252,  252,
 /*  5440 */   252,  252,  252,  252,  252,  252,  252,   23,  252,   25,
 /*  5450 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  5460 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  5470 */   252,   47,    7,    8,    9,  252,  252,  252,  252,  252,
 /*  5480 */   252,  252,  252,  252,  252,  252,  252,  252,   23,  252,
 /*  5490 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5500 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5510 */    45,  252,   47,  252,  252,  252,  252,  252,  252,  252,
 /*  5520 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5530 */   252,  252,  252,  252,  252,  252,  252,  252,  252,   74,
 /*  5540 */   252,  252,  252,  252,  252,  252,  252,    7,    8,    9,
 /*  5550 */   252,  252,  128,  252,  252,  252,  252,  252,  252,  252,
 /*  5560 */   252,  252,  252,   23,  252,   25,   26,   27,   28,   29,
 /*  5570 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  5580 */    40,   41,   42,   43,   44,   45,  252,   47,  252,  252,
 /*  5590 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5600 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5610 */   252,  252,  252,  252,  252,  252,   76,  252,  252,  252,
 /*  5620 */   252,  252,  252,  252,    7,    8,    9,  252,  252,  252,
 /*  5630 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5640 */    23,  252,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  5650 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  5660 */    43,   44,   45,  252,   47,  252,  252,  252,  252,  252,
 /*  5670 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5680 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5690 */    73,  252,  252,  252,  252,  252,  252,  252,    7,    8,
 /*  5700 */     9,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5710 */   252,  252,  252,  252,   23,  252,   25,   26,   27,   28,
 /*  5720 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  5730 */    39,   40,   41,   42,   43,   44,   45,  252,   47,  252,
 /*  5740 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5750 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5760 */   252,  252,  252,  252,   73,  252,  252,  252,  252,  252,
 /*  5770 */   252,  252,    7,    8,    9,  252,  252,  252,  252,  252,
 /*  5780 */   252,  252,  252,  252,  252,  252,  252,  252,   23,  252,
 /*  5790 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5800 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5810 */    45,  252,   47,  252,  252,  252,  252,  252,  252,  252,
 /*  5820 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5830 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5840 */   252,   76,  252,  252,  252,  252,  252,  252,  252,    7,
 /*  5850 */     8,    9,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5860 */   252,  252,  252,  252,  252,   23,  252,   25,   26,   27,
 /*  5870 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  5880 */    38,   39,   40,   41,   42,   43,   44,   45,  252,   47,
 /*  5890 */     8,    9,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  5900 */   252,  252,  252,  252,  252,   23,  252,   25,   26,   27,
 /*  5910 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  5920 */    38,   39,   40,   41,   42,   43,   44,   45,  252,   47,
 /*  5930 */   252,  252,  252,  252,  252,  146,  252,  252,  149,  252,
 /*  5940 */   151,  252,  252,  252,  252,  156,  252,  252,  252,  160,
 /*  5950 */   161,  252,  252,  252,  252,  252,  167,  146,  169,  252,
 /*  5960 */   149,  252,  151,  252,  252,  252,  252,  252,  179,  252,
 /*  5970 */   252,  160,  161,  252,  252,  252,  252,  252,  167,  252,
 /*  5980 */   169,  192,  171,  252,  252,  196,  197,  252,  199,  252,
 /*  5990 */   179,  202,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6000 */   252,  252,  252,  192,  252,  252,  252,  196,  197,  252,
 /*  6010 */   199,  252,  223,  202,  252,  252,  252,  228,  229,  230,
 /*  6020 */   231,  252,  252,  252,  252,  236,  237,  238,  252,  252,
 /*  6030 */   146,  252,  252,  149,  223,  151,  247,  252,  252,  228,
 /*  6040 */   229,  230,  231,  252,  160,  161,  252,  236,  237,  238,
 /*  6050 */   252,  167,  168,  169,  252,  252,  252,  252,  247,  252,
 /*  6060 */   252,  252,  252,  179,  252,  252,  252,  252,  252,  252,
 /*  6070 */   252,  252,  252,  252,  252,  252,  192,  252,  252,  252,
 /*  6080 */   196,  197,  252,  199,  252,  252,  202,   59,  252,  252,
 /*  6090 */   252,  252,  252,  252,  252,  252,  146,  252,  252,  149,
 /*  6100 */   252,  151,  252,   75,   76,  252,  252,  223,  158,  252,
 /*  6110 */   160,  161,  228,  229,  230,  231,  252,  167,  252,  169,
 /*  6120 */   236,  237,  238,  252,   96,  252,   98,  252,  252,  179,
 /*  6130 */   252,  247,  252,  252,  106,  252,  252,  252,  252,  252,
 /*  6140 */   252,  252,  192,  252,  252,  252,  196,  197,  252,  199,
 /*  6150 */   252,  252,  202,  252,  252,  127,  128,  129,  130,  131,
 /*  6160 */   132,  133,  252,  135,  252,  252,  252,  252,  252,  252,
 /*  6170 */   252,  252,  252,  223,  252,  252,  252,  252,  228,  229,
 /*  6180 */   230,  231,  252,  252,  252,  252,  236,  237,  238,  146,
 /*  6190 */   252,  252,  149,  252,  151,  252,  252,  247,  252,  252,
 /*  6200 */   252,  252,  252,  160,  161,  252,  252,  252,  252,  252,
 /*  6210 */   167,  168,  169,  252,  252,  252,  252,  252,  252,  252,
 /*  6220 */   252,  252,  179,  252,  252,  252,  252,  252,  252,  252,
 /*  6230 */   252,  252,  252,  252,  252,  192,  252,  252,  252,  196,
 /*  6240 */   197,  252,  199,  252,  252,  202,  252,  252,  252,  252,
 /*  6250 */   252,  252,  252,  252,  146,  252,  252,  149,  252,  151,
 /*  6260 */   252,  252,  252,  252,  252,  252,  223,  252,  160,  161,
 /*  6270 */   252,  228,  229,  230,  231,  167,  252,  169,  252,  236,
 /*  6280 */   237,  238,  252,  252,  252,  252,  252,  179,  252,  252,
 /*  6290 */   247,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6300 */   192,  252,  252,  252,  196,  197,  252,  199,  252,  252,
 /*  6310 */   202,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6320 */   146,  252,  252,  149,  252,  151,  252,  252,  252,  252,
 /*  6330 */   252,  223,  252,  252,  160,  161,  228,  229,  230,  231,
 /*  6340 */   252,  167,  252,  169,  236,  237,  238,  252,  252,  252,
 /*  6350 */   252,  252,  252,  179,  252,  247,  252,  252,  252,  252,
 /*  6360 */   252,  252,  252,  252,  252,  252,  192,  252,  252,  252,
 /*  6370 */   196,  197,  252,  199,  252,  252,  202,  252,  252,  252,
 /*  6380 */   252,  252,  252,  252,  252,  252,  146,  252,  252,  149,
 /*  6390 */   252,  151,  252,  252,  252,  252,  252,  223,  252,  252,
 /*  6400 */   160,  161,  228,  229,  230,  231,  252,  167,  252,  169,
 /*  6410 */   236,  237,  238,  252,  252,  252,  252,  252,  252,  179,
 /*  6420 */   252,  247,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6430 */   252,  252,  192,  252,  252,  252,  196,  197,  252,  199,
 /*  6440 */   252,  252,  202,  252,  252,  252,  252,  252,  252,  252,
 /*  6450 */   252,  146,  252,  252,  149,  252,  151,  252,  252,  252,
 /*  6460 */   252,  252,  252,  223,  252,  160,  161,  252,  228,  229,
 /*  6470 */   230,  231,  167,  252,  169,  252,  236,  237,  238,  252,
 /*  6480 */   252,  252,  252,  252,  179,  252,  252,  247,  252,  252,
 /*  6490 */   252,  252,  252,  252,  252,  252,  252,  192,  252,  252,
 /*  6500 */   252,  196,  197,  252,  199,  252,  252,  202,  252,  252,
 /*  6510 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6520 */   252,  252,  151,  252,  252,  252,  252,  252,  223,  252,
 /*  6530 */   252,  160,  161,  228,  229,  230,  231,  252,  252,  252,
 /*  6540 */   252,  236,  237,  238,  252,  252,  252,  252,  252,  252,
 /*  6550 */   179,  252,  247,  252,  252,  252,  252,  252,  252,  252,
 /*  6560 */   252,  252,  252,  192,  252,  252,  252,  196,  197,  252,
 /*  6570 */   199,  252,  252,  202,  252,  252,  252,  252,  252,  252,
 /*  6580 */   252,  252,  211,  212,  252,  252,  252,  252,  151,  252,
 /*  6590 */   252,  252,  252,  252,  223,  252,  252,  160,  161,  228,
 /*  6600 */   229,  230,  231,  252,  252,  252,  252,  236,  237,  238,
 /*  6610 */   252,  252,  252,  252,  252,  252,  179,  252,  247,  252,
 /*  6620 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  192,
 /*  6630 */   252,  252,  252,  196,  197,  252,  199,  200,  252,  202,
 /*  6640 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  151,
 /*  6650 */   252,  252,  252,  252,  252,  157,  252,  252,  160,  161,
 /*  6660 */   223,  252,  252,  252,  252,  228,  229,  230,  231,  252,
 /*  6670 */   252,  252,  252,  236,  237,  238,  252,  179,  252,  242,
 /*  6680 */   252,  252,  252,  252,  247,  252,  252,  252,  252,  252,
 /*  6690 */   192,  252,  252,  252,  196,  197,  252,  199,  252,  252,
 /*  6700 */   202,  252,  151,  252,  252,  252,  252,  252,  252,  252,
 /*  6710 */   252,  160,  161,  252,  252,  252,  252,  252,  252,  252,
 /*  6720 */   252,  223,  252,  252,  252,  252,  228,  229,  230,  231,
 /*  6730 */   179,  252,  252,  252,  236,  237,  238,  252,  252,  252,
 /*  6740 */   252,  252,  252,  192,  252,  247,  252,  196,  197,  251,
 /*  6750 */   199,  252,  252,  202,  252,  252,  252,  252,  252,  252,
 /*  6760 */   252,  252,  211,  212,  252,  252,  252,  252,  151,  252,
 /*  6770 */   252,  252,  252,  252,  223,  252,  252,  160,  161,  228,
 /*  6780 */   229,  230,  231,  252,  252,  252,  252,  236,  237,  238,
 /*  6790 */   252,  252,  252,  252,  252,  252,  179,  252,  247,  252,
 /*  6800 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  192,
 /*  6810 */   252,  151,  252,  196,  197,  252,  199,  157,  252,  202,
 /*  6820 */   160,  161,  252,  252,  252,  252,  252,  252,  211,  212,
 /*  6830 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  179,
 /*  6840 */   223,  252,  252,  252,  252,  228,  229,  230,  231,  252,
 /*  6850 */   252,  252,  192,  236,  237,  238,  196,  197,  252,  199,
 /*  6860 */   252,  252,  202,  252,  247,  252,  252,  252,  252,  252,
 /*  6870 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6880 */   252,  252,  252,  223,  252,  252,  252,  252,  228,  229,
 /*  6890 */   230,  231,  252,  252,  252,  151,  236,  237,  238,  252,
 /*  6900 */   252,  252,  252,  252,  160,  161,  252,  247,  252,  252,
 /*  6910 */   252,  251,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  6920 */   151,  252,  252,  179,  252,  252,  157,  252,  252,  160,
 /*  6930 */   161,  252,  252,  252,  252,  252,  192,  252,  252,  252,
 /*  6940 */   196,  197,  252,  199,  252,  252,  202,  252,  179,  252,
 /*  6950 */   252,  252,  252,  252,  252,  211,  212,  252,  252,  252,
 /*  6960 */   252,  192,  252,  252,  252,  196,  197,  223,  199,  252,
 /*  6970 */   252,  202,  228,  229,  230,  231,  252,  252,  252,  252,
 /*  6980 */   236,  237,  238,  252,  252,  252,  252,  252,  252,  252,
 /*  6990 */   252,  247,  223,  252,  252,  252,  252,  228,  229,  230,
 /*  7000 */   231,  252,  252,  252,  151,  236,  237,  238,  252,  252,
 /*  7010 */   252,  252,  252,  160,  161,  252,  247,  252,  252,  252,
 /*  7020 */   251,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7030 */   252,  252,  179,  252,  252,  252,  252,  252,  252,  252,
 /*  7040 */   252,  252,  252,  252,  252,  192,  252,  151,  252,  196,
 /*  7050 */   197,  252,  199,  252,  252,  202,  160,  161,  252,  252,
 /*  7060 */   252,  252,  252,  252,  211,  212,  252,  252,  252,  252,
 /*  7070 */   252,  252,  252,  252,  252,  179,  223,  252,  252,  252,
 /*  7080 */   252,  228,  229,  230,  231,  252,  252,  252,  192,  236,
 /*  7090 */   237,  238,  196,  197,  252,  199,  252,  252,  202,  252,
 /*  7100 */   247,  252,  252,  252,  252,  252,  252,  211,  212,  252,
 /*  7110 */   252,  252,  252,  151,  252,  252,  252,  252,  252,  223,
 /*  7120 */   252,  252,  160,  161,  228,  229,  230,  231,  252,  252,
 /*  7130 */   252,  252,  236,  237,  238,  252,  252,  252,  252,  252,
 /*  7140 */   252,  179,  252,  247,  252,  252,  252,  252,  252,  252,
 /*  7150 */   252,  252,  252,  252,  192,  252,  151,  252,  196,  197,
 /*  7160 */   252,  199,  252,  252,  202,  160,  161,  252,  252,  252,
 /*  7170 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7180 */   252,  252,  252,  252,  179,  223,  252,  252,  252,  252,
 /*  7190 */   228,  229,  230,  231,  252,  252,  234,  192,  236,  237,
 /*  7200 */   238,  196,  197,  252,  199,  252,  252,  202,  252,  247,
 /*  7210 */   252,  252,  252,  252,  252,  252,  151,  252,  252,  252,
 /*  7220 */   252,  252,  252,  252,  252,  160,  161,  252,  223,  252,
 /*  7230 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  234,
 /*  7240 */   252,  236,  237,  238,  179,  252,  252,  252,  252,  252,
 /*  7250 */   252,  252,  247,  252,  252,  252,  252,  192,  252,  151,
 /*  7260 */   252,  196,  197,  252,  199,  252,  252,  202,  160,  161,
 /*  7270 */   252,  252,  164,  252,  252,  252,  252,  252,  252,  252,
 /*  7280 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7290 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  234,
 /*  7300 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7310 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7320 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7330 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7340 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7350 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7360 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7370 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7380 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7390 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7400 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7410 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7420 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7430 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7440 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7450 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7460 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7470 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7480 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7490 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7500 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7510 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7520 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7530 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7540 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7550 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7560 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7570 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7580 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7590 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7600 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7610 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7620 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7630 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7640 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7650 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7660 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7670 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7680 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7690 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7700 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7710 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7720 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7730 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7740 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7750 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7760 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7770 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7780 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7790 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7800 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7810 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7820 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7830 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7840 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7850 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7860 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7870 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7880 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7890 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7900 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7910 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  7920 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  7930 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  7940 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  7950 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  7960 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  7970 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  7980 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  7990 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8000 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8010 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8020 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8030 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8040 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8050 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8060 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8070 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8080 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8090 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8100 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8110 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8120 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8130 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8140 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8150 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8160 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8170 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8180 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8190 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8200 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8210 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8220 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8230 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8240 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8250 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8260 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8270 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8280 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8290 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8300 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8310 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8320 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8330 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8340 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8350 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8360 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8370 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8380 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8390 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8400 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8410 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8420 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8430 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8440 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8450 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8460 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8470 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8480 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8490 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8500 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8510 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8520 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8530 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8540 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8550 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8560 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8570 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8580 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8590 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8600 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8610 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8620 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8630 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8640 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8650 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8660 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8670 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8680 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8690 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8700 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8710 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8720 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8730 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8740 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8750 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8760 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8770 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8780 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8790 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8800 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8810 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8820 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8830 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8840 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8850 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8860 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8870 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8880 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8890 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8900 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  8910 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  8920 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  8930 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  8940 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8950 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  8960 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  8970 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  8980 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  8990 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9000 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9010 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9020 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9030 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9040 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9050 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9060 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9070 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9080 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9090 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9100 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9110 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9120 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9130 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9140 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9150 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9160 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9170 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9180 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9190 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9200 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9210 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9220 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9230 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9240 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9250 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9260 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9270 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9280 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9290 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9300 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9310 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9320 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9330 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9340 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9350 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9360 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9370 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9380 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9390 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9400 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9410 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9420 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9430 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9440 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9450 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9460 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9470 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9480 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9490 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9500 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9510 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9520 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9530 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9540 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9550 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9560 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9570 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9580 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9590 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9600 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9610 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9620 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9630 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9640 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9650 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9660 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9670 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9680 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9690 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9700 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9710 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9720 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9730 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9740 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9750 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9760 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9770 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9780 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9790 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9800 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9810 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9820 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9830 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9840 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9850 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9860 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9870 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9880 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9890 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9900 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /*  9910 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /*  9920 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /*  9930 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9940 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /*  9950 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /*  9960 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /*  9970 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /*  9980 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /*  9990 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10000 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10010 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10020 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10030 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10040 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10050 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10060 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10070 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10080 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10090 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10100 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10110 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10120 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10130 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10140 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10150 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10160 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10170 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10180 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10190 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10200 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10210 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10220 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10230 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10240 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10250 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10260 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10270 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10280 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10290 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10300 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10310 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10320 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10330 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10340 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10350 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10360 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10370 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10380 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10390 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10400 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10410 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10420 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10430 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10440 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10450 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10460 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10470 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10480 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10490 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10500 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10510 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10520 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10530 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10540 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10550 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10560 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10570 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10580 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10590 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10600 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10610 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10620 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10630 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10640 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10650 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10660 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10670 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10680 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10690 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10700 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10710 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10720 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10730 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10740 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10750 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10760 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10770 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10780 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10790 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10800 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10810 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10820 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10830 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10840 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10850 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10860 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10870 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10880 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10890 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10900 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 10910 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 10920 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10930 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 10940 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 10950 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 10960 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 10970 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 10980 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 10990 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 11000 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 11010 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11020 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 11030 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 11040 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 11050 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11060 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 11070 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 11080 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 11090 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 11100 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11110 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 11120 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 11130 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 11140 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11150 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 11160 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 11170 */   192,  236,  237,  238,  196,  197,  151,  199,  252,  252,
 /* 11180 */   202,  252,  247,  252,  252,  160,  161,  252,  252,  252,
 /* 11190 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11200 */   252,  223,  252,  252,  179,  252,  228,  229,  230,  231,
 /* 11210 */   252,  252,  252,  252,  236,  237,  238,  192,  252,  151,
 /* 11220 */   252,  196,  197,  252,  199,  247,  252,  202,  160,  161,
 /* 11230 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11240 */   252,  252,  252,  252,  252,  252,  252,  179,  223,  252,
 /* 11250 */   252,  252,  252,  228,  229,  230,  231,  252,  252,  252,
 /* 11260 */   192,  236,  237,  238,  196,  197,  252,  199,  252,  252,
 /* 11270 */   202,  252,  247,  252,  252,  252,  252,  252,  252,  252,
 /* 11280 */   252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
 /* 11290 */   252,  223,  252,  252,  252,  252,  228,  229,  230,  231,
 /* 11300 */   252,  252,  252,  252,  236,  237,  238,  252,  252,  252,
 /* 11310 */   252,  252,  252,  252,  252,  247,
);
    const YY_SHIFT_USE_DFLT = -116;
    const YY_SHIFT_MAX = 504;
    static public $yy_shift_ofst = array(
 /*     0 */  -116, 1172, 1057,  942,  702,  827,   -1,  232,  347,  587,
 /*    10 */   472,  114, 1172, 1172, 1172, 1172, 1287, 1537, 1662, 1912,
 /*    20 */  1662, 1412, 1787, 2027, 2027, 2027, 2142, 2142, 2142, 2142,
 /*    30 */  2142, 2257, 2142, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    40 */  3177, 3062, 3292, 2947, 2487, 2372, 2602, 2717, 2832, 3407,
 /*    50 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    60 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    70 */  3407, 3407, 3407, 3407, 3407, 3522, 3407, 3407, 3407, 3407,
 /*    80 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    90 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   100 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   110 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   120 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,  236,  236,
 /*   130 */   612,  612,  766,  612,  526,  766,  766,  766,  766,  766,
 /*   140 */   766,  766,  766,  766,  766,  766,  766,  527,  766,  766,
 /*   150 */   766,  831,  831,  831,  641,  641,  641,  641,  178,  852,
 /*   160 */   201,  -32, 3143,  536,  593,  994, 3143, 3143, 3143, 3143,
 /*   170 */  3143, 3143, 3143, 3143, 3143, 3143, 3143, 3143, 3143, 3143,
 /*   180 */  3143, 3143, 3143,  344,  344,  522,  522,  282,  522,  940,
 /*   190 */   994,  979,  979, 3946, 3697, 6028, 4058, 3794,   60,    3,
 /*   200 */   721,  531,  478,  190,   46,  311,  170,  282, 1133, 1149,
 /*   210 */  1144, 1139, 1170, 1070, 1117,  997, 1213, 1135,  979,  979,
 /*   220 */  1019, 1070,  972,  994,  965,  972,  997,  979,  959, 1048,
 /*   230 */   959, 1052, -116, -116, -116, -116, -116, -116, -116, -116,
 /*   240 */  -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
 /*   250 */  -116, -116, -116, -116, -116, -116, -116, -116, 5119, 4970,
 /*   260 */  4896, 4781, 4707, 5196, 5273, 5617, 5540, 5465, 5350, 5424,
 /*   270 */  5691, 4021, 4063, 4630, 5765, 4481, 4556, 4363, 4137, 4855,
 /*   280 */  4289, 4214, 4440, 5045, 5842, 5842, 5842, 5842, 5842, 5842,
 /*   290 */  5842, 5842, 5842, 5842, 5842, 5842, 5882, 2192,  -15,  -15,
 /*   300 */   -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   310 */   -15,  -15,  -15, 2307,  462,  816, 2419, 2534, 2649, 2649,
 /*   320 */  2649, 2649, 2649, 2790, 2905, 3595, 3020, 1426,  106,  106,
 /*   330 */   106,  106,  216,  216,  555,  555,  555,  555,  555,  663,
 /*   340 */   -79,  672,  179,  108, -115,  116,   40,  202,  995,  157,
 /*   350 */   245,  916,  542,  696,  795,  486,  790,  760,  335,  561,
 /*   360 */   608,  349,  400,  157,  157,  335,  290,  157,  743,  968,
 /*   370 */   970,  890,  840,  951,  674,   94,  229,  181,  -58,   62,
 /*   380 */    37,  317,  634, 1114,  295,  343,  869,  938,  746,  823,
 /*   390 */   797,  192,  457,  373,  723,  279,  457,  961,  824,  761,
 /*   400 */   745,  912,  861,  900,  120,  173,    4,  668,  709,  436,
 /*   410 */   518, 1300, 1251, 1248, 1246, 1247, 1255, 1340, 1261, 1258,
 /*   420 */  1234, 1320, 1244, 1228, 1202, 1227, 1220, 1225, 1243, 1257,
 /*   430 */  1240, 1209, 1337, 1348, 1284, 1315, 1304, 1280, 1336, 1195,
 /*   440 */  1121, 1115, 1181, 1206, 1062, 1029, 1323, 1291, 1352, 1330,
 /*   450 */  1305, 1231, 1221,  129, 1190, 1253, 1276,  902, 1203, 1252,
 /*   460 */   406,  529,  129,  722,  943,  722,  749,  933,  577,  614,
 /*   470 */   799,  930,  541,  475,  609,  101,  -45,  314,  905,  895,
 /*   480 */   963,  932,  849,  753,  698,  817,  129,  688,  894,  129,
 /*   490 */   439,  894,  494,  389,  596,  187,  187,  902,  828,  703,
 /*   500 */   792,  767,  802,  829,  705,
);
    const YY_REDUCE_USE_DFLT = -167;
    const YY_REDUCE_MAX = 257;
    static public $yy_reduce_ofst = array(
 /*     0 */   -82, 3517, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
 /*    10 */  3619, 3619, 3619, 3619, 3619, 3619, 3714, 5950, 6043, 5811,
 /*    20 */  5884, 5789, 6174, 6305, 6240, 6108, 6896, 6853, 6744, 6617,
 /*    30 */  6551, 6437, 6371, 6498, 6769, 6660, 7108, 6962, 7005, 7065,
 /*    40 */  8728, 8865, 10978, 10845, 10755, 10618, 9448, 9538, 10665, 9675,
 /*    50 */  9358, 9045, 8955, 9135, 9225, 9765, 10395, 10305, 10485, 10528,
 /*    60 */  10215, 9898, 9988, 10168, 10078, 10888, 8685, 7288, 7558, 7648,
 /*    70 */  7828, 7875, 7425, 7335, 7245, 8595, 8505, 8638, 8818, 8098,
 /*    80 */  8008, 8145, 8368, 8278, 8415, 8235, 8325, 8188, 7965, 8055,
 /*    90 */  8775, 7918, 8458, 8548, 7695, 7155, 8908, 7468, 7515, 7785,
 /*   100 */  7605, 7738, 7198, 11025, 7378, 10125, 10035, 9855, 9945, 10258,
 /*   110 */  10575, 10438, 10348, 9808, 9178, 9268, 9088, 8998, 9315, 9628,
 /*   120 */  9718, 9585, 9405, 9495, 10798, 10935, 11068, 10708, 3546, 3506,
 /*   130 */  2912, 3142, 3254, 3769, 4186, 3785, 4048, 4190, 4379, 3974,
 /*   140 */  3258, 4206, 4608, 4383, 4464, 4604, 4620, 4879, 4797, 4801,
 /*   150 */  4942, 1459, 1334, 1583,  490,  391,  240,  151,   11,   11,
 /*   160 */   144,  144,  180,  -74, -166,    5,  171,  755,  868,  782,
 /*   170 */   885,  881,  899,  985,  981,  889,  775,  768,  667,  620,
 /*   180 */   402,  312,  751,  326,  257,  388,  182,  551,  503,  339,
 /*   190 */   175,  570,  340, 1006,  967,  967,  967,  967,  989,  958,
 /*   200 */  1042, 1049, 1045,  996,  986,  999, 1043,  993, 1008, 1026,
 /*   210 */  1085, 1047, 1080, 1053, 1030, 1009,  998, 1041, 1020,  917,
 /*   220 */   888,  936,  921,  913,  887,  870,  847,  896,  925,  982,
 /*   230 */  1003,  935,  991,  862,  946,  975,  971,  980, 1002,  950,
 /*   240 */  1137, 1259, 1232, 1180, 1204, 1254, 1256, 1207, 1210, 1219,
 /*   250 */  1154, 1279, 1268, 1260, 1198, 1119, 1097, 1113,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(),
        /* 1 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 2 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 3 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 4 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 124, 134, 136, 137, 138, 139, 140, ),
        /* 5 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 6 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 7 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 8 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 124, 134, 136, 137, 138, 139, 140, ),
        /* 9 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 10 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 134, 136, 137, 138, 139, 140, ),
        /* 11 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 124, 134, 136, 137, 138, 139, 140, ),
        /* 12 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 13 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 14 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 15 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 16 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 17 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 18 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 19 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 20 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 21 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 22 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 23 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 24 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 25 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 26 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 27 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 28 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 29 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 30 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 31 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 32 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 33 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 34 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 35 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 36 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 37 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 38 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 39 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 40 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 41 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 42 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 43 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 44 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 45 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 46 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 73, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 47 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 48 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 49 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 50 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 51 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 52 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 53 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 54 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 55 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 56 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 57 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 58 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 59 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 60 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 61 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 62 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 63 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 64 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 65 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 66 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 67 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 68 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 69 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 70 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 71 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 72 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 73 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 74 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 75 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 76 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 77 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 78 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 79 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 80 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 81 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 82 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 83 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 84 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 85 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 86 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 87 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 88 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 89 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 90 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 91 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 92 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 93 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 94 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 95 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 96 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 97 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 98 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 99 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 100 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 101 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 102 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 103 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 104 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 105 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 106 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 107 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 108 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 109 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 110 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 111 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 112 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 113 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 114 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 115 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 116 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 117 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 118 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 119 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 120 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 121 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 122 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 123 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 124 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 125 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 126 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 127 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 128 */ array(29, 96, 98, 124, ),
        /* 129 */ array(29, 96, 98, 124, ),
        /* 130 */ array(96, 98, 103, 124, ),
        /* 131 */ array(96, 98, 103, 124, ),
        /* 132 */ array(96, 98, 124, ),
        /* 133 */ array(96, 98, 103, 124, ),
        /* 134 */ array(75, 96, 98, 124, ),
        /* 135 */ array(96, 98, 124, ),
        /* 136 */ array(96, 98, 124, ),
        /* 137 */ array(96, 98, 124, ),
        /* 138 */ array(96, 98, 124, ),
        /* 139 */ array(96, 98, 124, ),
        /* 140 */ array(96, 98, 124, ),
        /* 141 */ array(96, 98, 124, ),
        /* 142 */ array(96, 98, 124, ),
        /* 143 */ array(96, 98, 124, ),
        /* 144 */ array(96, 98, 124, ),
        /* 145 */ array(96, 98, 124, ),
        /* 146 */ array(96, 98, 124, ),
        /* 147 */ array(60, 96, 98, 124, ),
        /* 148 */ array(96, 98, 124, ),
        /* 149 */ array(96, 98, 124, ),
        /* 150 */ array(96, 98, 124, ),
        /* 151 */ array(96, 98, 124, ),
        /* 152 */ array(96, 98, 124, ),
        /* 153 */ array(96, 98, 124, ),
        /* 154 */ array(75, 96, 98, 124, ),
        /* 155 */ array(75, 96, 98, 124, ),
        /* 156 */ array(75, 96, 98, 124, ),
        /* 157 */ array(75, 96, 98, 124, ),
        /* 158 */ array(96, 98, 124, ),
        /* 159 */ array(96, 98, 124, ),
        /* 160 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 161 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 162 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 163 */ array(96, 124, ),
        /* 164 */ array(96, 124, ),
        /* 165 */ array(95, ),
        /* 166 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 167 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 168 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 169 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 170 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 171 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 172 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 173 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 174 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 175 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 176 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 177 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 178 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 179 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 180 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 181 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 182 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 183 */ array(73, 98, 105, ),
        /* 184 */ array(73, 98, 105, ),
        /* 185 */ array(96, 124, ),
        /* 186 */ array(96, 124, ),
        /* 187 */ array(96, 124, ),
        /* 188 */ array(96, 124, ),
        /* 189 */ array(96, 124, ),
        /* 190 */ array(95, ),
        /* 191 */ array(98, ),
        /* 192 */ array(98, ),
        /* 193 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 194 */ array(59, 75, 76, 96, 98, 127, 128, 129, 130, 131, 132, 133, 135, 138, ),
        /* 195 */ array(59, 75, 76, 96, 98, 106, 127, 128, 129, 130, 131, 132, 133, 135, ),
        /* 196 */ array(59, 75, 76, 96, 98, 127, 128, 129, 130, 131, 132, 133, 135, 141, ),
        /* 197 */ array(59, 75, 76, 96, 98, 127, 128, 129, 130, 131, 132, 133, 135, 139, ),
        /* 198 */ array(65, 66, 67, 68, 69, 70, 97, ),
        /* 199 */ array(96, 98, 129, ),
        /* 200 */ array(24, 75, ),
        /* 201 */ array(62, 63, ),
        /* 202 */ array(62, 63, ),
        /* 203 */ array(24, 74, ),
        /* 204 */ array(74, 75, ),
        /* 205 */ array(98, 105, ),
        /* 206 */ array(75, 109, ),
        /* 207 */ array(96, 124, ),
        /* 208 */ array(74, ),
        /* 209 */ array(96, ),
        /* 210 */ array(96, ),
        /* 211 */ array(127, ),
        /* 212 */ array(102, ),
        /* 213 */ array(29, ),
        /* 214 */ array(100, ),
        /* 215 */ array(72, ),
        /* 216 */ array(6, ),
        /* 217 */ array(100, ),
        /* 218 */ array(98, ),
        /* 219 */ array(98, ),
        /* 220 */ array(74, ),
        /* 221 */ array(29, ),
        /* 222 */ array(72, ),
        /* 223 */ array(95, ),
        /* 224 */ array(98, ),
        /* 225 */ array(72, ),
        /* 226 */ array(72, ),
        /* 227 */ array(98, ),
        /* 228 */ array(115, ),
        /* 229 */ array(72, ),
        /* 230 */ array(115, ),
        /* 231 */ array(127, ),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 259 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 260 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 261 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 262 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 263 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 264 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 265 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 266 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 267 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 268 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 269 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 128, ),
        /* 270 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 271 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 272 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 273 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 274 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 275 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 276 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 277 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 278 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 279 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 280 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 281 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 282 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 283 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 284 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 285 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 286 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 287 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 288 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 289 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 290 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 291 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 292 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 293 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 294 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 295 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 296 */ array(8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 297 */ array(9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 298 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 299 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 300 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 301 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 302 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 303 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 304 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 305 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 306 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 307 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 308 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 309 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 310 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 311 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 312 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 313 */ array(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 314 */ array(26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 315 */ array(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 316 */ array(28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 317 */ array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 318 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 319 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 320 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 321 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 322 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 323 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 324 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 325 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 94, ),
        /* 326 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 74, ),
        /* 327 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, ),
        /* 328 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 329 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 330 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 331 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 332 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 333 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 334 */ array(43, 44, 45, 47, ),
        /* 335 */ array(43, 44, 45, 47, ),
        /* 336 */ array(43, 44, 45, 47, ),
        /* 337 */ array(43, 44, 45, 47, ),
        /* 338 */ array(43, 44, 45, 47, ),
        /* 339 */ array(59, 72, 75, ),
        /* 340 */ array(120, 121, 122, ),
        /* 341 */ array(59, 72, 75, ),
        /* 342 */ array(76, 121, 122, ),
        /* 343 */ array(76, 121, 122, ),
        /* 344 */ array(120, 121, 122, ),
        /* 345 */ array(6, 74, ),
        /* 346 */ array(6, 74, ),
        /* 347 */ array(6, 73, ),
        /* 348 */ array(6, 73, ),
        /* 349 */ array(59, 75, ),
        /* 350 */ array(49, 50, ),
        /* 351 */ array(6, 73, ),
        /* 352 */ array(6, 74, ),
        /* 353 */ array(6, 74, ),
        /* 354 */ array(29, 96, ),
        /* 355 */ array(59, 127, ),
        /* 356 */ array(29, 96, ),
        /* 357 */ array(6, 73, ),
        /* 358 */ array(59, 75, ),
        /* 359 */ array(6, 73, ),
        /* 360 */ array(6, 73, ),
        /* 361 */ array(6, 74, ),
        /* 362 */ array(72, 116, ),
        /* 363 */ array(59, 75, ),
        /* 364 */ array(59, 75, ),
        /* 365 */ array(59, 75, ),
        /* 366 */ array(6, 73, ),
        /* 367 */ array(59, 75, ),
        /* 368 */ array(59, 75, ),
        /* 369 */ array(74, ),
        /* 370 */ array(11, ),
        /* 371 */ array(96, ),
        /* 372 */ array(109, ),
        /* 373 */ array(11, ),
        /* 374 */ array(72, ),
        /* 375 */ array(115, ),
        /* 376 */ array(76, ),
        /* 377 */ array(6, ),
        /* 378 */ array(116, ),
        /* 379 */ array(72, ),
        /* 380 */ array(115, ),
        /* 381 */ array(98, ),
        /* 382 */ array(75, ),
        /* 383 */ array(75, ),
        /* 384 */ array(72, ),
        /* 385 */ array(11, ),
        /* 386 */ array(73, ),
        /* 387 */ array(73, ),
        /* 388 */ array(74, ),
        /* 389 */ array(11, ),
        /* 390 */ array(99, ),
        /* 391 */ array(99, ),
        /* 392 */ array(6, ),
        /* 393 */ array(74, ),
        /* 394 */ array(11, ),
        /* 395 */ array(98, ),
        /* 396 */ array(6, ),
        /* 397 */ array(11, ),
        /* 398 */ array(73, ),
        /* 399 */ array(11, ),
        /* 400 */ array(72, ),
        /* 401 */ array(98, ),
        /* 402 */ array(98, ),
        /* 403 */ array(75, ),
        /* 404 */ array(11, ),
        /* 405 */ array(74, ),
        /* 406 */ array(64, ),
        /* 407 */ array(72, ),
        /* 408 */ array(24, ),
        /* 409 */ array(72, ),
        /* 410 */ array(24, ),
        /* 411 */ array(24, ),
        /* 412 */ array(72, ),
        /* 413 */ array(74, ),
        /* 414 */ array(74, ),
        /* 415 */ array(74, ),
        /* 416 */ array(74, ),
        /* 417 */ array(6, ),
        /* 418 */ array(73, ),
        /* 419 */ array(74, ),
        /* 420 */ array(96, ),
        /* 421 */ array(11, ),
        /* 422 */ array(74, ),
        /* 423 */ array(73, ),
        /* 424 */ array(98, ),
        /* 425 */ array(72, ),
        /* 426 */ array(75, ),
        /* 427 */ array(73, ),
        /* 428 */ array(72, ),
        /* 429 */ array(94, ),
        /* 430 */ array(73, ),
        /* 431 */ array(96, ),
        /* 432 */ array(75, ),
        /* 433 */ array(72, ),
        /* 434 */ array(72, ),
        /* 435 */ array(72, ),
        /* 436 */ array(98, ),
        /* 437 */ array(75, ),
        /* 438 */ array(72, ),
        /* 439 */ array(98, ),
        /* 440 */ array(6, ),
        /* 441 */ array(11, ),
        /* 442 */ array(11, ),
        /* 443 */ array(96, ),
        /* 444 */ array(97, ),
        /* 445 */ array(128, ),
        /* 446 */ array(96, ),
        /* 447 */ array(98, ),
        /* 448 */ array(11, ),
        /* 449 */ array(98, ),
        /* 450 */ array(11, ),
        /* 451 */ array(72, ),
        /* 452 */ array(73, ),
        /* 453 */ array(47, ),
        /* 454 */ array(127, ),
        /* 455 */ array(73, ),
        /* 456 */ array(73, ),
        /* 457 */ array(72, ),
        /* 458 */ array(116, ),
        /* 459 */ array(73, ),
        /* 460 */ array(128, ),
        /* 461 */ array(127, ),
        /* 462 */ array(47, ),
        /* 463 */ array(75, ),
        /* 464 */ array(72, ),
        /* 465 */ array(75, ),
        /* 466 */ array(116, ),
        /* 467 */ array(72, ),
        /* 468 */ array(72, ),
        /* 469 */ array(73, ),
        /* 470 */ array(72, ),
        /* 471 */ array(76, ),
        /* 472 */ array(116, ),
        /* 473 */ array(128, ),
        /* 474 */ array(73, ),
        /* 475 */ array(72, ),
        /* 476 */ array(76, ),
        /* 477 */ array(78, ),
        /* 478 */ array(74, ),
        /* 479 */ array(73, ),
        /* 480 */ array(74, ),
        /* 481 */ array(72, ),
        /* 482 */ array(72, ),
        /* 483 */ array(74, ),
        /* 484 */ array(73, ),
        /* 485 */ array(72, ),
        /* 486 */ array(47, ),
        /* 487 */ array(116, ),
        /* 488 */ array(75, ),
        /* 489 */ array(47, ),
        /* 490 */ array(72, ),
        /* 491 */ array(75, ),
        /* 492 */ array(72, ),
        /* 493 */ array(73, ),
        /* 494 */ array(59, ),
        /* 495 */ array(75, ),
        /* 496 */ array(75, ),
        /* 497 */ array(72, ),
        /* 498 */ array(72, ),
        /* 499 */ array(72, ),
        /* 500 */ array(74, ),
        /* 501 */ array(128, ),
        /* 502 */ array(72, ),
        /* 503 */ array(6, ),
        /* 504 */ array(73, ),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
        /* 560 */ array(),
        /* 561 */ array(),
        /* 562 */ array(),
        /* 563 */ array(),
        /* 564 */ array(),
        /* 565 */ array(),
        /* 566 */ array(),
        /* 567 */ array(),
        /* 568 */ array(),
        /* 569 */ array(),
        /* 570 */ array(),
        /* 571 */ array(),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
        /* 707 */ array(),
        /* 708 */ array(),
        /* 709 */ array(),
        /* 710 */ array(),
        /* 711 */ array(),
        /* 712 */ array(),
        /* 713 */ array(),
        /* 714 */ array(),
        /* 715 */ array(),
        /* 716 */ array(),
        /* 717 */ array(),
        /* 718 */ array(),
        /* 719 */ array(),
        /* 720 */ array(),
        /* 721 */ array(),
        /* 722 */ array(),
        /* 723 */ array(),
        /* 724 */ array(),
        /* 725 */ array(),
        /* 726 */ array(),
        /* 727 */ array(),
        /* 728 */ array(),
        /* 729 */ array(),
);
    static public $yy_default = array(
 /*     0 */   732,  912, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    10 */  1088, 1088,  911,  903,  915,  904,  730, 1088, 1088, 1088,
 /*    20 */  1088, 1088, 1088, 1088, 1088, 1088,  931,  931,  931,  931,
 /*    30 */   931, 1021,  931, 1083, 1083, 1083, 1088, 1005, 1005, 1005,
 /*    40 */  1080, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    50 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    60 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    70 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    80 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*    90 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   100 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   110 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   120 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   130 */  1019, 1019, 1088, 1019, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   140 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   150 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   160 */   957,  957,  881, 1088, 1088,  768, 1088, 1088, 1088, 1088,
 /*   170 */  1088, 1088,  880, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   180 */  1088, 1088, 1088,  929,  929, 1088, 1088, 1088, 1088, 1088,
 /*   190 */   767, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  954, 1088,
 /*   200 */  1088,  914,  916, 1088, 1088,  929, 1088, 1088,  905, 1088,
 /*   210 */  1088,  977,  792, 1087,  788,  983, 1081,  791, 1088, 1088,
 /*   220 */   905, 1087, 1079, 1088, 1088, 1079,  983, 1088,  888,  866,
 /*   230 */   888, 1073,  905,  774,  980,  774,  774,  774,  774, 1041,
 /*   240 */   774,  774,  774, 1041, 1041,  774,  774,  774,  774,  948,
 /*   250 */  1076,  774,  774,  774,  910,  948,  905, 1041, 1088, 1088,
 /*   260 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   270 */  1088, 1023, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   280 */  1088, 1088, 1025, 1088,  967, 1088, 1004, 1024, 1085, 1052,
 /*   290 */  1051, 1084, 1054,  968, 1055, 1022,  821,  823,  814,  799,
 /*   300 */   804,  807,  806,  812,  811,  813,  810,  863,  809,  822,
 /*   310 */   808,  805,  798,  849,  819,  820,  824,  826,  841,  840,
 /*   320 */   825,  839,  842,  974,  974,  974,  974,  974,  845,  843,
 /*   330 */   844,  846,  833,  834,  835,  827,  828,  836,  829,  997,
 /*   340 */  1088,  996, 1088, 1088, 1088, 1088, 1088, 1088,  797,  984,
 /*   350 */  1088, 1088, 1088, 1088, 1088, 1042, 1088, 1088,  987,  797,
 /*   360 */  1088, 1088, 1064,  997,  996,  988, 1088,  985, 1006, 1088,
 /*   370 */  1088, 1088, 1088,  943, 1088,  883, 1088,  879,  874, 1088,
 /*   380 */   885, 1088, 1088, 1088, 1088,  945, 1088, 1088, 1088,  961,
 /*   390 */  1088, 1088,  793, 1088, 1088, 1088,  790, 1088, 1088,  920,
 /*   400 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   410 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1082, 1088, 1088,
 /*   420 */  1088,  919, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  797,
 /*   430 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   440 */   917,  923,  924, 1088, 1088, 1088, 1088, 1088,  963, 1088,
 /*   450 */  1088, 1088, 1088,  837,  978, 1088, 1088, 1088, 1088, 1088,
 /*   460 */  1088, 1074,  830, 1014, 1088, 1013, 1071, 1088, 1088, 1088,
 /*   470 */  1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
 /*   480 */  1088, 1088, 1088, 1088, 1088, 1088,  832, 1088, 1013,  831,
 /*   490 */   993, 1014, 1088, 1088, 1065, 1013, 1014, 1058, 1088,  992,
 /*   500 */   797, 1088, 1059,  930, 1088,  794, 1036, 1040,  958,  955,
 /*   510 */   784,  960, 1037, 1062,  966, 1031, 1070, 1032,  921,  986,
 /*   520 */   795,  990, 1039,  925, 1060, 1038, 1057,  928, 1061,  927,
 /*   530 */   951,  952,  937, 1056,  783, 1033,  959, 1049, 1034,  847,
 /*   540 */   922,  926, 1035,  895,  736,  854,  892,  855,  907, 1050,
 /*   550 */   891,  902,  850, 1053,  901,  851,  853,  852,  856,  908,
 /*   560 */  1003,  734,  858,  733,  731, 1002,  740,  998,  857,  909,
 /*   570 */   913,  735,  991,  900,  848, 1047, 1068,  787,  769,  995,
 /*   580 */   738, 1030, 1086,  994,  785,  786,  789,  953,  896, 1067,
 /*   590 */   934,  975,  894,  906,  737,  838,  893,  897,  862, 1066,
 /*   600 */   898, 1065, 1063, 1069, 1048,  972,  757,  816,  976,  802,
 /*   610 */   973,  745,  859,  747,  748,  817,  755,  756,  746,  899,
 /*   620 */   744,  761,  979,  762,  742,  981,  741,  760,  743, 1000,
 /*   630 */   758,  970,  971,  759,  969,  754,  815,  875,  872,  871,
 /*   640 */   876,  870,  938,  886,  940,  974,  753,  942,  803,  941,
 /*   650 */   873, 1001,  877,  884,  867,  944,  750,  749,  946,  751,
 /*   660 */   882,  752,  878,  869,  865,  868,  818, 1045, 1072, 1044,
 /*   670 */   781,  993,  989,  992, 1008, 1009, 1010, 1011,  778,  779,
 /*   680 */  1007,  780,  782,  947, 1026,  950, 1020,  861, 1028,  965,
 /*   690 */   964, 1043,  949,  864, 1029,  939, 1027,  962, 1012,  777,
 /*   700 */   800,  801,  797, 1078,  796,  764, 1015, 1059,  770,  763,
 /*   710 */  1016, 1018,  771, 1017,  982,  999,  766, 1075,  772,  773,
 /*   720 */   776,  775, 1077,  890,  739,  765,  887,  889,  860, 1046,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 253;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 730;
    const YYNRULE = 358;
    const YYERRORSYMBOL = 142;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_INCLUDE',     'T_INCLUDE_ONCE',  'T_EVAL',      
  'T_REQUIRE',     'T_REQUIRE_ONCE',  'COMMA',         'T_LOGICAL_OR',
  'T_LOGICAL_XOR',  'T_LOGICAL_AND',  'T_PRINT',       'EQUALS',      
  'T_PLUS_EQUAL',  'T_MINUS_EQUAL',  'T_MUL_EQUAL',   'T_DIV_EQUAL', 
  'T_CONCAT_EQUAL',  'T_MOD_EQUAL',   'T_AND_EQUAL',   'T_OR_EQUAL',  
  'T_XOR_EQUAL',   'T_SL_EQUAL',    'T_SR_EQUAL',    'QUESTION',    
  'COLON',         'T_BOOLEAN_OR',  'T_BOOLEAN_AND',  'BAR',         
  'CARAT',         'AMPERSAND',     'T_IS_EQUAL',    'T_IS_NOT_EQUAL',
  'T_IS_IDENTICAL',  'T_IS_NOT_IDENTICAL',  'LESSTHAN',      'T_IS_SMALLER_OR_EQUAL',
  'GREATERTHAN',   'T_IS_GREATER_OR_EQUAL',  'T_SL',          'T_SR',        
  'PLUS',          'MINUS',         'DOT',           'TIMES',       
  'DIVIDE',        'PERCENT',       'EXCLAM',        'T_INSTANCEOF',
  'TILDE',         'T_INC',         'T_DEC',         'T_INT_CAST',  
  'T_DOUBLE_CAST',  'T_STRING_CAST',  'T_ARRAY_CAST',  'T_OBJECT_CAST',
  'T_BOOL_CAST',   'T_UNSET_CAST',  'AT',            'LBRACKET',    
  'T_NEW',         'T_CLONE',       'T_ELSEIF',      'T_ELSE',      
  'T_ENDIF',       'T_STATIC',      'T_ABSTRACT',    'T_FINAL',     
  'T_PRIVATE',     'T_PROTECTED',   'T_PUBLIC',      'T_HALT_COMPILER',
  'LPAREN',        'RPAREN',        'SEMI',          'LCURLY',      
  'RCURLY',        'T_IF',          'T_WHILE',       'T_DO',        
  'T_FOR',         'T_SWITCH',      'T_BREAK',       'T_CONTINUE',  
  'T_RETURN',      'T_GLOBAL',      'T_ECHO',        'T_INLINE_HTML',
  'T_USE',         'T_UNSET',       'T_DECLARE',     'T_TRY',       
  'T_THROW',       'T_FOREACH',     'T_AS',          'T_CATCH',     
  'T_VARIABLE',    'T_FUNCTION',    'T_STRING',      'T_CLASS',     
  'T_EXTENDS',     'T_INTERFACE',   'T_IMPLEMENTS',  'T_LIST',      
  'T_EXIT',        'T_ARRAY',       'BACKQUOTE',     'T_LNUMBER',   
  'T_DNUMBER',     'T_CONSTANT_ENCAPSED_STRING',  'T_LINE',        'T_FILE',      
  'T_CLASS_C',     'T_METHOD_C',    'T_FUNC_C',      'T_DOUBLE_ARROW',
  'T_PAAMAYIM_NEKUDOTAYIM',  'T_ENDFOR',      'T_ENDFOREACH',  'T_ENDDECLARE',
  'T_ENDSWITCH',   'T_CASE',        'T_DEFAULT',     'T_ENDWHILE',  
  'DOLLAR',        'T_VAR',         'T_CONST',       'T_OBJECT_OPERATOR',
  'RBRACKET',      'T_NUM_STRING',  'T_ENCAPSED_AND_WHITESPACE',  'T_CHARACTER', 
  'T_BAD_CHARACTER',  'T_DOLLAR_OPEN_CURLY_BRACES',  'T_STRING_VARNAME',  'T_CURLY_OPEN',
  'T_ISSET',       'T_EMPTY',       'DOUBLEQUOTE',   'SINGLEQUOTE', 
  'T_START_HEREDOC',  'T_END_HEREDOC',  'error',         'start',       
  'top_statement_list',  'top_statement',  'statement',     'function_declaration_statement',
  'class_declaration_statement',  'unticked_statement',  'inner_statement_list',  'expr',        
  'elseif_list',   'else_single',   'new_elseif_list',  'new_else_single',
  'while_statement',  'for_expr',      'for_statement',  'switch_case_list',
  'expr_without_variable',  'variable',      'global_var_list',  'static_var_list',
  'echo_expr_list',  'use_filename',  'unset_variables',  'foreach_var_head',
  'foreach_statement',  'foreach_novar_head',  'declare_list',  'declare_statement',
  'catch_head',    'additional_catches',  'foreach_variable',  'foreach_optional_arg',
  'w_variable',    'non_empty_additional_catches',  'additional_catch',  'fully_qualified_class_name',
  'inner_statement',  'unticked_function_declaration_statement',  'unticked_class_declaration_statement',  'is_reference',
  'parameter_list',  'class_entry_type',  'extends_from',  'implements_list',
  'class_statement_list',  'interface_entry',  'interface_extends_list',  'interface_list',
  'r_variable',    'assignment_list',  'class_name_reference',  'ctor_arguments',
  'rw_variable',   'internal_functions_in_yacc',  'exit_expr',     'scalar',      
  'array_pair_list',  'encaps_list',   'common_scalar',  'static_scalar',
  'static_array_pair_list',  'static_class_constant',  'non_empty_static_array_pair_list',  'case_list',   
  'case_separator',  'non_empty_parameter_list',  'optional_class_type',  'function_call_parameter_list',
  'non_empty_function_call_parameter_list',  'global_var',    'class_statement',  'variable_modifiers',
  'class_variable_declaration',  'class_constant_declaration',  'method_modifiers',  'method_body', 
  'non_empty_member_modifiers',  'member_modifier',  'unset_variable',  'base_variable_with_function_calls',
  'object_property',  'method_or_not',  'variable_properties',  'variable_property',
  'variable_without_objects',  'reference_variable',  'simple_indirect_reference',  'static_member',
  'static_variable_without_objects',  'static_reference_variable',  'dim_offset',    'static_compound_variable',
  'base_variable',  'function_call',  'compound_variable',  'object_dim_list',
  'variable_name',  'assignment_list_element',  'non_empty_array_pair_list',  'possible_comma',
  'encaps_var',    'encaps_var_offset',  'isset_variables',  'class_constant',
  'dynamic_class_name_reference',  'dynamic_class_name_variable_properties',  'dynamic_class_name_variable_property',  'non_empty_for_expr',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= top_statement_list",
 /*   1 */ "top_statement_list ::= top_statement_list top_statement",
 /*   2 */ "top_statement_list ::=",
 /*   3 */ "top_statement ::= statement",
 /*   4 */ "top_statement ::= function_declaration_statement",
 /*   5 */ "top_statement ::= class_declaration_statement",
 /*   6 */ "top_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*   7 */ "statement ::= unticked_statement",
 /*   8 */ "unticked_statement ::= LCURLY inner_statement_list RCURLY",
 /*   9 */ "unticked_statement ::= T_IF LPAREN expr RPAREN statement elseif_list else_single",
 /*  10 */ "unticked_statement ::= T_IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single T_ENDIF COLON",
 /*  11 */ "unticked_statement ::= T_WHILE LPAREN expr RPAREN while_statement",
 /*  12 */ "unticked_statement ::= T_DO statement T_WHILE LPAREN expr RPAREN SEMI",
 /*  13 */ "unticked_statement ::= T_FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement",
 /*  14 */ "unticked_statement ::= T_SWITCH LPAREN expr RPAREN switch_case_list",
 /*  15 */ "unticked_statement ::= T_BREAK SEMI",
 /*  16 */ "unticked_statement ::= T_BREAK expr SEMI",
 /*  17 */ "unticked_statement ::= T_CONTINUE SEMI",
 /*  18 */ "unticked_statement ::= T_CONTINUE expr SEMI",
 /*  19 */ "unticked_statement ::= T_RETURN SEMI",
 /*  20 */ "unticked_statement ::= T_RETURN expr_without_variable SEMI",
 /*  21 */ "unticked_statement ::= T_RETURN variable SEMI",
 /*  22 */ "unticked_statement ::= T_GLOBAL global_var_list SEMI",
 /*  23 */ "unticked_statement ::= T_STATIC static_var_list SEMI",
 /*  24 */ "unticked_statement ::= T_ECHO echo_expr_list SEMI",
 /*  25 */ "unticked_statement ::= T_INLINE_HTML",
 /*  26 */ "unticked_statement ::= expr SEMI",
 /*  27 */ "unticked_statement ::= T_USE use_filename SEMI",
 /*  28 */ "unticked_statement ::= T_UNSET LPAREN unset_variables RPAREN SEMI",
 /*  29 */ "unticked_statement ::= foreach_var_head RPAREN foreach_statement",
 /*  30 */ "unticked_statement ::= foreach_novar_head RPAREN foreach_statement",
 /*  31 */ "unticked_statement ::= T_DECLARE LPAREN declare_list RPAREN declare_statement",
 /*  32 */ "unticked_statement ::= SEMI",
 /*  33 */ "unticked_statement ::= T_TRY LCURLY inner_statement_list RCURLY catch_head LCURLY inner_statement_list RCURLY additional_catches",
 /*  34 */ "unticked_statement ::= T_THROW expr SEMI",
 /*  35 */ "foreach_var_head ::= T_FOREACH LPAREN variable T_AS foreach_variable foreach_optional_arg",
 /*  36 */ "foreach_novar_head ::= T_FOREACH LPAREN expr_without_variable T_AS w_variable foreach_optional_arg",
 /*  37 */ "additional_catches ::= non_empty_additional_catches",
 /*  38 */ "additional_catches ::=",
 /*  39 */ "non_empty_additional_catches ::= additional_catch",
 /*  40 */ "non_empty_additional_catches ::= non_empty_additional_catches additional_catch",
 /*  41 */ "catch_head ::= T_CATCH LPAREN fully_qualified_class_name T_VARIABLE RPAREN",
 /*  42 */ "additional_catch ::= catch_head LCURLY inner_statement_list RCURLY",
 /*  43 */ "inner_statement_list ::= inner_statement_list inner_statement",
 /*  44 */ "inner_statement_list ::=",
 /*  45 */ "inner_statement ::= statement",
 /*  46 */ "inner_statement ::= function_declaration_statement",
 /*  47 */ "inner_statement ::= class_declaration_statement",
 /*  48 */ "inner_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*  49 */ "function_declaration_statement ::= unticked_function_declaration_statement",
 /*  50 */ "class_declaration_statement ::= unticked_class_declaration_statement",
 /*  51 */ "unticked_function_declaration_statement ::= T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN LCURLY inner_statement_list RCURLY",
 /*  52 */ "unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list LCURLY class_statement_list RCURLY",
 /*  53 */ "unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list LCURLY class_statement_list RCURLY",
 /*  54 */ "class_entry_type ::= T_CLASS",
 /*  55 */ "class_entry_type ::= T_ABSTRACT T_CLASS",
 /*  56 */ "class_entry_type ::= T_FINAL T_CLASS",
 /*  57 */ "extends_from ::= T_EXTENDS fully_qualified_class_name",
 /*  58 */ "extends_from ::=",
 /*  59 */ "interface_entry ::= T_INTERFACE",
 /*  60 */ "interface_extends_list ::= T_EXTENDS interface_list",
 /*  61 */ "interface_extends_list ::=",
 /*  62 */ "implements_list ::=",
 /*  63 */ "implements_list ::= T_IMPLEMENTS interface_list",
 /*  64 */ "interface_list ::= fully_qualified_class_name",
 /*  65 */ "interface_list ::= interface_list COMMA fully_qualified_class_name",
 /*  66 */ "expr ::= r_variable",
 /*  67 */ "expr ::= expr_without_variable",
 /*  68 */ "expr_without_variable ::= T_LIST LPAREN assignment_list RPAREN EQUALS expr",
 /*  69 */ "expr_without_variable ::= variable EQUALS expr",
 /*  70 */ "expr_without_variable ::= variable EQUALS AMPERSAND variable",
 /*  71 */ "expr_without_variable ::= variable EQUALS AMPERSAND T_NEW class_name_reference ctor_arguments",
 /*  72 */ "expr_without_variable ::= T_NEW class_name_reference ctor_arguments",
 /*  73 */ "expr_without_variable ::= T_CLONE expr",
 /*  74 */ "expr_without_variable ::= variable T_PLUS_EQUAL expr",
 /*  75 */ "expr_without_variable ::= variable T_MINUS_EQUAL expr",
 /*  76 */ "expr_without_variable ::= variable T_MUL_EQUAL expr",
 /*  77 */ "expr_without_variable ::= variable T_DIV_EQUAL expr",
 /*  78 */ "expr_without_variable ::= variable T_CONCAT_EQUAL expr",
 /*  79 */ "expr_without_variable ::= variable T_MOD_EQUAL expr",
 /*  80 */ "expr_without_variable ::= variable T_AND_EQUAL expr",
 /*  81 */ "expr_without_variable ::= variable T_OR_EQUAL expr",
 /*  82 */ "expr_without_variable ::= variable T_XOR_EQUAL expr",
 /*  83 */ "expr_without_variable ::= variable T_SL_EQUAL expr",
 /*  84 */ "expr_without_variable ::= variable T_SR_EQUAL expr",
 /*  85 */ "expr_without_variable ::= rw_variable T_INC",
 /*  86 */ "expr_without_variable ::= T_INC rw_variable",
 /*  87 */ "expr_without_variable ::= rw_variable T_DEC",
 /*  88 */ "expr_without_variable ::= T_DEC rw_variable",
 /*  89 */ "expr_without_variable ::= expr T_BOOLEAN_OR expr",
 /*  90 */ "expr_without_variable ::= expr T_BOOLEAN_AND expr",
 /*  91 */ "expr_without_variable ::= expr T_LOGICAL_OR expr",
 /*  92 */ "expr_without_variable ::= expr T_LOGICAL_AND expr",
 /*  93 */ "expr_without_variable ::= expr T_LOGICAL_XOR expr",
 /*  94 */ "expr_without_variable ::= expr BAR expr",
 /*  95 */ "expr_without_variable ::= expr AMPERSAND expr",
 /*  96 */ "expr_without_variable ::= expr CARAT expr",
 /*  97 */ "expr_without_variable ::= expr DOT expr",
 /*  98 */ "expr_without_variable ::= expr PLUS expr",
 /*  99 */ "expr_without_variable ::= expr MINUS expr",
 /* 100 */ "expr_without_variable ::= expr TIMES expr",
 /* 101 */ "expr_without_variable ::= expr DIVIDE expr",
 /* 102 */ "expr_without_variable ::= expr PERCENT expr",
 /* 103 */ "expr_without_variable ::= expr T_SL expr",
 /* 104 */ "expr_without_variable ::= expr T_SR expr",
 /* 105 */ "expr_without_variable ::= PLUS expr",
 /* 106 */ "expr_without_variable ::= MINUS expr",
 /* 107 */ "expr_without_variable ::= EXCLAM expr",
 /* 108 */ "expr_without_variable ::= TILDE expr",
 /* 109 */ "expr_without_variable ::= expr T_IS_IDENTICAL expr",
 /* 110 */ "expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr",
 /* 111 */ "expr_without_variable ::= expr T_IS_EQUAL expr",
 /* 112 */ "expr_without_variable ::= expr T_IS_NOT_EQUAL expr",
 /* 113 */ "expr_without_variable ::= expr LESSTHAN expr",
 /* 114 */ "expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr",
 /* 115 */ "expr_without_variable ::= expr GREATERTHAN expr",
 /* 116 */ "expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr",
 /* 117 */ "expr_without_variable ::= expr T_INSTANCEOF class_name_reference",
 /* 118 */ "expr_without_variable ::= LPAREN expr RPAREN",
 /* 119 */ "expr_without_variable ::= expr QUESTION expr COLON expr",
 /* 120 */ "expr_without_variable ::= internal_functions_in_yacc",
 /* 121 */ "expr_without_variable ::= T_INT_CAST expr",
 /* 122 */ "expr_without_variable ::= T_DOUBLE_CAST expr",
 /* 123 */ "expr_without_variable ::= T_STRING_CAST expr",
 /* 124 */ "expr_without_variable ::= T_ARRAY_CAST expr",
 /* 125 */ "expr_without_variable ::= T_OBJECT_CAST expr",
 /* 126 */ "expr_without_variable ::= T_BOOL_CAST expr",
 /* 127 */ "expr_without_variable ::= T_UNSET_CAST expr",
 /* 128 */ "expr_without_variable ::= T_EXIT exit_expr",
 /* 129 */ "expr_without_variable ::= AT expr",
 /* 130 */ "expr_without_variable ::= scalar",
 /* 131 */ "expr_without_variable ::= T_ARRAY LPAREN array_pair_list RPAREN",
 /* 132 */ "expr_without_variable ::= BACKQUOTE encaps_list BACKQUOTE",
 /* 133 */ "expr_without_variable ::= T_PRINT expr",
 /* 134 */ "exit_expr ::= LPAREN RPAREN",
 /* 135 */ "exit_expr ::= LPAREN expr RPAREN",
 /* 136 */ "exit_expr ::=",
 /* 137 */ "common_scalar ::= T_LNUMBER",
 /* 138 */ "common_scalar ::= T_DNUMBER",
 /* 139 */ "common_scalar ::= T_CONSTANT_ENCAPSED_STRING",
 /* 140 */ "common_scalar ::= T_LINE",
 /* 141 */ "common_scalar ::= T_FILE",
 /* 142 */ "common_scalar ::= T_CLASS_C|T_METHOD_C|T_FUNC_C",
 /* 143 */ "static_scalar ::= common_scalar",
 /* 144 */ "static_scalar ::= T_STRING",
 /* 145 */ "static_scalar ::= PLUS static_scalar",
 /* 146 */ "static_scalar ::= MINUS static_scalar",
 /* 147 */ "static_scalar ::= T_ARRAY LPAREN static_array_pair_list RPAREN",
 /* 148 */ "static_scalar ::= static_class_constant",
 /* 149 */ "static_array_pair_list ::= non_empty_static_array_pair_list",
 /* 150 */ "static_array_pair_list ::= non_empty_static_array_pair_list COMMA",
 /* 151 */ "static_array_pair_list ::=",
 /* 152 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar T_DOUBLE_ARROW static_scalar",
 /* 153 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar",
 /* 154 */ "non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar",
 /* 155 */ "non_empty_static_array_pair_list ::= static_scalar",
 /* 156 */ "static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 157 */ "foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable",
 /* 158 */ "foreach_optional_arg ::=",
 /* 159 */ "foreach_variable ::= w_variable",
 /* 160 */ "foreach_variable ::= AMPERSAND w_variable",
 /* 161 */ "for_statement ::= statement",
 /* 162 */ "for_statement ::= COLON inner_statement_list T_ENDFOR SEMI",
 /* 163 */ "foreach_statement ::= statement",
 /* 164 */ "foreach_statement ::= COLON inner_statement_list T_ENDFOREACH SEMI",
 /* 165 */ "declare_statement ::= statement",
 /* 166 */ "declare_statement ::= COLON inner_statement_list T_ENDDECLARE SEMI",
 /* 167 */ "declare_list ::= T_STRING EQUALS static_scalar",
 /* 168 */ "declare_list ::= declare_list COMMA T_STRING EQUALS static_scalar",
 /* 169 */ "switch_case_list ::= LCURLY case_list RCURLY",
 /* 170 */ "switch_case_list ::= LCURLY SEMI case_list RCURLY",
 /* 171 */ "switch_case_list ::= COLON case_list T_ENDSWITCH SEMI",
 /* 172 */ "switch_case_list ::= COLON SEMI case_list T_ENDSWITCH SEMI",
 /* 173 */ "case_list ::= case_list T_CASE expr case_separator inner_statement_list",
 /* 174 */ "case_list ::= case_list T_DEFAULT case_separator inner_statement_list",
 /* 175 */ "case_list ::=",
 /* 176 */ "case_separator ::= COLON|SEMI",
 /* 177 */ "while_statement ::= statement",
 /* 178 */ "while_statement ::= COLON inner_statement_list T_ENDWHILE SEMI",
 /* 179 */ "elseif_list ::= elseif_list T_ELSEIF LPAREN expr RPAREN statement",
 /* 180 */ "elseif_list ::=",
 /* 181 */ "new_elseif_list ::= new_elseif_list T_ELSEIF LPAREN expr RPAREN COLON inner_statement_list",
 /* 182 */ "new_elseif_list ::=",
 /* 183 */ "else_single ::= T_ELSE statement",
 /* 184 */ "else_single ::=",
 /* 185 */ "new_else_single ::= T_ELSE COLON inner_statement_list",
 /* 186 */ "new_else_single ::=",
 /* 187 */ "parameter_list ::= non_empty_parameter_list",
 /* 188 */ "parameter_list ::=",
 /* 189 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE",
 /* 190 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE",
 /* 191 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 192 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 193 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE",
 /* 194 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE",
 /* 195 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 196 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 197 */ "optional_class_type ::= T_STRING",
 /* 198 */ "optional_class_type ::= T_ARRAY",
 /* 199 */ "optional_class_type ::=",
 /* 200 */ "function_call_parameter_list ::= non_empty_function_call_parameter_list",
 /* 201 */ "function_call_parameter_list ::=",
 /* 202 */ "non_empty_function_call_parameter_list ::= expr_without_variable",
 /* 203 */ "non_empty_function_call_parameter_list ::= variable",
 /* 204 */ "non_empty_function_call_parameter_list ::= AMPERSAND w_variable",
 /* 205 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA expr_without_variable",
 /* 206 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA variable",
 /* 207 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA AMPERSAND w_variable",
 /* 208 */ "global_var_list ::= global_var_list COMMA global_var",
 /* 209 */ "global_var_list ::= global_var",
 /* 210 */ "global_var ::= T_VARIABLE",
 /* 211 */ "global_var ::= DOLLAR r_variable",
 /* 212 */ "global_var ::= DOLLAR LCURLY expr RCURLY",
 /* 213 */ "static_var_list ::= static_var_list COMMA T_VARIABLE",
 /* 214 */ "static_var_list ::= static_var_list COMMA T_VARIABLE EQUALS static_scalar",
 /* 215 */ "static_var_list ::= T_VARIABLE",
 /* 216 */ "static_var_list ::= T_VARIABLE EQUALS static_scalar",
 /* 217 */ "class_statement_list ::= class_statement_list class_statement",
 /* 218 */ "class_statement_list ::=",
 /* 219 */ "class_statement ::= variable_modifiers class_variable_declaration SEMI",
 /* 220 */ "class_statement ::= class_constant_declaration SEMI",
 /* 221 */ "class_statement ::= method_modifiers T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN method_body",
 /* 222 */ "method_body ::= SEMI",
 /* 223 */ "method_body ::= LCURLY inner_statement_list RCURLY",
 /* 224 */ "variable_modifiers ::= non_empty_member_modifiers",
 /* 225 */ "variable_modifiers ::= T_VAR",
 /* 226 */ "method_modifiers ::= non_empty_member_modifiers",
 /* 227 */ "method_modifiers ::=",
 /* 228 */ "non_empty_member_modifiers ::= member_modifier",
 /* 229 */ "non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier",
 /* 230 */ "member_modifier ::= T_PUBLIC|T_PROTECTED|T_PRIVATE|T_STATIC|T_ABSTRACT|T_FINAL",
 /* 231 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE",
 /* 232 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE EQUALS static_scalar",
 /* 233 */ "class_variable_declaration ::= T_VARIABLE",
 /* 234 */ "class_variable_declaration ::= T_VARIABLE EQUALS static_scalar",
 /* 235 */ "class_constant_declaration ::= class_constant_declaration COMMA T_STRING EQUALS static_scalar",
 /* 236 */ "class_constant_declaration ::= T_CONST T_STRING EQUALS static_scalar",
 /* 237 */ "echo_expr_list ::= echo_expr_list COMMA expr",
 /* 238 */ "echo_expr_list ::= expr",
 /* 239 */ "unset_variables ::= unset_variable",
 /* 240 */ "unset_variables ::= unset_variables COMMA unset_variable",
 /* 241 */ "unset_variable ::= variable",
 /* 242 */ "use_filename ::= T_CONSTANT_ENCAPSED_STRING",
 /* 243 */ "use_filename ::= LCURLY T_CONSTANT_ENCAPSED_STRING RCURLY",
 /* 244 */ "r_variable ::= variable",
 /* 245 */ "w_variable ::= variable",
 /* 246 */ "rw_variable ::= variable",
 /* 247 */ "variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties",
 /* 248 */ "variable ::= base_variable_with_function_calls",
 /* 249 */ "variable_properties ::= variable_properties variable_property",
 /* 250 */ "variable_properties ::=",
 /* 251 */ "variable_property ::= T_OBJECT_OPERATOR object_property method_or_not",
 /* 252 */ "method_or_not ::= LPAREN function_call_parameter_list RPAREN",
 /* 253 */ "method_or_not ::=",
 /* 254 */ "variable_without_objects ::= reference_variable",
 /* 255 */ "variable_without_objects ::= simple_indirect_reference reference_variable",
 /* 256 */ "static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM static_variable_without_objects",
 /* 257 */ "static_variable_without_objects ::= static_reference_variable",
 /* 258 */ "static_variable_without_objects ::= simple_indirect_reference static_reference_variable",
 /* 259 */ "static_reference_variable ::= static_reference_variable LBRACKET dim_offset RBRACKET",
 /* 260 */ "static_reference_variable ::= static_reference_variable LCURLY expr RCURLY",
 /* 261 */ "static_reference_variable ::= static_compound_variable",
 /* 262 */ "static_compound_variable ::= T_VARIABLE",
 /* 263 */ "static_compound_variable ::= DOLLAR LCURLY expr RCURLY",
 /* 264 */ "base_variable_with_function_calls ::= base_variable",
 /* 265 */ "base_variable_with_function_calls ::= function_call",
 /* 266 */ "base_variable ::= reference_variable",
 /* 267 */ "base_variable ::= simple_indirect_reference reference_variable",
 /* 268 */ "base_variable ::= static_member",
 /* 269 */ "reference_variable ::= reference_variable LBRACKET dim_offset RBRACKET",
 /* 270 */ "reference_variable ::= reference_variable LCURLY expr RCURLY",
 /* 271 */ "reference_variable ::= compound_variable",
 /* 272 */ "compound_variable ::= T_VARIABLE",
 /* 273 */ "compound_variable ::= DOLLAR LCURLY expr RCURLY",
 /* 274 */ "dim_offset ::= expr",
 /* 275 */ "dim_offset ::=",
 /* 276 */ "object_property ::= object_dim_list",
 /* 277 */ "object_property ::= variable_without_objects",
 /* 278 */ "object_dim_list ::= object_dim_list LBRACKET dim_offset RBRACKET",
 /* 279 */ "object_dim_list ::= object_dim_list LCURLY expr RCURLY",
 /* 280 */ "object_dim_list ::= variable_name",
 /* 281 */ "variable_name ::= T_STRING",
 /* 282 */ "variable_name ::= LCURLY expr RCURLY",
 /* 283 */ "simple_indirect_reference ::= DOLLAR",
 /* 284 */ "simple_indirect_reference ::= simple_indirect_reference DOLLAR",
 /* 285 */ "assignment_list ::= assignment_list COMMA assignment_list_element",
 /* 286 */ "assignment_list ::= assignment_list_element",
 /* 287 */ "assignment_list_element ::= variable",
 /* 288 */ "assignment_list_element ::= T_LIST LPAREN assignment_list RPAREN",
 /* 289 */ "assignment_list_element ::=",
 /* 290 */ "array_pair_list ::= non_empty_array_pair_list possible_comma",
 /* 291 */ "array_pair_list ::=",
 /* 292 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW expr",
 /* 293 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr",
 /* 294 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr",
 /* 295 */ "non_empty_array_pair_list ::= expr",
 /* 296 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 297 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA AMPERSAND w_variable",
 /* 298 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 299 */ "non_empty_array_pair_list ::= AMPERSAND w_variable",
 /* 300 */ "encaps_list ::= encaps_list encaps_var",
 /* 301 */ "encaps_list ::= encaps_list T_STRING",
 /* 302 */ "encaps_list ::= encaps_list T_NUM_STRING",
 /* 303 */ "encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE",
 /* 304 */ "encaps_list ::= encaps_list T_CHARACTER",
 /* 305 */ "encaps_list ::= encaps_list T_BAD_CHARACTER",
 /* 306 */ "encaps_list ::= encaps_list LBRACKET",
 /* 307 */ "encaps_list ::= encaps_list RBRACKET",
 /* 308 */ "encaps_list ::= encaps_list LCURLY",
 /* 309 */ "encaps_list ::= encaps_list RCURLY",
 /* 310 */ "encaps_list ::= encaps_list T_OBJECT_OPERATOR",
 /* 311 */ "encaps_list ::=",
 /* 312 */ "encaps_var ::= T_VARIABLE",
 /* 313 */ "encaps_var ::= T_VARIABLE LBRACKET encaps_var_offset RBRACKET",
 /* 314 */ "encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR T_STRING",
 /* 315 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr RCURLY",
 /* 316 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME LBRACKET expr RBRACKET RCURLY",
 /* 317 */ "encaps_var ::= T_CURLY_OPEN variable RCURLY",
 /* 318 */ "encaps_var_offset ::= T_STRING|T_NUM_STRING|T_VARIABLE",
 /* 319 */ "internal_functions_in_yacc ::= T_ISSET LPAREN isset_variables RPAREN",
 /* 320 */ "internal_functions_in_yacc ::= T_EMPTY LPAREN variable RPAREN",
 /* 321 */ "internal_functions_in_yacc ::= T_INCLUDE expr",
 /* 322 */ "internal_functions_in_yacc ::= T_INCLUDE_ONCE expr",
 /* 323 */ "internal_functions_in_yacc ::= T_EVAL LPAREN expr RPAREN",
 /* 324 */ "internal_functions_in_yacc ::= T_REQUIRE expr",
 /* 325 */ "internal_functions_in_yacc ::= T_REQUIRE_ONCE expr",
 /* 326 */ "isset_variables ::= variable",
 /* 327 */ "isset_variables ::= isset_variables COMMA variable",
 /* 328 */ "class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 329 */ "fully_qualified_class_name ::= T_STRING",
 /* 330 */ "function_call ::= T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 331 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 332 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 333 */ "function_call ::= variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 334 */ "scalar ::= T_STRING",
 /* 335 */ "scalar ::= T_STRING_VARNAME",
 /* 336 */ "scalar ::= class_constant",
 /* 337 */ "scalar ::= common_scalar",
 /* 338 */ "scalar ::= DOUBLEQUOTE encaps_list DOUBLEQUOTE",
 /* 339 */ "scalar ::= SINGLEQUOTE encaps_list SINGLEQUOTE",
 /* 340 */ "scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC",
 /* 341 */ "class_name_reference ::= T_STRING",
 /* 342 */ "class_name_reference ::= dynamic_class_name_reference",
 /* 343 */ "dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties",
 /* 344 */ "dynamic_class_name_reference ::= base_variable",
 /* 345 */ "dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property",
 /* 346 */ "dynamic_class_name_variable_properties ::=",
 /* 347 */ "dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property",
 /* 348 */ "ctor_arguments ::= LPAREN function_call_parameter_list RPAREN",
 /* 349 */ "ctor_arguments ::=",
 /* 350 */ "possible_comma ::= COMMA",
 /* 351 */ "possible_comma ::=",
 /* 352 */ "for_expr ::= non_empty_for_expr",
 /* 353 */ "for_expr ::=",
 /* 354 */ "non_empty_for_expr ::= non_empty_for_expr COMMA expr",
 /* 355 */ "non_empty_for_expr ::= expr",
 /* 356 */ "is_reference ::= AMPERSAND",
 /* 357 */ "is_reference ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param PC_Stmt_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Stmt_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Stmt_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new PC_Stmt_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 0 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 10 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 9 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 9 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 167, 'rhs' => 6 ),
  array( 'lhs' => 169, 'rhs' => 6 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 0 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 5 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 4 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 9 ),
  array( 'lhs' => 182, 'rhs' => 7 ),
  array( 'lhs' => 182, 'rhs' => 6 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 0 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 0 ),
  array( 'lhs' => 187, 'rhs' => 0 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 5 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 198, 'rhs' => 0 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 2 ),
  array( 'lhs' => 203, 'rhs' => 4 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 1 ),
  array( 'lhs' => 204, 'rhs' => 2 ),
  array( 'lhs' => 204, 'rhs' => 0 ),
  array( 'lhs' => 206, 'rhs' => 5 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 1 ),
  array( 'lhs' => 205, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 0 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 4 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 4 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 5 ),
  array( 'lhs' => 159, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 5 ),
  array( 'lhs' => 207, 'rhs' => 5 ),
  array( 'lhs' => 207, 'rhs' => 4 ),
  array( 'lhs' => 207, 'rhs' => 0 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 6 ),
  array( 'lhs' => 152, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 7 ),
  array( 'lhs' => 154, 'rhs' => 0 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 0 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 0 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 5 ),
  array( 'lhs' => 209, 'rhs' => 4 ),
  array( 'lhs' => 209, 'rhs' => 4 ),
  array( 'lhs' => 209, 'rhs' => 5 ),
  array( 'lhs' => 209, 'rhs' => 7 ),
  array( 'lhs' => 209, 'rhs' => 6 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 0 ),
  array( 'lhs' => 211, 'rhs' => 1 ),
  array( 'lhs' => 211, 'rhs' => 0 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 2 ),
  array( 'lhs' => 212, 'rhs' => 3 ),
  array( 'lhs' => 212, 'rhs' => 3 ),
  array( 'lhs' => 212, 'rhs' => 4 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 2 ),
  array( 'lhs' => 213, 'rhs' => 4 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 5 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 0 ),
  array( 'lhs' => 214, 'rhs' => 3 ),
  array( 'lhs' => 214, 'rhs' => 2 ),
  array( 'lhs' => 214, 'rhs' => 8 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 219, 'rhs' => 3 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 218, 'rhs' => 0 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 2 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 216, 'rhs' => 5 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 217, 'rhs' => 5 ),
  array( 'lhs' => 217, 'rhs' => 4 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 222, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 5 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 2 ),
  array( 'lhs' => 226, 'rhs' => 0 ),
  array( 'lhs' => 227, 'rhs' => 3 ),
  array( 'lhs' => 225, 'rhs' => 3 ),
  array( 'lhs' => 225, 'rhs' => 0 ),
  array( 'lhs' => 228, 'rhs' => 1 ),
  array( 'lhs' => 228, 'rhs' => 2 ),
  array( 'lhs' => 231, 'rhs' => 3 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 2 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 4 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 4 ),
  array( 'lhs' => 229, 'rhs' => 4 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 4 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 0 ),
  array( 'lhs' => 224, 'rhs' => 1 ),
  array( 'lhs' => 224, 'rhs' => 1 ),
  array( 'lhs' => 239, 'rhs' => 4 ),
  array( 'lhs' => 239, 'rhs' => 4 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 3 ),
  array( 'lhs' => 230, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 3 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 1 ),
  array( 'lhs' => 241, 'rhs' => 4 ),
  array( 'lhs' => 241, 'rhs' => 0 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 0 ),
  array( 'lhs' => 242, 'rhs' => 5 ),
  array( 'lhs' => 242, 'rhs' => 3 ),
  array( 'lhs' => 242, 'rhs' => 3 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 6 ),
  array( 'lhs' => 242, 'rhs' => 4 ),
  array( 'lhs' => 242, 'rhs' => 4 ),
  array( 'lhs' => 242, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 0 ),
  array( 'lhs' => 244, 'rhs' => 1 ),
  array( 'lhs' => 244, 'rhs' => 4 ),
  array( 'lhs' => 244, 'rhs' => 3 ),
  array( 'lhs' => 244, 'rhs' => 3 ),
  array( 'lhs' => 244, 'rhs' => 6 ),
  array( 'lhs' => 244, 'rhs' => 3 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 4 ),
  array( 'lhs' => 197, 'rhs' => 4 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 4 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 246, 'rhs' => 1 ),
  array( 'lhs' => 246, 'rhs' => 3 ),
  array( 'lhs' => 247, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 4 ),
  array( 'lhs' => 237, 'rhs' => 6 ),
  array( 'lhs' => 237, 'rhs' => 6 ),
  array( 'lhs' => 237, 'rhs' => 4 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 3 ),
  array( 'lhs' => 199, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 248, 'rhs' => 4 ),
  array( 'lhs' => 248, 'rhs' => 1 ),
  array( 'lhs' => 249, 'rhs' => 2 ),
  array( 'lhs' => 249, 'rhs' => 0 ),
  array( 'lhs' => 250, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 0 ),
  array( 'lhs' => 243, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 0 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 0 ),
  array( 'lhs' => 251, 'rhs' => 3 ),
  array( 'lhs' => 251, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        9 => 9,
        10 => 9,
        14 => 9,
        33 => 9,
        11 => 11,
        12 => 11,
        13 => 11,
        29 => 11,
        30 => 11,
        19 => 19,
        20 => 20,
        21 => 20,
        34 => 34,
        35 => 35,
        36 => 35,
        41 => 41,
        51 => 51,
        221 => 51,
        52 => 52,
        53 => 52,
        66 => 66,
        67 => 66,
        129 => 66,
        130 => 66,
        143 => 66,
        148 => 66,
        149 => 66,
        157 => 66,
        159 => 66,
        160 => 66,
        200 => 66,
        244 => 66,
        245 => 66,
        246 => 66,
        254 => 66,
        257 => 66,
        264 => 66,
        265 => 66,
        266 => 66,
        268 => 66,
        274 => 66,
        276 => 66,
        287 => 66,
        336 => 66,
        337 => 66,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        91 => 89,
        90 => 90,
        92 => 90,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        263 => 118,
        119 => 119,
        120 => 120,
        248 => 120,
        271 => 120,
        342 => 120,
        344 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        133 => 128,
        158 => 128,
        199 => 128,
        253 => 128,
        275 => 128,
        289 => 128,
        131 => 131,
        147 => 131,
        150 => 131,
        252 => 131,
        282 => 131,
        288 => 131,
        290 => 131,
        348 => 131,
        132 => 132,
        335 => 132,
        338 => 132,
        339 => 132,
        340 => 132,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        144 => 144,
        334 => 144,
        145 => 145,
        146 => 146,
        151 => 151,
        198 => 151,
        152 => 152,
        292 => 152,
        153 => 153,
        293 => 153,
        154 => 154,
        294 => 154,
        155 => 155,
        295 => 155,
        299 => 155,
        156 => 156,
        189 => 189,
        193 => 189,
        190 => 190,
        194 => 190,
        191 => 191,
        195 => 191,
        192 => 192,
        196 => 192,
        197 => 197,
        201 => 201,
        250 => 201,
        349 => 201,
        202 => 202,
        203 => 202,
        204 => 202,
        286 => 202,
        205 => 205,
        206 => 205,
        285 => 205,
        207 => 207,
        210 => 210,
        213 => 213,
        215 => 213,
        214 => 214,
        216 => 214,
        247 => 247,
        249 => 249,
        251 => 251,
        255 => 255,
        256 => 256,
        258 => 258,
        259 => 259,
        260 => 260,
        261 => 261,
        262 => 262,
        267 => 267,
        269 => 269,
        270 => 270,
        343 => 270,
        272 => 272,
        273 => 273,
        277 => 277,
        280 => 277,
        278 => 278,
        279 => 278,
        281 => 281,
        329 => 281,
        341 => 281,
        291 => 291,
        296 => 296,
        297 => 297,
        298 => 298,
        319 => 319,
        320 => 319,
        321 => 321,
        322 => 321,
        323 => 321,
        324 => 321,
        325 => 321,
        328 => 328,
        330 => 330,
        331 => 331,
        332 => 332,
        333 => 333,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 115 "src/engine/stmtparser.y"
    function yy_r9(){
	$this->state->end_cond();
    }
#line 5023 "src/engine/stmtparser.php"
#line 122 "src/engine/stmtparser.y"
    function yy_r11(){
	$this->state->end_loop();
    }
#line 5028 "src/engine/stmtparser.php"
#line 146 "src/engine/stmtparser.y"
    function yy_r19(){
	$this->state->add_return(null);
    }
#line 5033 "src/engine/stmtparser.php"
#line 149 "src/engine/stmtparser.y"
    function yy_r20(){
	$this->state->add_return($this->yystack[$this->yyidx + -1]->minor);
    }
#line 5038 "src/engine/stmtparser.php"
#line 176 "src/engine/stmtparser.y"
    function yy_r34(){
	$this->state->add_throw($this->yystack[$this->yyidx + -1]->minor);
    }
#line 5043 "src/engine/stmtparser.php"
#line 181 "src/engine/stmtparser.y"
    function yy_r35(){
	$this->state->set_foreach_var($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5048 "src/engine/stmtparser.php"
#line 195 "src/engine/stmtparser.y"
    function yy_r41(){
	$type = PC_Obj_Variable::create_object($this->yystack[$this->yyidx + -2]->minor->get_type()->get_string());
	$this->state->set_var(new PC_Obj_Variable(substr($this->yystack[$this->yyidx + -1]->minor,1)),$type);
    }
#line 5054 "src/engine/stmtparser.php"
#line 215 "src/engine/stmtparser.y"
    function yy_r51(){
	$this->state->end_function();
    }
#line 5059 "src/engine/stmtparser.php"
#line 224 "src/engine/stmtparser.y"
    function yy_r52(){
	$this->state->end_class();
    }
#line 5064 "src/engine/stmtparser.php"
#line 254 "src/engine/stmtparser.y"
    function yy_r66(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 5067 "src/engine/stmtparser.php"
#line 257 "src/engine/stmtparser.y"
    function yy_r68(){
	$this->_retvalue = $this->state->handle_list($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5072 "src/engine/stmtparser.php"
#line 260 "src/engine/stmtparser.y"
    function yy_r69(){
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5077 "src/engine/stmtparser.php"
#line 263 "src/engine/stmtparser.y"
    function yy_r70(){
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor,true);
    }
#line 5082 "src/engine/stmtparser.php"
#line 267 "src/engine/stmtparser.y"
    function yy_r71(){
	$func = PC_Obj_Variable::create_string('__construct');
	$obj = $this->state->add_call($this->yystack[$this->yyidx + -1]->minor,$func,$this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -5]->minor,$obj);
    }
#line 5089 "src/engine/stmtparser.php"
#line 272 "src/engine/stmtparser.y"
    function yy_r72(){
	$func = PC_Obj_Variable::create_string('__construct');
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -1]->minor,$func,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5095 "src/engine/stmtparser.php"
#line 276 "src/engine/stmtparser.y"
    function yy_r73(){
	$this->_retvalue = clone $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5100 "src/engine/stmtparser.php"
#line 279 "src/engine/stmtparser.y"
    function yy_r74(){
	$this->_retvalue = $this->state->handle_bin_assign_op('+',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5105 "src/engine/stmtparser.php"
#line 282 "src/engine/stmtparser.y"
    function yy_r75(){
	$this->_retvalue = $this->state->handle_bin_assign_op('-',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5110 "src/engine/stmtparser.php"
#line 285 "src/engine/stmtparser.y"
    function yy_r76(){
	$this->_retvalue = $this->state->handle_bin_assign_op('*',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5115 "src/engine/stmtparser.php"
#line 288 "src/engine/stmtparser.y"
    function yy_r77(){
	$this->_retvalue = $this->state->handle_bin_assign_op('/',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5120 "src/engine/stmtparser.php"
#line 291 "src/engine/stmtparser.y"
    function yy_r78(){
	$this->_retvalue = $this->state->handle_bin_assign_op('.',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5125 "src/engine/stmtparser.php"
#line 294 "src/engine/stmtparser.y"
    function yy_r79(){
	$this->_retvalue = $this->state->handle_bin_assign_op('%',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5130 "src/engine/stmtparser.php"
#line 297 "src/engine/stmtparser.y"
    function yy_r80(){
	$this->_retvalue = $this->state->handle_bin_assign_op('&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5135 "src/engine/stmtparser.php"
#line 300 "src/engine/stmtparser.y"
    function yy_r81(){
	$this->_retvalue = $this->state->handle_bin_assign_op('|',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5140 "src/engine/stmtparser.php"
#line 303 "src/engine/stmtparser.y"
    function yy_r82(){
	$this->_retvalue = $this->state->handle_bin_assign_op('^',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5145 "src/engine/stmtparser.php"
#line 306 "src/engine/stmtparser.y"
    function yy_r83(){
	$this->_retvalue = $this->state->handle_bin_assign_op('<<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5150 "src/engine/stmtparser.php"
#line 309 "src/engine/stmtparser.y"
    function yy_r84(){
	$this->_retvalue = $this->state->handle_bin_assign_op('>>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5155 "src/engine/stmtparser.php"
#line 312 "src/engine/stmtparser.y"
    function yy_r85(){
	$this->_retvalue = $this->state->handle_post_op('+',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5160 "src/engine/stmtparser.php"
#line 315 "src/engine/stmtparser.y"
    function yy_r86(){
	$this->_retvalue = $this->state->handle_pre_op('+',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5165 "src/engine/stmtparser.php"
#line 318 "src/engine/stmtparser.y"
    function yy_r87(){
	$this->_retvalue = $this->state->handle_post_op('-',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5170 "src/engine/stmtparser.php"
#line 321 "src/engine/stmtparser.y"
    function yy_r88(){
	$this->_retvalue = $this->state->handle_pre_op('-',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5175 "src/engine/stmtparser.php"
#line 324 "src/engine/stmtparser.y"
    function yy_r89(){
	$this->_retvalue = $this->state->handle_bin_op('||',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5180 "src/engine/stmtparser.php"
#line 327 "src/engine/stmtparser.y"
    function yy_r90(){
	$this->_retvalue = $this->state->handle_bin_op('&&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5185 "src/engine/stmtparser.php"
#line 336 "src/engine/stmtparser.y"
    function yy_r93(){
	$this->_retvalue = $this->state->handle_bin_op('xor',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5190 "src/engine/stmtparser.php"
#line 339 "src/engine/stmtparser.y"
    function yy_r94(){
	$this->_retvalue = $this->state->handle_bin_op('|',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5195 "src/engine/stmtparser.php"
#line 342 "src/engine/stmtparser.y"
    function yy_r95(){
	$this->_retvalue = $this->state->handle_bin_op('&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5200 "src/engine/stmtparser.php"
#line 345 "src/engine/stmtparser.y"
    function yy_r96(){
	$this->_retvalue = $this->state->handle_bin_op('^',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5205 "src/engine/stmtparser.php"
#line 348 "src/engine/stmtparser.y"
    function yy_r97(){
	$this->_retvalue = $this->state->handle_bin_op('.',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5210 "src/engine/stmtparser.php"
#line 351 "src/engine/stmtparser.y"
    function yy_r98(){
	$this->_retvalue = $this->state->handle_bin_op('+',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5215 "src/engine/stmtparser.php"
#line 354 "src/engine/stmtparser.y"
    function yy_r99(){
	$this->_retvalue = $this->state->handle_bin_op('-',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5220 "src/engine/stmtparser.php"
#line 357 "src/engine/stmtparser.y"
    function yy_r100(){
	$this->_retvalue = $this->state->handle_bin_op('*',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5225 "src/engine/stmtparser.php"
#line 360 "src/engine/stmtparser.y"
    function yy_r101(){
	$this->_retvalue = $this->state->handle_bin_op('/',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5230 "src/engine/stmtparser.php"
#line 363 "src/engine/stmtparser.y"
    function yy_r102(){
	$this->_retvalue = $this->state->handle_bin_op('%',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5235 "src/engine/stmtparser.php"
#line 366 "src/engine/stmtparser.y"
    function yy_r103(){
	$this->_retvalue = $this->state->handle_bin_op('<<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5240 "src/engine/stmtparser.php"
#line 369 "src/engine/stmtparser.y"
    function yy_r104(){
	$this->_retvalue = $this->state->handle_bin_op('>>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5245 "src/engine/stmtparser.php"
#line 372 "src/engine/stmtparser.y"
    function yy_r105(){
	$this->_retvalue = $this->state->handle_unary_op('+',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5250 "src/engine/stmtparser.php"
#line 375 "src/engine/stmtparser.y"
    function yy_r106(){
	$this->_retvalue = $this->state->handle_unary_op('-',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5255 "src/engine/stmtparser.php"
#line 378 "src/engine/stmtparser.y"
    function yy_r107(){
	$this->_retvalue = $this->state->handle_unary_op('!',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5260 "src/engine/stmtparser.php"
#line 381 "src/engine/stmtparser.y"
    function yy_r108(){
	$this->_retvalue = $this->state->handle_unary_op('~',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5265 "src/engine/stmtparser.php"
#line 384 "src/engine/stmtparser.y"
    function yy_r109(){
	$this->_retvalue = $this->state->handle_cmp('===',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5270 "src/engine/stmtparser.php"
#line 387 "src/engine/stmtparser.y"
    function yy_r110(){
	$this->_retvalue = $this->state->handle_cmp('!==',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5275 "src/engine/stmtparser.php"
#line 390 "src/engine/stmtparser.y"
    function yy_r111(){
	$this->_retvalue = $this->state->handle_cmp('==',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5280 "src/engine/stmtparser.php"
#line 393 "src/engine/stmtparser.y"
    function yy_r112(){
	$this->_retvalue = $this->state->handle_cmp('!=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5285 "src/engine/stmtparser.php"
#line 396 "src/engine/stmtparser.y"
    function yy_r113(){
	$this->_retvalue = $this->state->handle_cmp('<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5290 "src/engine/stmtparser.php"
#line 399 "src/engine/stmtparser.y"
    function yy_r114(){
	$this->_retvalue = $this->state->handle_cmp('<=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5295 "src/engine/stmtparser.php"
#line 402 "src/engine/stmtparser.y"
    function yy_r115(){
	$this->_retvalue = $this->state->handle_cmp('>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5300 "src/engine/stmtparser.php"
#line 405 "src/engine/stmtparser.y"
    function yy_r116(){
	$this->_retvalue = $this->state->handle_cmp('>=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5305 "src/engine/stmtparser.php"
#line 408 "src/engine/stmtparser.y"
    function yy_r117(){
	$this->_retvalue = $this->state->handle_instanceof($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5310 "src/engine/stmtparser.php"
#line 411 "src/engine/stmtparser.y"
    function yy_r118(){
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 5315 "src/engine/stmtparser.php"
#line 414 "src/engine/stmtparser.y"
    function yy_r119(){
	$this->_retvalue = $this->state->handle_tri_op($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5320 "src/engine/stmtparser.php"
#line 417 "src/engine/stmtparser.y"
    function yy_r120(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5325 "src/engine/stmtparser.php"
#line 420 "src/engine/stmtparser.y"
    function yy_r121(){
	$this->_retvalue = $this->state->handle_cast('int',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5330 "src/engine/stmtparser.php"
#line 423 "src/engine/stmtparser.y"
    function yy_r122(){
	$this->_retvalue = $this->state->handle_cast('float',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5335 "src/engine/stmtparser.php"
#line 426 "src/engine/stmtparser.y"
    function yy_r123(){
	$this->_retvalue = $this->state->handle_cast('string',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5340 "src/engine/stmtparser.php"
#line 429 "src/engine/stmtparser.y"
    function yy_r124(){
	$this->_retvalue = $this->state->handle_cast('array',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5345 "src/engine/stmtparser.php"
#line 432 "src/engine/stmtparser.y"
    function yy_r125(){
	$this->_retvalue = $this->state->handle_cast('object',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5350 "src/engine/stmtparser.php"
#line 435 "src/engine/stmtparser.y"
    function yy_r126(){
	$this->_retvalue = $this->state->handle_cast('bool',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5355 "src/engine/stmtparser.php"
#line 438 "src/engine/stmtparser.y"
    function yy_r127(){
	$this->_retvalue = $this->state->handle_cast('unset',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5360 "src/engine/stmtparser.php"
#line 441 "src/engine/stmtparser.y"
    function yy_r128(){ $this->_retvalue = null;     }
#line 5363 "src/engine/stmtparser.php"
#line 444 "src/engine/stmtparser.y"
    function yy_r131(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 5366 "src/engine/stmtparser.php"
#line 445 "src/engine/stmtparser.y"
    function yy_r132(){
	$this->_retvalue = PC_Obj_Variable::create_string();
    }
#line 5371 "src/engine/stmtparser.php"
#line 454 "src/engine/stmtparser.y"
    function yy_r137(){
	$this->_retvalue = PC_Obj_Variable::create_int($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5376 "src/engine/stmtparser.php"
#line 457 "src/engine/stmtparser.y"
    function yy_r138(){
	$this->_retvalue = PC_Obj_Variable::create_float($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5381 "src/engine/stmtparser.php"
#line 460 "src/engine/stmtparser.y"
    function yy_r139(){
	$this->_retvalue = PC_Obj_Variable::create_string(substr($this->yystack[$this->yyidx + 0]->minor,1,-1));
    }
#line 5386 "src/engine/stmtparser.php"
#line 463 "src/engine/stmtparser.y"
    function yy_r140(){
	$this->_retvalue = PC_Obj_Variable::create_int($this->state->get_line());
    }
#line 5391 "src/engine/stmtparser.php"
#line 466 "src/engine/stmtparser.y"
    function yy_r141(){
	$this->_retvalue = PC_Obj_Variable::create_string($this->state->get_file());
    }
#line 5396 "src/engine/stmtparser.php"
#line 469 "src/engine/stmtparser.y"
    function yy_r142(){
	$this->_retvalue = $this->state->get_scope_part($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5401 "src/engine/stmtparser.php"
#line 475 "src/engine/stmtparser.y"
    function yy_r144(){
	if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"true") == 0)
		$this->_retvalue = PC_Obj_Variable::create_bool(true);
	else if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"false") == 0)
		$this->_retvalue = PC_Obj_Variable::create_bool(false);
	else
		$this->_retvalue = $this->state->get_constant_type($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5411 "src/engine/stmtparser.php"
#line 483 "src/engine/stmtparser.y"
    function yy_r145(){ $this->_retvalue = $this->state->handle_unary_op('+',$this->yystack[$this->yyidx + 0]->minor);     }
#line 5414 "src/engine/stmtparser.php"
#line 484 "src/engine/stmtparser.y"
    function yy_r146(){ $this->_retvalue = $this->state->handle_unary_op('-',$this->yystack[$this->yyidx + 0]->minor);     }
#line 5417 "src/engine/stmtparser.php"
#line 490 "src/engine/stmtparser.y"
    function yy_r151(){
	$this->_retvalue = PC_Obj_Variable::create_array();
    }
#line 5422 "src/engine/stmtparser.php"
#line 495 "src/engine/stmtparser.y"
    function yy_r152(){
	$this->_retvalue = $this->yystack[$this->yyidx + -4]->minor;
	$this->_retvalue->get_type()->array_insert($this->yystack[$this->yyidx + -2]->minor->get_type(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5428 "src/engine/stmtparser.php"
#line 500 "src/engine/stmtparser.y"
    function yy_r153(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue->get_type()->array_insert(null,$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5434 "src/engine/stmtparser.php"
#line 504 "src/engine/stmtparser.y"
    function yy_r154(){
	$this->_retvalue = PC_Obj_Variable::create_array();
	$this->_retvalue->get_type()->array_insert($this->yystack[$this->yyidx + -2]->minor->get_type(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5440 "src/engine/stmtparser.php"
#line 508 "src/engine/stmtparser.y"
    function yy_r155(){
	$this->_retvalue = PC_Obj_Variable::create_array();
	$this->_retvalue->get_type()->array_insert(PC_Obj_MultiType::create_int(0),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5446 "src/engine/stmtparser.php"
#line 513 "src/engine/stmtparser.y"
    function yy_r156(){
	$cname = PC_Obj_Variable::create_string($this->yystack[$this->yyidx + -2]->minor);
	$this->_retvalue = $this->state->handle_classconst_access($cname,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5452 "src/engine/stmtparser.php"
#line 566 "src/engine/stmtparser.y"
    function yy_r189(){
  $varname = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + 0]->minor,1));
	$this->state->set_func_param($varname,$this->yystack[$this->yyidx + -1]->minor,null);
    }
#line 5458 "src/engine/stmtparser.php"
#line 570 "src/engine/stmtparser.y"
    function yy_r190(){
  $varname = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + 0]->minor,1));
	$this->state->set_func_param($varname,$this->yystack[$this->yyidx + -2]->minor,null);
    }
#line 5464 "src/engine/stmtparser.php"
#line 574 "src/engine/stmtparser.y"
    function yy_r191(){
  $varname = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + -2]->minor,1));
	$this->state->set_func_param($varname,$this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5470 "src/engine/stmtparser.php"
#line 578 "src/engine/stmtparser.y"
    function yy_r192(){
  $varname = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + -2]->minor,1));
	$this->state->set_func_param($varname,$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5476 "src/engine/stmtparser.php"
#line 603 "src/engine/stmtparser.y"
    function yy_r197(){
	$this->_retvalue = PC_Obj_Variable::create_object($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5481 "src/engine/stmtparser.php"
#line 612 "src/engine/stmtparser.y"
    function yy_r201(){ $this->_retvalue = array();     }
#line 5484 "src/engine/stmtparser.php"
#line 614 "src/engine/stmtparser.y"
    function yy_r202(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 5487 "src/engine/stmtparser.php"
#line 618 "src/engine/stmtparser.y"
    function yy_r205(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5493 "src/engine/stmtparser.php"
#line 628 "src/engine/stmtparser.y"
    function yy_r207(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5499 "src/engine/stmtparser.php"
#line 636 "src/engine/stmtparser.y"
    function yy_r210(){ $this->state->do_global(substr($this->yystack[$this->yyidx + 0]->minor,1));     }
#line 5502 "src/engine/stmtparser.php"
#line 641 "src/engine/stmtparser.y"
    function yy_r213(){
	$var = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + 0]->minor,1));
	$this->state->set_var($var,new PC_Obj_Variable(''));
    }
#line 5508 "src/engine/stmtparser.php"
#line 645 "src/engine/stmtparser.y"
    function yy_r214(){
	$var = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + -2]->minor,1));
	$this->state->set_var($var,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5514 "src/engine/stmtparser.php"
#line 709 "src/engine/stmtparser.y"
    function yy_r247(){
	$chain = array();
	$chain[] = array(
		'prop' => $this->yystack[$this->yyidx + -2]->minor,
		'args' => $this->yystack[$this->yyidx + -1]->minor
	);
	$this->_retvalue = $this->state->handle_object_prop_chain($this->yystack[$this->yyidx + -4]->minor,array_merge($chain,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5524 "src/engine/stmtparser.php"
#line 721 "src/engine/stmtparser.y"
    function yy_r249(){
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5530 "src/engine/stmtparser.php"
#line 727 "src/engine/stmtparser.y"
    function yy_r251(){
	$this->_retvalue = array(
		'prop' => $this->yystack[$this->yyidx + -1]->minor,
		'args' => $this->yystack[$this->yyidx + 0]->minor
	);
    }
#line 5538 "src/engine/stmtparser.php"
#line 738 "src/engine/stmtparser.y"
    function yy_r255(){
	$this->_retvalue = new PC_Obj_Variable('');
    }
#line 5543 "src/engine/stmtparser.php"
#line 743 "src/engine/stmtparser.y"
    function yy_r256(){
	$this->_retvalue = $this->state->handle_field_access($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5548 "src/engine/stmtparser.php"
#line 748 "src/engine/stmtparser.y"
    function yy_r258(){
	$this->_retvalue = array();
    }
#line 5553 "src/engine/stmtparser.php"
#line 752 "src/engine/stmtparser.y"
    function yy_r259(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = array('array',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5559 "src/engine/stmtparser.php"
#line 756 "src/engine/stmtparser.y"
    function yy_r260(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = array('simple',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5565 "src/engine/stmtparser.php"
#line 760 "src/engine/stmtparser.y"
    function yy_r261(){
	$this->_retvalue = array(array('simple',$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5570 "src/engine/stmtparser.php"
#line 764 "src/engine/stmtparser.y"
    function yy_r262(){
	$this->_retvalue = new PC_Obj_Variable('',PC_Obj_MultiType::create_string(substr($this->yystack[$this->yyidx + 0]->minor,1)));
    }
#line 5575 "src/engine/stmtparser.php"
#line 775 "src/engine/stmtparser.y"
    function yy_r267(){ /* TODO */ $this->_retvalue = null;     }
#line 5578 "src/engine/stmtparser.php"
#line 778 "src/engine/stmtparser.y"
    function yy_r269(){
	$this->_retvalue = $this->state->handle_array_access($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5583 "src/engine/stmtparser.php"
#line 781 "src/engine/stmtparser.y"
    function yy_r270(){
	// TODO
	$this->_retvalue = new PC_Obj_Variable('');
    }
#line 5589 "src/engine/stmtparser.php"
#line 789 "src/engine/stmtparser.y"
    function yy_r272(){
	$this->_retvalue = $this->state->get_var(substr($this->yystack[$this->yyidx + 0]->minor,1));
    }
#line 5594 "src/engine/stmtparser.php"
#line 792 "src/engine/stmtparser.y"
    function yy_r273(){
	if(($str = $this->yystack[$this->yyidx + -1]->minor->get_type()->get_string()) !== null)
		$this->_retvalue = $this->state->get_var($str);
	else
		$this->_retvalue = new PC_Obj_Variable('');
    }
#line 5602 "src/engine/stmtparser.php"
#line 803 "src/engine/stmtparser.y"
    function yy_r277(){
	$this->_retvalue = array(array('type' => 'name','data' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5607 "src/engine/stmtparser.php"
#line 807 "src/engine/stmtparser.y"
    function yy_r278(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = array('type' => 'array','data' => $this->yystack[$this->yyidx + -1]->minor);
    }
#line 5613 "src/engine/stmtparser.php"
#line 819 "src/engine/stmtparser.y"
    function yy_r281(){
	$this->_retvalue = PC_Obj_Variable::create_string($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5618 "src/engine/stmtparser.php"
#line 838 "src/engine/stmtparser.y"
    function yy_r291(){ $this->_retvalue = PC_Obj_Variable::create_array();     }
#line 5621 "src/engine/stmtparser.php"
#line 857 "src/engine/stmtparser.y"
    function yy_r296(){
	$this->_retvalue = $this->yystack[$this->yyidx + -5]->minor;
	$this->_retvalue->get_type()->array_insert($this->yystack[$this->yyidx + -3]->minor->get_type(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5627 "src/engine/stmtparser.php"
#line 861 "src/engine/stmtparser.y"
    function yy_r297(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue->get_type()->array_insert(null,$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5633 "src/engine/stmtparser.php"
#line 865 "src/engine/stmtparser.y"
    function yy_r298(){
	$this->_retvalue = PC_Obj_Variable::create_array();
	$this->_retvalue->get_type()->array_insert($this->yystack[$this->yyidx + -3]->minor->get_type(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5639 "src/engine/stmtparser.php"
#line 898 "src/engine/stmtparser.y"
    function yy_r319(){
	// TODO evaluate?
	$this->_retvalue = PC_Obj_Variable::create_bool();
    }
#line 5645 "src/engine/stmtparser.php"
#line 906 "src/engine/stmtparser.y"
    function yy_r321(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_MultiType());
    }
#line 5650 "src/engine/stmtparser.php"
#line 925 "src/engine/stmtparser.y"
    function yy_r328(){
	$this->_retvalue = $this->state->handle_classconst_access($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5655 "src/engine/stmtparser.php"
#line 933 "src/engine/stmtparser.y"
    function yy_r330(){
	$fname = PC_Obj_Variable::create_string($this->yystack[$this->yyidx + -3]->minor);
	$this->_retvalue = $this->state->add_call(null,$fname,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5661 "src/engine/stmtparser.php"
#line 938 "src/engine/stmtparser.y"
    function yy_r331(){
	$fname = PC_Obj_Variable::create_string($this->yystack[$this->yyidx + -3]->minor);
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -5]->minor,$fname,$this->yystack[$this->yyidx + -1]->minor,true);
    }
#line 5667 "src/engine/stmtparser.php"
#line 943 "src/engine/stmtparser.y"
    function yy_r332(){
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -5]->minor,$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor,true);
    }
#line 5672 "src/engine/stmtparser.php"
#line 946 "src/engine/stmtparser.y"
    function yy_r333(){
	$this->_retvalue = $this->state->add_call(null,$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5677 "src/engine/stmtparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //PC_Stmt_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new PC_Stmt_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 4 "src/engine/stmtparser.y"

    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
		throw new PC_Engine_Exception(
			$this->state->get_file(),$this->state->get_line(),$this->tokenName($yymajor),$TOKEN,$expect
		);
#line 5798 "src/engine/stmtparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new PC_Stmt_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}