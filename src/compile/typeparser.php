<?php
/* Driver template for the PHP_PC_Type_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class PC_Type_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof PC_Type_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof PC_Type_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof PC_Type_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof PC_Type_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class PC_Type_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "src/compile/typeparser.y"
class PC_Compile_TypeParser#line 102 "src/compile/typeparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 18 "src/compile/typeparser.y"

		// current state, i.e. the function, class and variables in scope
		private $state;
		
		public $transTable = array();

    function __construct($state)
    {
				$this->state = $state;
				if(!count($this->transTable))
				{
					$start = 240; // start nice and low to be sure
					while(token_name($start) == 'UNKNOWN')
						$start++;
					$hash = array_flip(self::$yyTokenName);
					$map = array(
						ord(',') => self::COMMA,
						ord('=') => self::EQUALS,
						ord('?') => self::QUESTION,
						ord(':') => self::COLON,
						ord('|') => self::BAR,
						ord('^') => self::CARAT,
						ord('&') => self::AMPERSAND,
						ord('<') => self::LESSTHAN,
						ord('>') => self::GREATERTHAN,
						ord('+') => self::PLUS,
						ord('-') => self::MINUS,
						ord('.') => self::DOT,
						ord('*') => self::TIMES,
						ord('/') => self::DIVIDE,
						ord('%') => self::PERCENT,
						ord('!') => self::EXCLAM,
						ord('~') => self::TILDE,
						ord('@') => self::AT,
						ord('[') => self::LBRACKET,
						ord('(') => self::LPAREN,
						ord(')') => self::RPAREN,
						ord(';') => self::SEMI,
						ord('{') => self::LCURLY,
						ord('}') => self::RCURLY,
						ord('`') => self::BACKQUOTE,
						ord('$') => self::DOLLAR,
						ord(']') => self::RBRACKET,
						ord('"') => self::DOUBLEQUOTE,
						ord("'") => self::SINGLEQUOTE,
					);
					for($i = $start; $i < self::YYERRORSYMBOL + $start; $i++)
					{
						$lt = token_name($i);
            $lt = ($lt == 'T_ML_COMMENT') ? 'T_COMMENT' : $lt;
						$lt = ($lt == 'T_DOUBLE_COLON') ?  'T_PAAMAYIM_NEKUDOTAYIM' : $lt;
						if(!isset($hash[$lt]))
							continue;
		
						$map[$i] = $hash[$lt];
					}
					$this->transTable = $map;
				}
    }
#line 167 "src/compile/typeparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_INCLUDE                      =  1;
    const T_INCLUDE_ONCE                 =  2;
    const T_EVAL                         =  3;
    const T_REQUIRE                      =  4;
    const T_REQUIRE_ONCE                 =  5;
    const COMMA                          =  6;
    const T_LOGICAL_OR                   =  7;
    const T_LOGICAL_XOR                  =  8;
    const T_LOGICAL_AND                  =  9;
    const T_PRINT                        = 10;
    const EQUALS                         = 11;
    const T_PLUS_EQUAL                   = 12;
    const T_MINUS_EQUAL                  = 13;
    const T_MUL_EQUAL                    = 14;
    const T_DIV_EQUAL                    = 15;
    const T_CONCAT_EQUAL                 = 16;
    const T_MOD_EQUAL                    = 17;
    const T_AND_EQUAL                    = 18;
    const T_OR_EQUAL                     = 19;
    const T_XOR_EQUAL                    = 20;
    const T_SL_EQUAL                     = 21;
    const T_SR_EQUAL                     = 22;
    const QUESTION                       = 23;
    const COLON                          = 24;
    const T_BOOLEAN_OR                   = 25;
    const T_BOOLEAN_AND                  = 26;
    const BAR                            = 27;
    const CARAT                          = 28;
    const AMPERSAND                      = 29;
    const T_IS_EQUAL                     = 30;
    const T_IS_NOT_EQUAL                 = 31;
    const T_IS_IDENTICAL                 = 32;
    const T_IS_NOT_IDENTICAL             = 33;
    const LESSTHAN                       = 34;
    const T_IS_SMALLER_OR_EQUAL          = 35;
    const GREATERTHAN                    = 36;
    const T_IS_GREATER_OR_EQUAL          = 37;
    const T_SL                           = 38;
    const T_SR                           = 39;
    const PLUS                           = 40;
    const MINUS                          = 41;
    const DOT                            = 42;
    const TIMES                          = 43;
    const DIVIDE                         = 44;
    const PERCENT                        = 45;
    const EXCLAM                         = 46;
    const T_INSTANCEOF                   = 47;
    const TILDE                          = 48;
    const T_INC                          = 49;
    const T_DEC                          = 50;
    const T_INT_CAST                     = 51;
    const T_DOUBLE_CAST                  = 52;
    const T_STRING_CAST                  = 53;
    const T_ARRAY_CAST                   = 54;
    const T_OBJECT_CAST                  = 55;
    const T_BOOL_CAST                    = 56;
    const T_UNSET_CAST                   = 57;
    const AT                             = 58;
    const LBRACKET                       = 59;
    const T_NEW                          = 60;
    const T_CLONE                        = 61;
    const T_ELSEIF                       = 62;
    const T_ELSE                         = 63;
    const T_ENDIF                        = 64;
    const T_STATIC                       = 65;
    const T_ABSTRACT                     = 66;
    const T_FINAL                        = 67;
    const T_PRIVATE                      = 68;
    const T_PROTECTED                    = 69;
    const T_PUBLIC                       = 70;
    const T_HALT_COMPILER                = 71;
    const LPAREN                         = 72;
    const RPAREN                         = 73;
    const SEMI                           = 74;
    const LCURLY                         = 75;
    const RCURLY                         = 76;
    const T_IF                           = 77;
    const T_WHILE                        = 78;
    const T_DO                           = 79;
    const T_FOR                          = 80;
    const T_SWITCH                       = 81;
    const T_BREAK                        = 82;
    const T_CONTINUE                     = 83;
    const T_RETURN                       = 84;
    const T_GLOBAL                       = 85;
    const T_ECHO                         = 86;
    const T_INLINE_HTML                  = 87;
    const T_USE                          = 88;
    const T_UNSET                        = 89;
    const T_FOREACH                      = 90;
    const T_AS                           = 91;
    const T_DECLARE                      = 92;
    const T_TRY                          = 93;
    const T_CATCH                        = 94;
    const T_VARIABLE                     = 95;
    const T_THROW                        = 96;
    const T_FUNCTION                     = 97;
    const T_STRING                       = 98;
    const T_CLASS                        = 99;
    const T_EXTENDS                      = 100;
    const T_INTERFACE                    = 101;
    const T_IMPLEMENTS                   = 102;
    const T_LIST                         = 103;
    const T_EXIT                         = 104;
    const T_ARRAY                        = 105;
    const BACKQUOTE                      = 106;
    const T_LNUMBER                      = 107;
    const T_DNUMBER                      = 108;
    const T_CONSTANT_ENCAPSED_STRING     = 109;
    const T_LINE                         = 110;
    const T_FILE                         = 111;
    const T_CLASS_C                      = 112;
    const T_METHOD_C                     = 113;
    const T_FUNC_C                       = 114;
    const T_DOUBLE_ARROW                 = 115;
    const T_PAAMAYIM_NEKUDOTAYIM         = 116;
    const T_ENDFOR                       = 117;
    const T_ENDFOREACH                   = 118;
    const T_ENDDECLARE                   = 119;
    const T_ENDSWITCH                    = 120;
    const T_CASE                         = 121;
    const T_DEFAULT                      = 122;
    const T_ENDWHILE                     = 123;
    const DOLLAR                         = 124;
    const T_VAR                          = 125;
    const T_CONST                        = 126;
    const T_OBJECT_OPERATOR              = 127;
    const RBRACKET                       = 128;
    const T_NUM_STRING                   = 129;
    const T_ENCAPSED_AND_WHITESPACE      = 130;
    const T_CHARACTER                    = 131;
    const T_BAD_CHARACTER                = 132;
    const T_DOLLAR_OPEN_CURLY_BRACES     = 133;
    const T_STRING_VARNAME               = 134;
    const T_CURLY_OPEN                   = 135;
    const T_ISSET                        = 136;
    const T_EMPTY                        = 137;
    const DOUBLEQUOTE                    = 138;
    const SINGLEQUOTE                    = 139;
    const T_START_HEREDOC                = 140;
    const T_END_HEREDOC                  = 141;
    const YY_NO_ACTION = 1058;
    const YY_ACCEPT_ACTION = 1057;
    const YY_ERROR_ACTION = 1056;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 10613;
static public $yy_action = array(
 /*     0 */    85,   86,  381,   91,   96,  663,  213,  514,   59,   89,
 /*    10 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*    20 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*    30 */   110,  675,  148,   80,  593,  669,  357,  182,  553,   53,
 /*    40 */    54,  376,  550,  351,  668,   55,  480,   52,  132,  139,
 /*    50 */    67,   65,   62,   63,   68,   51,   48,   49,   32,  149,
 /*    60 */   102,  359,  357,  182,  206,  451,  456,  393,  550,  198,
 /*    70 */   396,   66,  471,  664,  244,  508,  373,  439,   25,  458,
 /*    80 */   462,   47,   44,   46,  180,   36,  635,  195,  371,  365,
 /*    90 */   484,  421,  416,  331,  553,   79,  201,  354,  503,  550,
 /*   100 */   529,  632,  453,  223,  431,  239,  554,  548,  547,  546,
 /*   110 */   545,  549,  549,  549,  249,   85,   86,  381,   91,   96,
 /*   120 */   427,   82,  197,  393,   89,  493,  493,  493,  493,  493,
 /*   130 */   493,  645,  521,  580,  630,  387,  375,  228,  238,  240,
 /*   140 */    50,   61,   57,   60,  105,  101,  119,  111,  100,  108,
 /*   150 */   109,  110,  687,  148,   53,   54,  479,  931,  645,  627,
 /*   160 */    55,  630,   52,  132,  139,   67,   65,   62,   63,   68,
 /*   170 */    51,   48,   49,  344,  149,  102,  678,  357,  182,  206,
 /*   180 */   451,  456,  129,  550,  449,  396,   66,  407,  664,  244,
 /*   190 */   603,  373,  439,   25,  458,  462,   47,   44,   46,  180,
 /*   200 */    36,  635,  195,  371,  365,  214,  421,  416,  370,  553,
 /*   210 */    79,  201,  354,  503,   29,  529,  336,  453,  223,  431,
 /*   220 */   239,  554,  548,  547,  546,  545,  549,  549,  549,   38,
 /*   230 */    85,   86,  381,   91,   96, 1057,   14,  522,  393,   89,
 /*   240 */   349,  181,  565,  446,  517,   58,  550,   38,  580,  702,
 /*   250 */   387,  375,  228,  238,  240,  392,  677,  466, 1027,  553,
 /*   260 */   959,  236,  376,   58,  641,  669,  357,  182,  553,   53,
 /*   270 */    54,  445,  550,  351,  668,   55,  536,   52,  132,  139,
 /*   280 */    67,   65,   62,   63,   68,   51,   48,   49,  393,  149,
 /*   290 */   102,  425,   82,  197,  206,  451,  456,  393,  482,  222,
 /*   300 */   396,   66,  527,  664,  244,  418,  373,  439,   25,  458,
 /*   310 */   462,   47,   44,   46,  180,   36,  635,  195,  371,  365,
 /*   320 */   248,  421,  416,  428,  553,   79,  201,  354,  503,  168,
 /*   330 */   529,   27,  453,  223,  431,  239,  554,  548,  547,  546,
 /*   340 */   545,  549,  549,  549,  193,   85,   86,  381,   91,   96,
 /*   350 */   203,  141,  527,  393,   89,  119,  111,  100,  108,  109,
 /*   360 */   110,  697,  148,  580,  379,  387,  375,  228,  238,  240,
 /*   370 */   207,   33,  587,  586,  669,  357,  182,  645,  519,  541,
 /*   380 */   630,  550,  351,  668,   53,   54,  645,  512,  409,  630,
 /*   390 */    55,  497,   52,  132,  139,   67,   65,   62,   63,   68,
 /*   400 */    51,   48,   49,  525,  149,  102,   82,  197,  138,  206,
 /*   410 */   451,  456,  694,  384,  338,  396,   66,  553,  664,  244,
 /*   420 */   376,  373,  439,   25,  458,  462,   47,   44,   46,  180,
 /*   430 */    36,  635,  195,  371,  365,  177,  421,  416,  171,  553,
 /*   440 */    79,  201,  354,  503,  893,  529,  393,  453,  223,  431,
 /*   450 */   239,  554,  548,  547,  546,  545,  549,  549,  549,  352,
 /*   460 */   499,  211,  369,  340,  358,  550,  191,  492,  393,  522,
 /*   470 */    85,   86,  381,   91,   96,  367,  517,  209,  580,   89,
 /*   480 */   387,  375,  228,  238,  240,  118,  115,  120,  121,  117,
 /*   490 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*   500 */   111,  100,  108,  109,  110,  562,  148,  448,  562,   53,
 /*   510 */    54,  645,  531,  505,  630,   55,  192,   52,  132,  139,
 /*   520 */    67,   65,   62,   63,   68,   51,   48,   49,  485,  149,
 /*   530 */   102,  360,  384,  338,  206,  451,  456,  129,  125,  562,
 /*   540 */   396,   66,  407,  664,  244,  179,  373,  439,   25,  458,
 /*   550 */   462,   47,   44,   46,  180,   36,  635,  195,  371,  365,
 /*   560 */   217,  421,  416,  478,  553,   79,  201,  354,  503,  602,
 /*   570 */   529,  569,  453,  223,  431,  239,  554,  548,  547,  546,
 /*   580 */   545,  549,  549,  549,  435,   85,   86,  381,   91,   96,
 /*   590 */   502,  464,  403,  393,   89,  349,  181,  565,  446,  645,
 /*   600 */   495,  550,  630,  580,  459,  387,  375,  228,  238,  240,
 /*   610 */   169,  677,  108,  109,  110,  208,  148,  553,  666,  669,
 /*   620 */   357,  182,  385,  347,   53,   54,  550,  351,  668,  550,
 /*   630 */    55,  642,   52,  132,  139,   67,   65,   62,   63,   68,
 /*   640 */    51,   48,   49,  567,  149,  102,  364,  130,  491,  206,
 /*   650 */   451,  456,  146,  534,  237,  396,   66,  407,  664,  244,
 /*   660 */   707,  373,  439,   25,  458,  462,   47,   44,   46,  180,
 /*   670 */    36,  635,  195,  371,  365,  605,  421,  416,  553,  553,
 /*   680 */    79,  201,  354,  503,  538,  529,   41,  453,  223,  431,
 /*   690 */   239,  554,  548,  547,  546,  545,  549,  549,  549,   37,
 /*   700 */    85,   86,  381,   91,   96,  437,   23,  393,  393,   89,
 /*   710 */   349,  181,  565,  446,   81,   72,  550,  505,  580,  570,
 /*   720 */   387,  375,  228,  238,  240,   17,  677,  645,  390,  436,
 /*   730 */   630,  377,  467,  242,  553,  645,  643,  376,  630,   53,
 /*   740 */    54,  645,  629,  174,  630,   55,  150,   52,  132,  139,
 /*   750 */    67,   65,   62,   63,   68,   51,   48,   49,  594,  149,
 /*   760 */   102,  151,  140,  393,  206,  451,  456,  907,  334,  412,
 /*   770 */   396,   66,  553,  664,  244,  391,  373,  439,   25,  458,
 /*   780 */   462,   47,   44,   46,  180,   36,  635,  195,  371,  365,
 /*   790 */   147,  421,  416,  566,  553,   79,  201,  354,  503,  389,
 /*   800 */   529,  393,  453,  223,  431,  239,  554,  548,  547,  546,
 /*   810 */   545,  549,  549,  549,  645,  628,  400,  630,   85,   86,
 /*   820 */   381,   91,   96,  393,  698,  553,  553,   89,  376,  438,
 /*   830 */    70,  216,  346,  580,  907,  387,  375,  228,  238,  240,
 /*   840 */   645,  520,  166,  630,  645,  526,  372,  630,   38,  158,
 /*   850 */   553,  127,  476,  672,  393,  393,  671,   53,   54,  645,
 /*   860 */   524,  960,  630,   55,   58,   52,  132,  139,   67,   65,
 /*   870 */    62,   63,   68,   51,   48,   49,  910,  149,  102,  393,
 /*   880 */   646,   26,  206,  451,  456,  679,  680,   43,  396,   66,
 /*   890 */   518,  664,  244,   18,  373,  439,   25,  458,  462,   47,
 /*   900 */    44,   46,  180,   36,  635,  195,  371,  365,  145,  421,
 /*   910 */   416,  647,  553,   79,  201,  354,  503,   88,  529,   21,
 /*   920 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*   930 */   549,  549,  112,   85,   86,  381,   91,   96,  167,   35,
 /*   940 */   408,  393,   89,  910,  645,  540,   29,  630,  202,  645,
 /*   950 */   515,  580,  630,  387,  375,  228,  238,  240,   31,  645,
 /*   960 */   631,  160,  630,  645,  383,  633,  630,   78,  460,  361,
 /*   970 */   215,  106,   53,   54,  645,  637,  128,  630,   55,   76,
 /*   980 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*   990 */    49,  363,  149,  102,  537,  122,  576,  206,  451,  456,
 /*  1000 */   131,   77,  660,  396,   66,  157,  664,  244,  650,  373,
 /*  1010 */   439,   25,  458,  462,   47,   44,   46,  180,   36,  635,
 /*  1020 */   195,  371,  365,  611,  421,  416,  162,  553,   79,  201,
 /*  1030 */   354,  503,  533,  529,  429,  453,  223,  431,  239,  554,
 /*  1040 */   548,  547,  546,  545,  549,  549,  549,  468,   85,   86,
 /*  1050 */   381,   91,   96,  477,   90,   34,  393,   89,  488,  175,
 /*  1060 */   420,  220,  241,  581,  688,  156,  580,  172,  387,  375,
 /*  1070 */   228,  238,  240,  705,  511,  165,  173,   82,  197,  696,
 /*  1080 */   674,  161,  530,  667,  210,  601,  123,   53,   54,    8,
 /*  1090 */   414,  226,   11,   55,   10,   52,  132,  139,   67,   65,
 /*  1100 */    62,   63,   68,   51,   48,   49,  419,  149,  102,  219,
 /*  1110 */   196,  636,  206,  451,  456,  221,  563,  332,  396,   66,
 /*  1120 */   424,  664,  244,  401,  373,  439,   25,  458,  462,   47,
 /*  1130 */    44,   46,  180,   36,  635,  195,  371,  365,  513,  421,
 /*  1140 */   416,  406,  553,   79,  201,  354,  503,  415,  529,  626,
 /*  1150 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  1160 */   549,  549,  148,    7,  187,   71,  469,  178,   73,  413,
 /*  1170 */   561,  393,   20,   85,   86,  381,   91,   96,  190,  430,
 /*  1180 */   433,  580,   89,  387,  375,  228,  238,  240,  115,  120,
 /*  1190 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  1200 */   101,  119,  111,  100,  108,  109,  110,   13,  148,  507,
 /*  1210 */   335,  170,   53,   54,  224,  189,  188,    2,   55,   30,
 /*  1220 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  1230 */    49,  225,  149,  102,  155,    5,  432,  206,  451,  456,
 /*  1240 */    12,  417,  250,  396,   66,  204,  664,  244,   16,  373,
 /*  1250 */   439,   25,  458,  462,   47,   44,   46,  180,   36,  635,
 /*  1260 */   195,  371,  365,    1,  421,  416,    9,  553,   79,  201,
 /*  1270 */   354,  503,  644,  529,  227,  453,  223,  431,  239,  554,
 /*  1280 */   548,  547,  546,  545,  549,  549,  549,    4,   85,   86,
 /*  1290 */   381,   91,   96,   15,  543,    3,  393,   89,  159,  154,
 /*  1300 */     6,  501,  655,  184,  443,  532,  580,   64,  387,  375,
 /*  1310 */   228,  238,  240,   28,  231,  380,  386,  496,  152,  701,
 /*  1320 */   398,  589,  163,  124,  337,  447,  394,   53,   54,  397,
 /*  1330 */   422,  657,  194,   55,  330,   52,  132,  139,   67,   65,
 /*  1340 */    62,   63,   68,   51,   48,   49, 1027,  149,  102,  246,
 /*  1350 */   426,  625,  206,  451,  456,   39,  676,  243,  402,   66,
 /*  1360 */   153,  664,  244,  230,  373,  439,   25,  458,  462,   47,
 /*  1370 */    44,   46,  180,   36,  635,  195,  371,  365,  615,  421,
 /*  1380 */   416,  229,  553,   79,  201,  354,  503,  185,  529,  404,
 /*  1390 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  1400 */   549,  549,  434,  345,  245,  596,  596,  596,  596,  596,
 /*  1410 */   596,  393,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  1420 */   596,  580,   89,  387,  375,  228,  238,  240,  596,  596,
 /*  1430 */   596,  596,  596,  596,  596,  596,  247,   40,  104,   87,
 /*  1440 */    98,   95,   69,   92,   93,   84,   83,   74,   75,  596,
 /*  1450 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  1460 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  1470 */    49,  596,  149,  102,  596,  951,  951,  206,  596,  596,
 /*  1480 */   596,  596,  596,  596,   66,  596,  664,  244,  596,  373,
 /*  1490 */   439,   25,  458,  462,   47,   44,   46,  180,   36,  635,
 /*  1500 */   195,  371,  365,  596,  421,  416,  596,  553,   79,  596,
 /*  1510 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  1520 */   548,  547,  546,  545,  549,  549,  549,  596,  596,  596,
 /*  1530 */   596,  596,  596,  596,  596,  596,  393,  596,   85,   86,
 /*  1540 */   381,   91,   96,  596,  596,  596,  580,   89,  387,  375,
 /*  1550 */   228,  238,  240,  596,  596,  596,  596,  596,  596,  596,
 /*  1560 */   596,  234,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1570 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  1580 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  1590 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  1600 */   596,  596,  206,  596,  596,  596,  596,  596,  596,   66,
 /*  1610 */   596,  664,  244,  596,  373,  439,   25,  458,  462,   47,
 /*  1620 */    44,   46,  180,   36,  635,  195,  371,  365,  596,  421,
 /*  1630 */   416,  596,  553,   79,  596,  354,  596,  596,  596,  596,
 /*  1640 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  1650 */   549,  549,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1660 */   596,  393,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  1670 */   596,  580,   89,  387,  375,  228,  238,  240,  596,  596,
 /*  1680 */   596,  596,  596,  596,  596,  596,  251,  596,  596,  596,
 /*  1690 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1700 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  1710 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  1720 */    49,  596,  149,  102,  596,  596,  596,  206,  596,  596,
 /*  1730 */   596,  596,  596,  596,   66,  596,  664,  244,  596,  373,
 /*  1740 */   439,   25,  458,  462,   47,   44,   46,  180,   36,  635,
 /*  1750 */   195,  371,  365,  596,  421,  416,  596,  553,   79,  596,
 /*  1760 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  1770 */   548,  547,  546,  545,  549,  549,  549,  596,  596,  596,
 /*  1780 */   596,  596,  596,  596,  596,  596,  393,  596,   85,   86,
 /*  1790 */   381,   91,   96,  596,  596,  596,  580,   89,  387,  375,
 /*  1800 */   228,  238,  240,  596,  596,  596,  596,  596,  596,  596,
 /*  1810 */   596,  235,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1820 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  1830 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  1840 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  1850 */   596,  596,  206,  596,  596,  596,  596,  596,  596,   66,
 /*  1860 */   596,  664,  244,  596,  373,  439,   25,  458,  462,   47,
 /*  1870 */    44,   46,  180,   36,  635,  195,  371,  365,  596,  421,
 /*  1880 */   416,  596,  553,   79,  596,  354,  596,  596,  596,  596,
 /*  1890 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  1900 */   549,  549,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1910 */   596,  393,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  1920 */   596,  580,   89,  387,  375,  228,  238,  240,  596,  596,
 /*  1930 */   596,  596,  596,  596,  596,  596,  233,  596,  596,  596,
 /*  1940 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  1950 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  1960 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  1970 */    49,  596,  149,  102,  596,  596,  596,  206,  596,  596,
 /*  1980 */   596,  596,  596,  596,   66,  596,  664,  244,  596,  373,
 /*  1990 */   439,   25,  458,  462,   47,   44,   46,  180,   36,  635,
 /*  2000 */   195,  371,  365,  596,  421,  416,  596,  553,   79,  596,
 /*  2010 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  2020 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  2030 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  2040 */   596,  596,  596,  596,  596,  596,  580,  596,  387,  375,
 /*  2050 */   228,  238,  240,  596,  596,  596,  596,  596,  596,  596,
 /*  2060 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  2070 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  2080 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  2090 */   596,  596,  206,  596,  596,  596,  596,  596,  596,   66,
 /*  2100 */   596,  664,  244,  596,  373,  439,   25,  458,  462,   47,
 /*  2110 */    44,   46,  180,   36,  635,  195,  371,  365,  596,  421,
 /*  2120 */   416,  596,  553,   79,  596,  354,  596,  596,  596,  596,
 /*  2130 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  2140 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  2150 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  2160 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  2170 */   596,  142,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  2180 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  2190 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  2200 */    49,  596,  149,  102,  493,  493,  493,  493,  493,  493,
 /*  2210 */   596,  596,  596,  596,   66,  500,  116,  118,  115,  120,
 /*  2220 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  2230 */   101,  119,  111,  100,  108,  109,  110,  553,  148,  596,
 /*  2240 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  2250 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  2260 */   381,   91,   96,  596,  494,  475,  393,   89,  596,  596,
 /*  2270 */   596,  596,  596,  596,  596,  596,  580,  596,  387,  375,
 /*  2280 */   228,  238,  240,  596,  596,  596,  135,  596,  596,  596,
 /*  2290 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  2300 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  2310 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  493,
 /*  2320 */   493,  493,  493,  493,  493,  596,  596,  596,  596,   66,
 /*  2330 */   504,  596,  120,  121,  117,   94,  103,  114,   50,   61,
 /*  2340 */    57,   60,  105,  101,  119,  111,  100,  108,  109,  110,
 /*  2350 */   596,  148,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  2360 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  2370 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  494,
 /*  2380 */   475,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  2390 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  2400 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  2410 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  2420 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  2430 */    49,  596,  149,  102,  596,  596,  596,  596,  596,  596,
 /*  2440 */   596,  596,  596,  596,   66,  685,  596,  596,  121,  117,
 /*  2450 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*  2460 */   111,  100,  108,  109,  110,  596,  148,  553,  596,  596,
 /*  2470 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  2480 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  2490 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  2500 */   596,  596,  596,  596,  596,  596,  580,  596,  387,  375,
 /*  2510 */   228,  238,  240,  596,  596,  596,  143,  596,  596,  596,
 /*  2520 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  2530 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  2540 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  2550 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   66,
 /*  2560 */   596,  596,  596,  596,  117,   94,  103,  114,   50,   61,
 /*  2570 */    57,   60,  105,  101,  119,  111,  100,  108,  109,  110,
 /*  2580 */   596,  148,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  2590 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  2600 */   549,  549,  596,   85,   86,  381,   91,   96,  176,  164,
 /*  2610 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  2620 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  2630 */   596,  133,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  2640 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  2650 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  2660 */    49,  596,  149,  102,  596,  596,  441,  596,  596,  596,
 /*  2670 */   596,  596,  596,  378,   66,  554,  548,  547,  546,  545,
 /*  2680 */   549,  549,  549,  596,  596,  596,  596,  596,  596,  596,
 /*  2690 */   596,  596,  596,  596,  596,  596,  596,  553,  596,  596,
 /*  2700 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  2710 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  2720 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  2730 */   596,  596,  596,  596,  596,  596,  580,  577,  387,  375,
 /*  2740 */   228,  238,  240,  539,  596,  596,  542,  596,  596,  388,
 /*  2750 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  2760 */   596,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  2770 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  2780 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   66,
 /*  2790 */   596,  693,  596,  596,  596,  596,  489,  596,  596,  596,
 /*  2800 */   596,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /*  2810 */   596,  596,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  2820 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  2830 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  2840 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  2850 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  2860 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  2870 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  2880 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  2890 */    49,  596,  149,  102,  596,  596,  596,  596,  596,  596,
 /*  2900 */   596,  596,  596,  596,   66,  596,  689,  596,  596,  596,
 /*  2910 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  2920 */   596,  596,  596,  596,  596,  596,  596,  553,  596,  596,
 /*  2930 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  2940 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  2950 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  2960 */   596,  596,  596,  699,  596,  596,  580,  596,  387,  375,
 /*  2970 */   228,  238,  240,  596,  596,  388,  137,  596,  596,  596,
 /*  2980 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  2990 */   596,  596,  341,   55,  596,   52,  132,  139,   67,   65,
 /*  3000 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  3010 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   66,
 /*  3020 */   596,  596,  489,  596,  596,  596,  596,  382,  333,  183,
 /*  3030 */   565,  551,  564,  596,  550,  596,  596,  703,  596,  596,
 /*  3040 */   596,  596,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  3050 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  3060 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  3070 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  3080 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  3090 */   596,  134,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3100 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  3110 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  3120 */    49,  596,  149,  102,  596,  596,  596,  596,  596,  596,
 /*  3130 */   596,  596,  596,  596,   66,  596,  596,  596,  596,  596,
 /*  3140 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3150 */   596,  596,  596,  596,  596,  596,  596,  553,  596,  596,
 /*  3160 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  3170 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  3180 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  3190 */   596,  699,  596,  596,  596,  596,  580,  596,  387,  375,
 /*  3200 */   228,  238,  240,  388,  596,  596,  136,  596,  596,  596,
 /*  3210 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  3220 */   343,  596,  596,   55,  596,   52,  132,  139,   67,   65,
 /*  3230 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  3240 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   66,
 /*  3250 */   489,  596,  596,  596,  596,  382,  333,  183,  565,  551,
 /*  3260 */   564,  596,  550,  596,  596,  703,  596,  596,  596,  596,
 /*  3270 */   596,  596,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  3280 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  3290 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  3300 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  3310 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  3320 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3330 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  3340 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  3350 */    49,  596,  149,  102,  596,  596,  596,  596,  596,  596,
 /*  3360 */   596,  596,  596,  596,   66,  596,  691,  596,  596,  596,
 /*  3370 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3380 */   596,  596,  596,  596,  596,  596,  596,  553,  596,  596,
 /*  3390 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  3400 */   548,  547,  546,  545,  549,  549,  549,  596,   85,   86,
 /*  3410 */   381,   91,   96,  596,  596,  596,  393,   89,  596,  596,
 /*  3420 */   596,  596,  591,  596,  596,  596,  580,  596,  387,  375,
 /*  3430 */   228,  238,  240,  596,  388,  596,  596,  596,  596,  596,
 /*  3440 */   596,  596,  596,  596,  596,  596,  596,   53,   54,  596,
 /*  3450 */   596,  596,  596,   55,  592,   52,  132,  139,   67,   65,
 /*  3460 */    62,   63,   68,   51,   48,   49,  596,  149,  102,  596,
 /*  3470 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   66,
 /*  3480 */   596,  489,  596,  596,  596,  596,  382,  333,  183,  565,
 /*  3490 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  3500 */   596,  596,  553,  596,  596,  354,  596,  596,  596,  596,
 /*  3510 */   453,  223,  431,  239,  554,  548,  547,  546,  545,  549,
 /*  3520 */   549,  549,  596,   85,   86,  381,   91,   96,  596,  596,
 /*  3530 */   596,  393,   89,  596,  596,  596,  596,  596,  596,  596,
 /*  3540 */   596,  580,  596,  387,  375,  228,  238,  240,  596,  596,
 /*  3550 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3560 */   596,  596,   53,   54,  596,  596,  596,  596,   55,  596,
 /*  3570 */    52,  132,  139,   67,   65,   62,   63,   68,   51,   48,
 /*  3580 */    49,  596,  149,  102,  596,  596,  596,  596,  596,  596,
 /*  3590 */   596,  596,  596,  596,   66,  596,  596,  596,  596,  596,
 /*  3600 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3610 */   596,  596,  596,  596,  596,  596,  596,  553,  596,  596,
 /*  3620 */   354,  596,  596,  596,  596,  453,  223,  431,  239,  554,
 /*  3630 */   548,  547,  546,  545,  549,  549,  549,  596,  596,  596,
 /*  3640 */   596,  596,  596,  596,  596,  596,  393,  596,  596,  648,
 /*  3650 */   651,  652,  604,  596,  255,  596,  440,  199,  387,  375,
 /*  3660 */   228,  238,  240,  595,  318,  596,  596,  596,  596,  596,
 /*  3670 */   596,  596,  596,  596,  596,  596,  368,  596,  596,  596,
 /*  3680 */   649,  654,  653,  596,  596,  450,  596,  596,  596,  461,
 /*  3690 */   596,  596,  596,  596,  596,  596,  348,  618,  596,  607,
 /*  3700 */   596,  596,  582,  596,   40,  104,   87,   98,   95,   69,
 /*  3710 */    92,   93,   84,   83,   74,   75,  596,  596,  596,  596,
 /*  3720 */   596,  596,  596,  489,  596,  596,  596,  596,  382,  333,
 /*  3730 */   183,  565,  551,  564,  596,  550,   99,  113,  107,  596,
 /*  3740 */   596,  596,  951,  951,  583,  596,  596,  596,  596,  596,
 /*  3750 */   596,  596,   59,  527,  116,  118,  115,  120,  121,  117,
 /*  3760 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*  3770 */   111,  100,  108,  109,  110,  596,  148,  596,  596,  596,
 /*  3780 */   596,  596,  596,  596,  126,  596,  596,  596,  596,  558,
 /*  3790 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3800 */   596,  596,  596,  527,  596,  556,  559,  596,  577,  596,
 /*  3810 */   596,   99,  113,  107,  212,  596,  596,  542,  596,  596,
 /*  3820 */   388,  596,  596,  596,  596,  353,  596,   59,  614,  116,
 /*  3830 */   118,  115,  120,  121,  117,   94,  103,  114,   50,   61,
 /*  3840 */    57,   60,  105,  101,  119,  111,  100,  108,  109,  110,
 /*  3850 */   596,  148,  596,  596,  596,  596,  596,  560,  557,  613,
 /*  3860 */   612,  585,  584,   97,  596,  144,  596,  489,  596,  574,
 /*  3870 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  3880 */   673,  596,  596,  596,  596,  596,  596,  596,   99,  113,
 /*  3890 */   107,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  3900 */   596,  596,  596,  596,   59,  596,  116,  118,  115,  120,
 /*  3910 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  3920 */   101,  119,  111,  100,  108,  109,  110,  596,  148,  596,
 /*  3930 */   596,  596,  596,  596,  596,  596,  596,  596,   40,  104,
 /*  3940 */    87,   98,   95,   69,   92,   93,   84,   83,   74,   75,
 /*  3950 */   596,  596,  596,  596,   24,  596,  596,  596,  596,  596,
 /*  3960 */   596,  596,   99,  113,  107,  596,  596,  596,  596,  596,
 /*  3970 */   596,  596,  596,  596,  596,  596,  951,  951,   59,  596,
 /*  3980 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  3990 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  4000 */   110,  695,  148,  596,  596,  596,  596,  596,  596,  558,
 /*  4010 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4020 */   596,  596,  596,  596,  596,  556,  559,  596,  579,  596,
 /*  4030 */   596,  596,  596,  596,  596,  596,   99,  113,  107,  596,
 /*  4040 */   596,  596,  596,  596,  596,  353,  596,  596,  614,  596,
 /*  4050 */   596,  596,   59,  596,  116,  118,  115,  120,  121,  117,
 /*  4060 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*  4070 */   111,  100,  108,  109,  110,  596,  148,  560,  557,  613,
 /*  4080 */   612,  585,  584,   97,  596,  144,  558,  596,  575,  596,
 /*  4090 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4100 */   596,  596,  556,  559,  596,  552,  658,  596,  596,  596,
 /*  4110 */   596,  342,  596,   99,  113,  107,  596,  596,  388,  596,
 /*  4120 */   596,  596,  353,  596,  596,  614,  596,  596,  596,   59,
 /*  4130 */   596,  116,  118,  115,  120,  121,  117,   94,  103,  114,
 /*  4140 */    50,   61,   57,   60,  105,  101,  119,  111,  100,  108,
 /*  4150 */   109,  110,  596,  148,  560,  557,  613,  612,  585,  584,
 /*  4160 */    97,  596,  144,  596,  661,  489,  596,  596,  568,  596,
 /*  4170 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  4180 */   656,  596,  596,  596,  596,  596,  596,  596,   99,  113,
 /*  4190 */   107,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4200 */   596,  596,  596,  596,   59,  596,  116,  118,  115,  120,
 /*  4210 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  4220 */   101,  119,  111,  100,  108,  109,  110,  596,  148,  596,
 /*  4230 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4240 */   596,  596,  596,  596,  638,  596,  596,  596,  596,  596,
 /*  4250 */   596,  596,  596,  596,  200,  596,  388,  596,  596,  596,
 /*  4260 */   596,  596,   99,  113,  107,  596,  596,  596,  596,  596,
 /*  4270 */   596,  596,  640,  596,  596,  596,  596,  596,   59,  596,
 /*  4280 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  4290 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  4300 */   110,  596,  148,  489,  596,  596,  596,  596,  382,  333,
 /*  4310 */   183,  565,  551,  564,  596,  550,  596,  596,  699,  596,
 /*  4320 */   596,  596,  596,  596,  596,  596,  596,  596,   19,  596,
 /*  4330 */   388,  596,  572,  596,  596,  596,   99,  113,  107,  596,
 /*  4340 */   596,  596,  596,  596,  388,  596,  596,  596,  596,  596,
 /*  4350 */   596,  596,   59,  596,  116,  118,  115,  120,  121,  117,
 /*  4360 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*  4370 */   111,  100,  108,  109,  110,  596,  148,  489,  596,  596,
 /*  4380 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  4390 */   596,  489,  700,  596,  596,  596,  382,  333,  183,  565,
 /*  4400 */   551,  564,  596,  550,  596,  639,  596,  596,  596,  596,
 /*  4410 */   596,  356,  596,   99,  113,  107,  596,  596,  596,  596,
 /*  4420 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   59,
 /*  4430 */   596,  116,  118,  115,  120,  121,  117,   94,  103,  114,
 /*  4440 */    50,   61,   57,   60,  105,  101,  119,  111,  100,  108,
 /*  4450 */   109,  110,  908,  148,   99,  113,  107,   40,  104,   87,
 /*  4460 */    98,   95,   69,   92,   93,   84,   83,   74,   75,  596,
 /*  4470 */    59,  596,  116,  118,  115,  120,  121,  117,   94,  103,
 /*  4480 */   114,   50,   61,   57,   60,  105,  101,  119,  111,  100,
 /*  4490 */   108,  109,  110,  596,  148,  951,  951,  596,  596,  596,
 /*  4500 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4510 */   596,  596,  596,  596,  577,  596,  596,  596,  596,  908,
 /*  4520 */   619,  596,  596,  535,  596,  474,  388,  596,   99,  113,
 /*  4530 */   107,  596,  596,  596,  442,  596,  596,  388,  596,  596,
 /*  4540 */   596,  596,  596,  596,   59,  596,  116,  118,  115,  120,
 /*  4550 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  4560 */   101,  119,  111,  100,  108,  109,  110,  596,  148,  596,
 /*  4570 */   596,  596,  596,  489,  596,  596,  596,  596,  382,  333,
 /*  4580 */   183,  565,  551,  564,  489,  550,  596,  596,  596,  382,
 /*  4590 */   333,  183,  565,  551,  564,  634,  550,  577,  596,  596,
 /*  4600 */   596,  596,  596,   99,  113,  107,  578,  596,  596,  388,
 /*  4610 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   59,
 /*  4620 */   596,  116,  118,  115,  120,  121,  117,   94,  103,  114,
 /*  4630 */    50,   61,   57,   60,  105,  101,  119,  111,  100,  108,
 /*  4640 */   109,  110,  596,  148,  596,  596,  596,  596,  596,  596,
 /*  4650 */   596,  596,  596,  596,  596,  596,  489,  596,  596,  596,
 /*  4660 */   596,  382,  333,  183,  565,  551,  564,  596,  550,  457,
 /*  4670 */   596,  596,  596,  596,  596,  596,  596,   99,  113,  107,
 /*  4680 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4690 */   596,  596,  596,   59,  596,  116,  118,  115,  120,  121,
 /*  4700 */   117,   94,  103,  114,   50,   61,   57,   60,  105,  101,
 /*  4710 */   119,  111,  100,  108,  109,  110,  596,  148,  596,  596,
 /*  4720 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4730 */   596,  596,  596,  596,  596,  658,  596,  596,  596,  596,
 /*  4740 */   596,  596,  596,  596,  692,  596,  544,  388,  596,  596,
 /*  4750 */   596,  596,   99,  113,  107,  596,  596,  596,  388,  596,
 /*  4760 */   596,  596,  596,  596,  596,  596,  596,  596,   59,  596,
 /*  4770 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  4780 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  4790 */   110,  596,  148,  659,  489,  596,  596,  596,  596,  382,
 /*  4800 */   333,  183,  565,  551,  564,  489,  550,  596,  596,  596,
 /*  4810 */   382,  333,  183,  565,  551,  564,  596,  550,   22,  596,
 /*  4820 */   596,  596,  596,  596,  596,  596,   99,  113,  107,  596,
 /*  4830 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4840 */   596,  596,   59,   56,  116,  118,  115,  120,  121,  117,
 /*  4850 */    94,  103,  114,   50,   61,   57,   60,  105,  101,  119,
 /*  4860 */   111,  100,  108,  109,  110,  911,  148,   99,  113,  107,
 /*  4870 */    40,  104,   87,   98,   95,   69,   92,   93,   84,   83,
 /*  4880 */    74,   75,  596,   59,  596,  116,  118,  115,  120,  121,
 /*  4890 */   117,   94,  103,  114,   50,   61,   57,   60,  105,  101,
 /*  4900 */   119,  111,  100,  108,  109,  110,  596,  148,  951,  951,
 /*  4910 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4920 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  4930 */   596,  596,  911,  423,  596,  596,  596,  596,  596,  596,
 /*  4940 */   596,   99,  113,  107,  596,  596,  596,  596,  596,  596,
 /*  4950 */   596,  596,  596,  596,  596,  596,  596,   59,  596,  116,
 /*  4960 */   118,  115,  120,  121,  117,   94,  103,  114,   50,   61,
 /*  4970 */    57,   60,  105,  101,  119,  111,  100,  108,  109,  110,
 /*  4980 */   596,  148,   99,  113,  107,  596,  596,  596,  596,  596,
 /*  4990 */   596,  596,  596,  596,  596,  596,  596,  596,   59,  596,
 /*  5000 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  5010 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  5020 */   110,  596,  148,  596,  596,  596,  596,  596,  596,  596,
 /*  5030 */   596,  596,  596,  596,  596,  558,  596,  596,  596,  596,
 /*  5040 */   596,  596,  596,  596,  596,  596,  596,  596,  596,   45,
 /*  5050 */   596,  556,  559,  596,  596,  596,  596,  596,  596,  596,
 /*  5060 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5070 */   596,  353,  596,  596,  614,  596,  596,  596,  596,  596,
 /*  5080 */   596,  596,  610,  596,  596,  596,  596,  596,  596,  596,
 /*  5090 */    42,  596,  596,  596,  596,  596,  596,  596,   99,  113,
 /*  5100 */   107,  596,  596,  560,  557,  613,  612,  585,  584,   97,
 /*  5110 */   596,  144,  596,  596,   59,  596,  116,  118,  115,  120,
 /*  5120 */   121,  117,   94,  103,  114,   50,   61,   57,   60,  105,
 /*  5130 */   101,  119,  111,  100,  108,  109,  110,  596,  148,  596,
 /*  5140 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5150 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5160 */   596,  596,  596,  596,  609,  596,  577,  596,  596,  596,
 /*  5170 */   596,  596,   99,  113,  107,  218,  596,  596,  388,  596,
 /*  5180 */   596,  596,  596,  596,  596,  596,  596,  596,   59,  596,
 /*  5190 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  5200 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  5210 */   110,  596,  148,  596,  596,  596,  596,  596,  596,  596,
 /*  5220 */   596,  596,  596,  596,  596,  489,  596,  596,  596,  596,
 /*  5230 */   382,  333,  183,  565,  551,  564,  577,  550,  596,  596,
 /*  5240 */   596,  684,  596,  596,  596,  682,  596,  596,  388,   99,
 /*  5250 */   113,  107,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5260 */   596,  596,  596,  596,  596,   59,  596,  116,  118,  115,
 /*  5270 */   120,  121,  117,   94,  103,  114,   50,   61,   57,   60,
 /*  5280 */   105,  101,  119,  111,  100,  108,  109,  110,  596,  148,
 /*  5290 */   596,  596,  596,  596,  596,  489,  596,  596,  596,  596,
 /*  5300 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  5310 */   596,  596,  596,  596,  596,  596,  690,  596,  596,  596,
 /*  5320 */   596,  596,  596,  596,   99,  113,  107,  596,  596,  596,
 /*  5330 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5340 */    59,  596,  116,  118,  115,  120,  121,  117,   94,  103,
 /*  5350 */   114,   50,   61,   57,   60,  105,  101,  119,  111,  100,
 /*  5360 */   108,  109,  110,  596,  148,  596,  596,  596,  596,  596,
 /*  5370 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5380 */   596,  596,  596,  596,  596,  596,  596,  577,  596,  596,
 /*  5390 */   596,  596,  596,  555,  596,  596,  571,  596,  577,  388,
 /*  5400 */   596,   99,  113,  107,  596,  596,  596,  683,  596,  596,
 /*  5410 */   388,  596,  596,  596,  596,  596,  596,   59,  596,  116,
 /*  5420 */   118,  115,  120,  121,  117,   94,  103,  114,   50,   61,
 /*  5430 */    57,   60,  105,  101,  119,  111,  100,  108,  109,  110,
 /*  5440 */   596,  148,  596,  596,  596,  596,  489,  596,  596,  596,
 /*  5450 */   596,  382,  333,  183,  565,  551,  564,  489,  550,  596,
 /*  5460 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  5470 */   670,  648,  651,  652,  604,  596,  255,  596,  596,  596,
 /*  5480 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  5490 */   596,  596,  596,  596,  596,  596,  596,  596,  368,  596,
 /*  5500 */   596,  596,  649,  654,  653,  596,  596,  450,  596,  596,
 /*  5510 */   596,  461,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  5520 */   577,  607,  596,  596,  582,  596,  596,  596,  596,  681,
 /*  5530 */   596,  596,  388,  596,  596,  596,  596,  596,  596,  596,
 /*  5540 */   596,  596,  596,  596,  596,  489,  596,  596,  596,  596,
 /*  5550 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  5560 */   596,  596,  596,  577,  596,  596,  583,  599,  598,  597,
 /*  5570 */   600,  604,  686,  255,  596,  388,  596,  596,  596,  489,
 /*  5580 */   596,  596,  595,  318,  382,  333,  183,  565,  551,  564,
 /*  5590 */   596,  550,  596,  596,  596,  368,  596,  596,  596,  596,
 /*  5600 */   654,  653,  596,  596,  450,  596,  596,  596,  461,  596,
 /*  5610 */   596,  596,  596,  596,  596,  348,  618,  596,  607,  596,
 /*  5620 */   596,  582,  489,  596,  596,  596,  596,  382,  333,  183,
 /*  5630 */   565,  551,  564,  596,  550,  596,  596,  596,  596,  596,
 /*  5640 */   596,  596,  489,  596,  596,  596,  596,  382,  333,  183,
 /*  5650 */   565,  551,  564,  596,  550,   99,  113,  107,  596,  596,
 /*  5660 */   596,  596,  596,  583,  596,  596,  596,  596,  596,  596,
 /*  5670 */   596,   59,  596,  116,  118,  115,  120,  121,  117,   94,
 /*  5680 */   103,  114,   50,   61,   57,   60,  105,  101,  119,  111,
 /*  5690 */   100,  108,  109,  110,  596,  148,  113,  107,  596,  596,
 /*  5700 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5710 */   596,   59,  596,  116,  118,  115,  120,  121,  117,   94,
 /*  5720 */   103,  114,   50,   61,   57,   60,  105,  101,  119,  111,
 /*  5730 */   100,  108,  109,  110,  107,  148,  596,  596,  596,  596,
 /*  5740 */   596,  596,  596,  596,  596,  596,  596,  596,   59,  596,
 /*  5750 */   116,  118,  115,  120,  121,  117,   94,  103,  114,   50,
 /*  5760 */    61,   57,   60,  105,  101,  119,  111,  100,  108,  109,
 /*  5770 */   110,  596,  148,  596,  596,  596,  596,  596,  596,  596,
 /*  5780 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  523,
 /*  5790 */   596,  596,  604,  596,  255,  596,  596,  596,  596,  596,
 /*  5800 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  5810 */   596,  596,  662,  596,  596,  596,  368,  596,  596,  596,
 /*  5820 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5830 */   596,  596,  596,  596,  596,  509,  348,  618,  604,  607,
 /*  5840 */   255,  596,  582,  596,  596,  596,  596,  596,  596,  595,
 /*  5850 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5860 */   596,  665,  368,  489,  596,  596,  596,  596,  382,  333,
 /*  5870 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  5880 */   596,  596,  348,  618,  583,  607,  596,  374,  582,  596,
 /*  5890 */   596,  596,  596,  596,  596,  596,  596,  498,  596,  388,
 /*  5900 */   604,  596,  255,  596,  596,  596,  596,  706,  596,  489,
 /*  5910 */   596,  595,  318,  596,  382,  333,  183,  565,  551,  564,
 /*  5920 */   596,  550,  596,  596,  368,  596,  596,  596,  596,  596,
 /*  5930 */   583,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  5940 */   596,  596,  596,  596,  348,  618,  489,  607,  596,  596,
 /*  5950 */   582,  382,  333,  183,  565,  551,  564,  596,  550,  523,
 /*  5960 */   596,  596,  604,  596,  255,  596,  596,  596,  596,  596,
 /*  5970 */   596,  489,  596,  595,  318,  596,  382,  333,  183,  565,
 /*  5980 */   551,  564,  528,  550,  506,  596,  368,  604,  596,  255,
 /*  5990 */   596,  596,  583,  596,  596,  596,  704,  596,  595,  318,
 /*  6000 */   596,  596,  596,  596,  596,  596,  348,  618,  596,  607,
 /*  6010 */   596,  368,  582,  596,  284,  596,  596,  596,  596,  596,
 /*  6020 */   596,  596,  596,  350,  315,  596,  596,  596,  596,  596,
 /*  6030 */   596,  348,  618,  489,  607,  596,  368,  582,  382,  333,
 /*  6040 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  6050 */   596,  596,  596,  596,  583,  596,  348,  618,  489,  607,
 /*  6060 */   596,  596,  582,  382,  333,  183,  565,  551,  564,  596,
 /*  6070 */   550,  490,  362,  596,  596,  596,  284,  596,  596,  583,
 /*  6080 */   596,  596,  596,  489,  596,  350,  315,  596,  382,  333,
 /*  6090 */   183,  565,  551,  564,  596,  550,  596,  596,  368,  596,
 /*  6100 */   596,  596,  596,  596,  583,  596,  596,  596,  596,  596,
 /*  6110 */   596,  596,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  6120 */   596,  607,  596,  596,  582,  596,  262,  596,  596,  596,
 /*  6130 */   596,  596,  596,  470,  362,  595,  318,  596,  596,  596,
 /*  6140 */   596,  596,  596,  596,  596,  489,  596,  596,  368,  596,
 /*  6150 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  6160 */   596,  596,  596,  596,  596,  596,  583,  596,  348,  618,
 /*  6170 */   596,  607,  452,  596,  582,  284,  596,  596,  596,  596,
 /*  6180 */   596,  596,  596,  596,  350,  315,  596,  596,  596,  596,
 /*  6190 */   596,  596,  596,  596,  596,  489,  596,  368,  596,  596,
 /*  6200 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  6210 */   596,  205,  596,  596,  591,  596,  583,  348,  618,  285,
 /*  6220 */   607,  596,  596,  582,  596,  465,  388,  596,  595,  318,
 /*  6230 */   596,  596,  444,  362,  596,  596,  596,  596,  596,  596,
 /*  6240 */   596,  368,  596,  596,  489,  596,  590,  596,  596,  382,
 /*  6250 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /*  6260 */   596,  348,  618,  596,  607,  583,  596,  582,  596,  596,
 /*  6270 */   596,  596,  596,  489,  596,  596,  596,  596,  382,  333,
 /*  6280 */   183,  565,  551,  564,  596,  550,  596,  596,  489,  596,
 /*  6290 */   596,  596,  596,  382,  333,  183,  565,  551,  564,  596,
 /*  6300 */   550,  596,  284,  596,  596,  596,  596,  596,  596,  583,
 /*  6310 */   596,  350,  315,  399,  596,  596,  596,  596,  596,  596,
 /*  6320 */   596,  596,  596,  596,  368,  596,  596,  284,  596,  596,
 /*  6330 */   596,  596,  596,  596,  596,  596,  350,  315,  596,  596,
 /*  6340 */   596,  596,  596,  596,  348,  618,  596,  607,  596,  368,
 /*  6350 */   582,  596,  285,  596,  596,  596,  596,  596,  455,  483,
 /*  6360 */   362,  595,  318,  596,  596,  596,  596,  596,  596,  348,
 /*  6370 */   618,  489,  607,  596,  368,  582,  382,  333,  183,  565,
 /*  6380 */   551,  564,  596,  550,  481,  362,  596,  596,  596,  596,
 /*  6390 */   596,  596,  583,  596,  348,  618,  489,  607,  596,  596,
 /*  6400 */   582,  382,  333,  183,  565,  551,  564,  596,  550,  463,
 /*  6410 */   596,  596,  604,  596,  255,  596,  596,  583,  596,  596,
 /*  6420 */   596,  489,  596,  595,  318,  596,  382,  333,  183,  565,
 /*  6430 */   551,  564,  596,  550,  596,  596,  368,  596,  596,  596,
 /*  6440 */   596,  596,  583,  596,  596,  596,  399,  596,  596,  596,
 /*  6450 */   596,  596,  596,  596,  596,  596,  348,  618,  510,  607,
 /*  6460 */   596,  604,  582,  255,  596,  596,  596,  596,  596,  596,
 /*  6470 */   596,  596,  595,  318,  596,  596,  596,  596,  596,  596,
 /*  6480 */   596,  596,  596,  489,  596,  368,  596,  596,  382,  333,
 /*  6490 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  6500 */   596,  596,  596,  596,  583,  348,  618,  232,  607,  596,
 /*  6510 */   604,  582,  255,  596,  596,  596,  596,  596,  596,  596,
 /*  6520 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /*  6530 */   596,  596,  489,  596,  368,  596,  596,  382,  333,  183,
 /*  6540 */   565,  551,  564,  596,  550,  596,  596,  596,  596,  596,
 /*  6550 */   596,  596,  596,  583,  348,  618,  516,  607,  596,  604,
 /*  6560 */   582,  255,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  6570 */   595,  318,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  6580 */   596,  489,  596,  368,  596,  596,  382,  333,  183,  565,
 /*  6590 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  6600 */   596,  596,  583,  348,  618,  596,  607,  596,  596,  582,
 /*  6610 */   284,  596,  596,  596,  596,  596,  596,  596,  596,  350,
 /*  6620 */   315,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  6630 */   489,  596,  368,  596,  596,  382,  333,  183,  565,  551,
 /*  6640 */   564,  596,  550,  596,  596,  596,  596,  596,  596,  596,
 /*  6650 */   596,  583,  348,  618,  596,  607,  285,  596,  582,  596,
 /*  6660 */   596,  596,  454,  596,  596,  595,  318,  487,  362,  596,
 /*  6670 */   596,  596,  596,  596,  596,  596,  596,  596,  368,  489,
 /*  6680 */   596,  596,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  6690 */   596,  550,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  6700 */   583,  607,  573,  596,  582,  596,  281,  596,  596,  596,
 /*  6710 */   596,  596,  596,  596,  388,  595,  318,  596,  596,  339,
 /*  6720 */   596,  596,  596,  596,  596,  489,  596,  596,  368,  596,
 /*  6730 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  6740 */   596,  596,  596,  596,  596,  596,  583,  596,  348,  618,
 /*  6750 */   399,  607,  596,  596,  582,  283,  596,  596,  596,  596,
 /*  6760 */   596,  489,  596,  596,  595,  318,  382,  333,  183,  565,
 /*  6770 */   551,  564,  596,  550,  596,  489,  596,  368,  596,  596,
 /*  6780 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  6790 */   596,  596,  596,  596,  596,  596,  583,  348,  618,  596,
 /*  6800 */   607,  596,  596,  582,  283,  596,  596,  596,  596,  596,
 /*  6810 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  6820 */   596,  596,  596,  596,  489,  596,  368,  596,  596,  382,
 /*  6830 */   333,  183,  565,  551,  564,  473,  550,  596,  596,  596,
 /*  6840 */   596,  596,  596,  596,  596,  583,  348,  618,  596,  607,
 /*  6850 */   256,  596,  582,  596,  596,  596,  596,  596,  596,  595,
 /*  6860 */   318,  596,  596,  596,  596,  596,  596,  265,  596,  596,
 /*  6870 */   596,  596,  368,  489,  596,  596,  595,  318,  382,  333,
 /*  6880 */   183,  565,  551,  564,  486,  550,  596,  596,  596,  368,
 /*  6890 */   596,  596,  348,  618,  583,  607,  596,  596,  582,  596,
 /*  6900 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  348,
 /*  6910 */   618,  596,  607,  596,  596,  582,  596,  596,  596,  489,
 /*  6920 */   596,  596,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  6930 */   596,  550,  596,  596,  596,  596,  489,  596,  596,  596,
 /*  6940 */   583,  382,  333,  183,  565,  551,  564,  596,  550,  304,
 /*  6950 */   596,  596,  596,  596,  596,  596,  596,  583,  595,  318,
 /*  6960 */   596,  596,  596,  596,  596,  596,  278,  596,  596,  596,
 /*  6970 */   596,  368,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  6980 */   596,  596,  596,  596,  596,  596,  596,  596,  368,  596,
 /*  6990 */   596,  348,  618,  596,  607,  596,  596,  582,  596,  596,
 /*  7000 */   596,  596,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  7010 */   596,  607,  322,  596,  582,  596,  596,  596,  489,  596,
 /*  7020 */   596,  595,  318,  382,  333,  183,  565,  551,  564,  596,
 /*  7030 */   550,  596,  596,  596,  368,  489,  596,  596,  596,  583,
 /*  7040 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  7050 */   596,  596,  596,  596,  348,  618,  583,  607,  596,  596,
 /*  7060 */   582,  260,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7070 */   595,  318,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7080 */   596,  489,  596,  368,  596,  596,  382,  333,  183,  565,
 /*  7090 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  7100 */   596,  596,  583,  348,  618,  596,  607,  596,  596,  582,
 /*  7110 */   269,  596,  596,  596,  596,  596,  596,  596,  596,  595,
 /*  7120 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7130 */   489,  596,  368,  596,  596,  382,  333,  183,  565,  551,
 /*  7140 */   564,  596,  550,  596,  596,  596,  596,  596,  596,  596,
 /*  7150 */   596,  583,  348,  618,  596,  607,  273,  596,  582,  596,
 /*  7160 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  7170 */   596,  596,  596,  271,  596,  596,  596,  596,  368,  489,
 /*  7180 */   596,  596,  595,  318,  382,  333,  183,  565,  551,  564,
 /*  7190 */   596,  550,  596,  596,  596,  368,  596,  596,  348,  618,
 /*  7200 */   583,  607,  596,  596,  582,  596,  596,  596,  596,  596,
 /*  7210 */   596,  596,  596,  596,  596,  348,  618,  596,  607,  596,
 /*  7220 */   596,  582,  596,  596,  596,  489,  596,  596,  596,  596,
 /*  7230 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  7240 */   596,  596,  489,  596,  596,  596,  583,  382,  333,  183,
 /*  7250 */   565,  551,  564,  596,  550,  295,  596,  596,  596,  596,
 /*  7260 */   596,  596,  596,  583,  595,  318,  596,  596,  596,  596,
 /*  7270 */   596,  596,  327,  596,  596,  596,  596,  368,  596,  596,
 /*  7280 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /*  7290 */   596,  596,  596,  596,  368,  596,  596,  348,  618,  596,
 /*  7300 */   607,  596,  596,  582,  596,  596,  596,  596,  596,  596,
 /*  7310 */   596,  596,  596,  596,  348,  618,  596,  607,  312,  596,
 /*  7320 */   582,  596,  596,  596,  489,  596,  596,  595,  318,  382,
 /*  7330 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /*  7340 */   368,  489,  596,  596,  596,  583,  382,  333,  183,  565,
 /*  7350 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  7360 */   348,  618,  583,  607,  596,  596,  582,  606,  596,  596,
 /*  7370 */   596,  596,  596,  596,  596,  596,  595,  318,  596,  596,
 /*  7380 */   596,  596,  596,  596,  596,  596,  596,  489,  596,  368,
 /*  7390 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  7400 */   596,  596,  596,  596,  596,  596,  596,  596,  583,  348,
 /*  7410 */   618,  596,  607,  596,  596,  582,  289,  596,  596,  596,
 /*  7420 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  7430 */   596,  596,  596,  596,  596,  596,  489,  596,  368,  596,
 /*  7440 */   596,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /*  7450 */   596,  596,  596,  596,  596,  596,  596,  583,  348,  618,
 /*  7460 */   596,  607,  266,  596,  582,  596,  596,  596,  596,  596,
 /*  7470 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  300,
 /*  7480 */   596,  596,  596,  596,  368,  489,  596,  596,  595,  318,
 /*  7490 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  7500 */   596,  368,  596,  596,  348,  618,  583,  607,  596,  596,
 /*  7510 */   582,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7520 */   596,  348,  618,  596,  607,  596,  596,  582,  596,  596,
 /*  7530 */   596,  489,  596,  596,  596,  596,  382,  333,  183,  565,
 /*  7540 */   551,  564,  596,  550,  596,  596,  596,  596,  489,  596,
 /*  7550 */   596,  596,  583,  382,  333,  183,  565,  551,  564,  596,
 /*  7560 */   550,  325,  596,  596,  596,  596,  596,  596,  596,  583,
 /*  7570 */   595,  318,  596,  596,  596,  596,  596,  596,  291,  596,
 /*  7580 */   596,  596,  596,  368,  596,  596,  596,  595,  318,  596,
 /*  7590 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7600 */   368,  596,  596,  348,  618,  596,  607,  596,  596,  582,
 /*  7610 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  7620 */   348,  618,  596,  607,  293,  596,  582,  596,  596,  596,
 /*  7630 */   489,  596,  596,  595,  318,  382,  333,  183,  565,  551,
 /*  7640 */   564,  596,  550,  596,  596,  596,  368,  489,  596,  596,
 /*  7650 */   596,  583,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  7660 */   596,  596,  596,  596,  596,  596,  348,  618,  583,  607,
 /*  7670 */   596,  596,  582,  292,  596,  596,  596,  596,  596,  596,
 /*  7680 */   596,  596,  595,  318,  596,  596,  596,  596,  596,  596,
 /*  7690 */   596,  596,  596,  489,  596,  368,  596,  596,  382,  333,
 /*  7700 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  7710 */   596,  596,  596,  596,  583,  348,  618,  596,  607,  596,
 /*  7720 */   596,  582,  411,  596,  596,  596,  596,  596,  596,  596,
 /*  7730 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /*  7740 */   596,  596,  489,  596,  368,  596,  596,  382,  333,  183,
 /*  7750 */   565,  551,  564,  596,  550,  596,  596,  596,  596,  596,
 /*  7760 */   596,  596,  596,  583,  348,  618,  596,  607,  284,  596,
 /*  7770 */   582,  596,  596,  596,  596,  596,  596,  366,  317,  596,
 /*  7780 */   596,  596,  596,  596,  596,  620,  596,  596,  596,  596,
 /*  7790 */   368,  489,  596,  596,  595,  318,  382,  333,  183,  565,
 /*  7800 */   551,  564,  596,  550,  596,  596,  596,  368,  596,  596,
 /*  7810 */   348,  618,  583,  607,  596,  596,  582,  596,  596,  596,
 /*  7820 */   596,  596,  596,  596,  596,  596,  596,  348,  618,  596,
 /*  7830 */   607,  596,  596,  582,  596,  596,  596,  489,  596,  596,
 /*  7840 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  7850 */   596,  596,  596,  596,  489,  596,  596,  596,  583,  382,
 /*  7860 */   333,  183,  565,  551,  564,  596,  550,  277,  596,  596,
 /*  7870 */   596,  596,  596,  596,  596,  583,  595,  318,  596,  596,
 /*  7880 */   596,  596,  596,  596,  264,  596,  596,  596,  596,  368,
 /*  7890 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  7900 */   596,  596,  596,  596,  596,  596,  368,  596,  596,  348,
 /*  7910 */   618,  596,  607,  596,  596,  582,  596,  596,  596,  596,
 /*  7920 */   596,  596,  596,  596,  596,  596,  348,  618,  596,  607,
 /*  7930 */   290,  596,  582,  596,  596,  596,  489,  596,  596,  595,
 /*  7940 */   318,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /*  7950 */   596,  596,  368,  489,  596,  596,  596,  583,  382,  333,
 /*  7960 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  7970 */   596,  596,  348,  618,  583,  607,  596,  596,  582,  186,
 /*  7980 */   596,  596,  596,  596,  596,  596,  596,  596,  595,  318,
 /*  7990 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  489,
 /*  8000 */   596,  368,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  8010 */   596,  550,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8020 */   583,  348,  618,  596,  607,  596,  596,  582,  282,  596,
 /*  8030 */   596,  596,  596,  596,  596,  596,  596,  595,  318,  596,
 /*  8040 */   596,  596,  596,  596,  596,  596,  596,  596,  489,  596,
 /*  8050 */   368,  596,  596,  382,  333,  183,  565,  551,  564,  596,
 /*  8060 */   550,  596,  596,  596,  596,  596,  596,  596,  596,  583,
 /*  8070 */   348,  618,  596,  607,  298,  596,  582,  596,  596,  596,
 /*  8080 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  8090 */   596,  624,  596,  596,  596,  596,  368,  489,  596,  596,
 /*  8100 */   595,  318,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  8110 */   596,  596,  596,  368,  596,  596,  348,  618,  583,  607,
 /*  8120 */   596,  596,  582,  596,  596,  596,  596,  596,  596,  596,
 /*  8130 */   596,  596,  596,  348,  618,  596,  607,  596,  596,  582,
 /*  8140 */   596,  596,  596,  489,  596,  596,  596,  596,  382,  333,
 /*  8150 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  8160 */   489,  596,  596,  596,  583,  382,  333,  183,  565,  551,
 /*  8170 */   564,  596,  550,  302,  596,  596,  596,  596,  596,  596,
 /*  8180 */   596,  583,  595,  318,  596,  596,  596,  596,  596,  596,
 /*  8190 */   274,  596,  596,  596,  596,  368,  596,  596,  596,  595,
 /*  8200 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8210 */   596,  596,  368,  596,  596,  348,  618,  596,  607,  596,
 /*  8220 */   596,  582,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8230 */   596,  596,  348,  618,  596,  607,  321,  596,  582,  596,
 /*  8240 */   596,  596,  489,  596,  596,  595,  318,  382,  333,  183,
 /*  8250 */   565,  551,  564,  596,  550,  596,  596,  596,  368,  489,
 /*  8260 */   596,  596,  596,  583,  382,  333,  183,  565,  551,  564,
 /*  8270 */   596,  550,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  8280 */   583,  607,  596,  596,  582,  299,  596,  596,  596,  596,
 /*  8290 */   596,  596,  596,  596,  595,  318,  596,  596,  596,  596,
 /*  8300 */   596,  596,  596,  596,  596,  489,  596,  368,  596,  596,
 /*  8310 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  8320 */   596,  596,  596,  596,  596,  596,  583,  348,  618,  596,
 /*  8330 */   607,  596,  596,  582,  623,  596,  596,  596,  596,  596,
 /*  8340 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  8350 */   596,  596,  596,  596,  489,  596,  368,  596,  596,  382,
 /*  8360 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /*  8370 */   596,  596,  596,  596,  596,  583,  348,  618,  596,  607,
 /*  8380 */   252,  596,  582,  596,  596,  596,  596,  596,  596,  595,
 /*  8390 */   318,  596,  596,  596,  596,  596,  596,  621,  596,  596,
 /*  8400 */   596,  596,  368,  489,  596,  596,  595,  318,  382,  333,
 /*  8410 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  368,
 /*  8420 */   596,  596,  348,  618,  583,  607,  596,  596,  582,  596,
 /*  8430 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  348,
 /*  8440 */   618,  596,  607,  596,  596,  582,  596,  596,  596,  489,
 /*  8450 */   596,  596,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  8460 */   596,  550,  596,  596,  596,  596,  489,  596,  596,  596,
 /*  8470 */   583,  382,  333,  183,  565,  551,  564,  596,  550,  267,
 /*  8480 */   596,  596,  596,  596,  596,  596,  596,  583,  595,  318,
 /*  8490 */   596,  596,  596,  596,  596,  596,  320,  596,  596,  596,
 /*  8500 */   596,  368,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  8510 */   596,  596,  596,  596,  596,  596,  596,  596,  368,  596,
 /*  8520 */   596,  348,  618,  596,  607,  596,  596,  582,  596,  596,
 /*  8530 */   596,  596,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  8540 */   596,  607,  280,  596,  582,  596,  596,  596,  489,  596,
 /*  8550 */   596,  595,  318,  382,  333,  183,  565,  551,  564,  596,
 /*  8560 */   550,  596,  596,  596,  368,  489,  596,  596,  596,  583,
 /*  8570 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  8580 */   596,  596,  596,  596,  348,  618,  583,  607,  596,  596,
 /*  8590 */   582,  286,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8600 */   595,  318,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8610 */   596,  489,  596,  368,  596,  596,  382,  333,  183,  565,
 /*  8620 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  8630 */   596,  596,  583,  348,  618,  596,  607,  596,  596,  582,
 /*  8640 */   617,  596,  596,  596,  596,  596,  596,  596,  596,  595,
 /*  8650 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  8660 */   489,  596,  368,  596,  596,  382,  333,  183,  565,  551,
 /*  8670 */   564,  596,  550,  596,  596,  596,  596,  596,  596,  596,
 /*  8680 */   596,  583,  348,  618,  596,  607,  270,  596,  582,  596,
 /*  8690 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /*  8700 */   596,  596,  596,  268,  596,  596,  596,  596,  368,  489,
 /*  8710 */   596,  596,  595,  318,  382,  333,  183,  565,  551,  564,
 /*  8720 */   596,  550,  596,  596,  596,  368,  596,  596,  348,  618,
 /*  8730 */   583,  607,  596,  596,  582,  596,  596,  596,  596,  596,
 /*  8740 */   596,  596,  596,  596,  596,  348,  618,  596,  607,  596,
 /*  8750 */   596,  582,  596,  596,  596,  489,  596,  596,  596,  596,
 /*  8760 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  8770 */   596,  596,  489,  596,  596,  596,  583,  382,  333,  183,
 /*  8780 */   565,  551,  564,  596,  550,  310,  596,  596,  596,  596,
 /*  8790 */   596,  596,  596,  583,  595,  318,  596,  596,  596,  596,
 /*  8800 */   596,  596,  254,  596,  596,  596,  596,  368,  596,  596,
 /*  8810 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /*  8820 */   596,  596,  596,  596,  368,  596,  596,  348,  618,  596,
 /*  8830 */   607,  596,  596,  582,  596,  596,  596,  596,  596,  596,
 /*  8840 */   596,  596,  596,  596,  348,  618,  596,  607,  588,  596,
 /*  8850 */   582,  596,  596,  596,  489,  596,  596,  595,  318,  382,
 /*  8860 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /*  8870 */   368,  489,  596,  596,  596,  583,  382,  333,  183,  565,
 /*  8880 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /*  8890 */   348,  618,  583,  607,  596,  596,  582,  275,  596,  596,
 /*  8900 */   596,  596,  596,  596,  596,  596,  595,  318,  596,  596,
 /*  8910 */   596,  596,  596,  596,  596,  596,  596,  489,  596,  368,
 /*  8920 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  8930 */   596,  596,  596,  596,  596,  596,  596,  596,  583,  348,
 /*  8940 */   618,  596,  607,  596,  596,  582,  284,  596,  596,  596,
 /*  8950 */   596,  596,  596,  596,  596,  355,  314,  596,  596,  596,
 /*  8960 */   596,  596,  596,  596,  596,  596,  489,  596,  368,  596,
 /*  8970 */   596,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /*  8980 */   596,  596,  596,  596,  596,  596,  596,  583,  348,  618,
 /*  8990 */   596,  607,  294,  596,  582,  596,  596,  596,  596,  596,
 /*  9000 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  258,
 /*  9010 */   596,  596,  596,  596,  368,  489,  596,  596,  595,  318,
 /*  9020 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  9030 */   596,  368,  596,  596,  348,  618,  583,  607,  596,  596,
 /*  9040 */   582,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9050 */   596,  348,  618,  596,  607,  596,  596,  582,  596,  596,
 /*  9060 */   596,  489,  596,  596,  596,  596,  382,  333,  183,  565,
 /*  9070 */   551,  564,  596,  550,  596,  596,  596,  596,  489,  596,
 /*  9080 */   596,  596,  583,  382,  333,  183,  565,  551,  564,  596,
 /*  9090 */   550,  323,  596,  596,  596,  596,  596,  596,  596,  583,
 /*  9100 */   595,  318,  596,  596,  596,  596,  596,  596,  279,  596,
 /*  9110 */   596,  596,  596,  368,  596,  596,  596,  595,  318,  596,
 /*  9120 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9130 */   368,  596,  596,  348,  618,  596,  607,  596,  596,  582,
 /*  9140 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9150 */   348,  618,  596,  607,  324,  596,  582,  596,  596,  596,
 /*  9160 */   489,  596,  596,  595,  318,  382,  333,  183,  565,  551,
 /*  9170 */   564,  596,  550,  596,  596,  596,  368,  489,  596,  596,
 /*  9180 */   596,  583,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  9190 */   596,  596,  596,  596,  596,  596,  348,  618,  583,  607,
 /*  9200 */   596,  596,  582,  284,  596,  596,  596,  596,  596,  596,
 /*  9210 */   596,  596,  472,  316,  596,  596,  596,  596,  596,  596,
 /*  9220 */   596,  596,  596,  489,  596,  368,  596,  596,  382,  333,
 /*  9230 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  9240 */   596,  596,  596,  596,  583,  348,  618,  596,  607,  596,
 /*  9250 */   596,  582,  608,  596,  596,  596,  596,  596,  596,  596,
 /*  9260 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /*  9270 */   596,  596,  489,  596,  368,  596,  596,  382,  333,  183,
 /*  9280 */   565,  551,  564,  596,  550,  596,  596,  596,  596,  596,
 /*  9290 */   596,  596,  596,  583,  348,  618,  596,  607,  263,  596,
 /*  9300 */   582,  596,  596,  596,  596,  596,  596,  595,  318,  596,
 /*  9310 */   596,  596,  596,  596,  596,  319,  596,  596,  596,  596,
 /*  9320 */   368,  489,  596,  596,  595,  318,  382,  333,  183,  565,
 /*  9330 */   551,  564,  596,  550,  596,  596,  596,  368,  596,  596,
 /*  9340 */   348,  618,  583,  607,  596,  596,  582,  596,  596,  596,
 /*  9350 */   596,  596,  596,  596,  596,  596,  596,  348,  618,  596,
 /*  9360 */   607,  596,  596,  582,  596,  596,  596,  489,  596,  596,
 /*  9370 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  9380 */   596,  596,  596,  596,  489,  596,  596,  596,  583,  382,
 /*  9390 */   333,  183,  565,  551,  564,  596,  550,  276,  596,  596,
 /*  9400 */   596,  596,  596,  596,  596,  583,  595,  318,  596,  596,
 /*  9410 */   596,  596,  596,  596,  303,  596,  596,  596,  596,  368,
 /*  9420 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  9430 */   596,  596,  596,  596,  596,  596,  368,  596,  596,  348,
 /*  9440 */   618,  596,  607,  596,  596,  582,  596,  596,  596,  596,
 /*  9450 */   596,  596,  596,  596,  596,  596,  348,  618,  596,  607,
 /*  9460 */   616,  596,  582,  596,  596,  596,  489,  596,  596,  595,
 /*  9470 */   318,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /*  9480 */   596,  596,  368,  489,  596,  596,  596,  583,  382,  333,
 /*  9490 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  9500 */   596,  596,  348,  618,  583,  607,  596,  596,  582,  329,
 /*  9510 */   596,  596,  596,  596,  596,  596,  596,  596,  595,  318,
 /*  9520 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  489,
 /*  9530 */   596,  368,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  9540 */   596,  550,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9550 */   583,  348,  618,  596,  607,  596,  596,  582,  259,  596,
 /*  9560 */   596,  596,  596,  596,  596,  596,  596,  595,  318,  596,
 /*  9570 */   596,  596,  596,  596,  596,  596,  596,  596,  489,  596,
 /*  9580 */   368,  596,  596,  382,  333,  183,  565,  551,  564,  596,
 /*  9590 */   550,  596,  596,  596,  596,  596,  596,  596,  596,  583,
 /*  9600 */   348,  618,  596,  607,  287,  596,  582,  596,  596,  596,
 /*  9610 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  9620 */   596,  253,  596,  596,  596,  596,  368,  489,  596,  596,
 /*  9630 */   595,  318,  382,  333,  183,  565,  551,  564,  596,  550,
 /*  9640 */   596,  596,  596,  368,  596,  596,  348,  618,  583,  607,
 /*  9650 */   596,  596,  582,  596,  596,  596,  596,  596,  596,  596,
 /*  9660 */   596,  596,  596,  348,  618,  596,  607,  596,  596,  582,
 /*  9670 */   596,  596,  596,  489,  596,  596,  596,  596,  382,  333,
 /*  9680 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  596,
 /*  9690 */   489,  596,  596,  596,  583,  382,  333,  183,  565,  551,
 /*  9700 */   564,  596,  550,  301,  596,  596,  596,  596,  596,  596,
 /*  9710 */   596,  583,  595,  318,  596,  596,  596,  596,  596,  596,
 /*  9720 */   326,  596,  596,  596,  596,  368,  596,  596,  596,  595,
 /*  9730 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9740 */   596,  596,  368,  596,  596,  348,  618,  596,  607,  596,
 /*  9750 */   596,  582,  596,  596,  596,  596,  596,  596,  596,  596,
 /*  9760 */   596,  596,  348,  618,  596,  607,  306,  596,  582,  596,
 /*  9770 */   596,  596,  489,  596,  596,  595,  318,  382,  333,  183,
 /*  9780 */   565,  551,  564,  596,  550,  596,  596,  596,  368,  489,
 /*  9790 */   596,  596,  596,  583,  382,  333,  183,  565,  551,  564,
 /*  9800 */   596,  550,  596,  596,  596,  596,  596,  596,  348,  618,
 /*  9810 */   583,  607,  596,  596,  582,  309,  596,  596,  596,  596,
 /*  9820 */   596,  596,  596,  596,  595,  318,  596,  596,  596,  596,
 /*  9830 */   596,  596,  596,  596,  596,  489,  596,  368,  596,  596,
 /*  9840 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /*  9850 */   596,  596,  596,  596,  596,  596,  583,  348,  618,  596,
 /*  9860 */   607,  596,  596,  582,  305,  596,  596,  596,  596,  596,
 /*  9870 */   596,  596,  596,  595,  318,  596,  596,  596,  596,  596,
 /*  9880 */   596,  596,  596,  596,  489,  596,  368,  596,  596,  382,
 /*  9890 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /*  9900 */   596,  596,  596,  596,  596,  583,  348,  618,  596,  607,
 /*  9910 */   308,  596,  582,  596,  596,  596,  596,  596,  596,  595,
 /*  9920 */   318,  596,  596,  596,  596,  596,  596,  311,  596,  596,
 /*  9930 */   596,  596,  368,  489,  596,  596,  595,  318,  382,  333,
 /*  9940 */   183,  565,  551,  564,  596,  550,  596,  596,  596,  368,
 /*  9950 */   596,  596,  348,  618,  583,  607,  596,  596,  582,  596,
 /*  9960 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  348,
 /*  9970 */   618,  596,  607,  596,  596,  582,  596,  596,  596,  489,
 /*  9980 */   596,  596,  596,  596,  382,  333,  183,  565,  551,  564,
 /*  9990 */   596,  550,  596,  596,  596,  596,  489,  596,  596,  596,
 /* 10000 */   583,  382,  333,  183,  565,  551,  564,  596,  550,  622,
 /* 10010 */   596,  596,  596,  596,  596,  596,  596,  583,  595,  318,
 /* 10020 */   596,  596,  596,  596,  596,  596,  297,  596,  596,  596,
 /* 10030 */   596,  368,  596,  596,  596,  595,  318,  596,  596,  596,
 /* 10040 */   596,  596,  596,  596,  596,  596,  596,  596,  368,  596,
 /* 10050 */   596,  348,  618,  596,  607,  596,  596,  582,  596,  596,
 /* 10060 */   596,  596,  596,  596,  596,  596,  596,  596,  348,  618,
 /* 10070 */   596,  607,  307,  596,  582,  596,  596,  596,  489,  596,
 /* 10080 */   596,  595,  318,  382,  333,  183,  565,  551,  564,  596,
 /* 10090 */   550,  596,  596,  596,  368,  489,  596,  596,  596,  583,
 /* 10100 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /* 10110 */   596,  596,  596,  596,  348,  618,  583,  607,  596,  596,
 /* 10120 */   582,  313,  596,  596,  596,  596,  596,  596,  596,  596,
 /* 10130 */   595,  318,  596,  596,  596,  596,  596,  596,  596,  596,
 /* 10140 */   596,  489,  596,  368,  596,  596,  382,  333,  183,  565,
 /* 10150 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /* 10160 */   596,  596,  583,  348,  618,  596,  607,  596,  596,  582,
 /* 10170 */   395,  596,  596,  596,  596,  596,  596,  596,  596,  595,
 /* 10180 */   318,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /* 10190 */   489,  596,  368,  596,  596,  382,  333,  183,  565,  551,
 /* 10200 */   564,  596,  550,  596,  596,  596,  596,  596,  596,  596,
 /* 10210 */   596,  583,  348,  618,  596,  607,  261,  596,  582,  596,
 /* 10220 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /* 10230 */   596,  596,  596,  296,  596,  596,  596,  596,  368,  489,
 /* 10240 */   596,  596,  595,  318,  382,  333,  183,  565,  551,  564,
 /* 10250 */   596,  550,  596,  596,  596,  368,  596,  596,  348,  618,
 /* 10260 */   583,  607,  596,  596,  582,  596,  596,  596,  596,  596,
 /* 10270 */   596,  596,  596,  596,  596,  348,  618,  596,  607,  596,
 /* 10280 */   596,  582,  596,  596,  596,  489,  596,  596,  596,  596,
 /* 10290 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /* 10300 */   596,  596,  489,  596,  596,  596,  583,  382,  333,  183,
 /* 10310 */   565,  551,  564,  596,  550,  405,  596,  596,  596,  596,
 /* 10320 */   596,  596,  596,  583,  595,  318,  596,  596,  596,  596,
 /* 10330 */   596,  596,  410,  596,  596,  596,  596,  368,  596,  596,
 /* 10340 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /* 10350 */   596,  596,  596,  596,  368,  596,  596,  348,  618,  596,
 /* 10360 */   607,  596,  596,  582,  596,  596,  596,  596,  596,  596,
 /* 10370 */   596,  596,  596,  596,  348,  618,  596,  607,  288,  596,
 /* 10380 */   582,  596,  596,  596,  489,  596,  596,  595,  318,  382,
 /* 10390 */   333,  183,  565,  551,  564,  596,  550,  596,  596,  596,
 /* 10400 */   368,  489,  596,  596,  596,  583,  382,  333,  183,  565,
 /* 10410 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /* 10420 */   348,  618,  583,  607,  596,  596,  582,  257,  596,  596,
 /* 10430 */   596,  596,  596,  596,  596,  596,  595,  318,  596,  596,
 /* 10440 */   596,  596,  596,  596,  596,  596,  596,  489,  596,  368,
 /* 10450 */   596,  596,  382,  333,  183,  565,  551,  564,  596,  550,
 /* 10460 */   596,  596,  596,  596,  596,  596,  596,  596,  583,  348,
 /* 10470 */   618,  596,  607,  596,  596,  582,  328,  596,  596,  596,
 /* 10480 */   596,  596,  596,  596,  596,  595,  318,  596,  596,  596,
 /* 10490 */   596,  596,  596,  596,  596,  596,  489,  596,  368,  596,
 /* 10500 */   596,  382,  333,  183,  565,  551,  564,  596,  550,  596,
 /* 10510 */   596,  596,  596,  596,  596,  596,  596,  583,  348,  618,
 /* 10520 */   596,  607,  272,  596,  582,  596,  596,  596,  596,  596,
 /* 10530 */   596,  595,  318,  596,  596,  596,  596,  596,  596,  596,
 /* 10540 */   596,  596,  596,  596,  368,  489,  596,  596,  596,  596,
 /* 10550 */   382,  333,  183,  565,  551,  564,  596,  550,  596,  596,
 /* 10560 */   596,  596,  596,  596,  348,  618,  583,  607,  596,  596,
 /* 10570 */   582,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /* 10580 */   596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
 /* 10590 */   596,  489,  596,  596,  596,  596,  382,  333,  183,  565,
 /* 10600 */   551,  564,  596,  550,  596,  596,  596,  596,  596,  596,
 /* 10610 */   596,  596,  583,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    2,    3,    4,    5,  174,  175,  176,   23,   10,
 /*    10 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*    20 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*    30 */    45,  221,   47,    6,  222,  225,  226,  227,   95,   40,
 /*    40 */    41,   98,  232,  233,  234,   46,  103,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   72,   60,
 /*    60 */    61,  225,  226,  227,   65,   66,   67,  124,  232,    6,
 /*    70 */    71,   72,   95,   74,   75,   76,   77,   78,   79,   80,
 /*    80 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*    90 */    29,   92,   93,  226,   95,   96,   97,   98,   99,  232,
 /*   100 */   101,   74,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   110 */   111,  112,  113,  114,  205,    1,    2,    3,    4,    5,
 /*   120 */   120,  121,  122,  124,   10,   65,   66,   67,   68,   69,
 /*   130 */    70,  199,  200,  134,  202,  136,  137,  138,  139,  140,
 /*   140 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   150 */    44,   45,   73,   47,   40,   41,   95,   97,  199,  200,
 /*   160 */    46,  202,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   170 */    56,   57,   58,  207,   60,   61,  225,  226,  227,   65,
 /*   180 */    66,   67,    6,  232,  155,   71,   72,  173,   74,   75,
 /*   190 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   200 */    86,   87,   88,   89,   90,  191,   92,   93,    6,   95,
 /*   210 */    96,   97,   98,   99,   72,  101,  162,  103,  104,  105,
 /*   220 */   106,  107,  108,  109,  110,  111,  112,  113,  114,   59,
 /*   230 */     1,    2,    3,    4,    5,  143,  144,   98,  124,   10,
 /*   240 */   226,  227,  228,  229,  105,   75,  232,   59,  134,   73,
 /*   250 */   136,  137,  138,  139,  140,   98,  242,   95,  116,   95,
 /*   260 */    72,  221,   98,   75,  210,  225,  226,  227,   95,   40,
 /*   270 */    41,   98,  232,  233,  234,   46,   74,   48,   49,   50,
 /*   280 */    51,   52,   53,   54,   55,   56,   57,   58,  124,   60,
 /*   290 */    61,  120,  121,  122,   65,   66,   67,  124,   29,   24,
 /*   300 */    71,   72,   24,   74,   75,   76,   77,   78,   79,   80,
 /*   310 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   320 */   222,   92,   93,    6,   95,   96,   97,   98,   99,  115,
 /*   330 */   101,   72,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   340 */   111,  112,  113,  114,    6,    1,    2,    3,    4,    5,
 /*   350 */    75,   29,   74,  124,   10,   40,   41,   42,   43,   44,
 /*   360 */    45,   76,   47,  134,   95,  136,  137,  138,  139,  140,
 /*   370 */   221,   74,   49,   50,  225,  226,  227,  199,  200,  216,
 /*   380 */   202,  232,  233,  234,   40,   41,  199,  200,  181,  202,
 /*   390 */    46,   74,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   400 */    56,   57,   58,  173,   60,   61,  121,  122,    6,   65,
 /*   410 */    66,   67,   74,  206,  207,   71,   72,   95,   74,   75,
 /*   420 */    98,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   430 */    86,   87,   88,   89,   90,   72,   92,   93,   11,   95,
 /*   440 */    96,   97,   98,   99,   73,  101,  124,  103,  104,  105,
 /*   450 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  226,
 /*   460 */   211,  212,  118,  214,  215,  232,  217,  218,  124,   98,
 /*   470 */     1,    2,    3,    4,    5,   73,  105,  100,  134,   10,
 /*   480 */   136,  137,  138,  139,  140,   26,   27,   28,   29,   30,
 /*   490 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*   500 */    41,   42,   43,   44,   45,   95,   47,  181,   98,   40,
 /*   510 */    41,  199,  200,  173,  202,   46,   59,   48,   49,   50,
 /*   520 */    51,   52,   53,   54,   55,   56,   57,   58,  188,   60,
 /*   530 */    61,  165,  206,  207,   65,   66,   67,    6,   72,  129,
 /*   540 */    71,   72,  173,   74,   75,   76,   77,   78,   79,   80,
 /*   550 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   560 */   191,   92,   93,    6,   95,   96,   97,   98,   99,  153,
 /*   570 */   101,   73,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   580 */   111,  112,  113,  114,  127,    1,    2,    3,    4,    5,
 /*   590 */    98,   62,   63,  124,   10,  226,  227,  228,  229,  199,
 /*   600 */   200,  232,  202,  134,   73,  136,  137,  138,  139,  140,
 /*   610 */   115,  242,   43,   44,   45,  221,   47,   95,   95,  225,
 /*   620 */   226,  227,  180,  226,   40,   41,  232,  233,  234,  232,
 /*   630 */    46,   74,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   640 */    56,   57,   58,   73,   60,   61,  124,  124,   99,   65,
 /*   650 */    66,   67,    6,   74,   75,   71,   72,  173,   74,   75,
 /*   660 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   670 */    86,   87,   88,   89,   90,  191,   92,   93,   95,   95,
 /*   680 */    96,   97,   98,   99,   29,  101,    6,  103,  104,  105,
 /*   690 */   106,  107,  108,  109,  110,  111,  112,  113,  114,   59,
 /*   700 */     1,    2,    3,    4,    5,   62,   63,  124,  124,   10,
 /*   710 */   226,  227,  228,  229,   75,   75,  232,  173,  134,   73,
 /*   720 */   136,  137,  138,  139,  140,   73,  242,  199,  200,  201,
 /*   730 */   202,  203,  188,   74,   95,  199,  200,   98,  202,   40,
 /*   740 */    41,  199,  200,   11,  202,   46,  127,   48,   49,   50,
 /*   750 */    51,   52,   53,   54,   55,   56,   57,   58,  224,   60,
 /*   760 */    61,  127,   72,  124,   65,   66,   67,    6,  204,  180,
 /*   770 */    71,   72,   95,   74,   75,   98,   77,   78,   79,   80,
 /*   780 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   790 */    60,   92,   93,   73,   95,   96,   97,   98,   99,   95,
 /*   800 */   101,  124,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   810 */   111,  112,  113,  114,  199,  200,  117,  202,    1,    2,
 /*   820 */     3,    4,    5,  124,  159,   95,   95,   10,   98,   98,
 /*   830 */    75,    6,  163,  134,   73,  136,  137,  138,  139,  140,
 /*   840 */   199,  200,   11,  202,  199,  200,   75,  202,   59,  116,
 /*   850 */    95,   72,    6,   98,  124,  124,  128,   40,   41,  199,
 /*   860 */   200,   72,  202,   46,   75,   48,   49,   50,   51,   52,
 /*   870 */    53,   54,   55,   56,   57,   58,    6,   60,   61,  124,
 /*   880 */   109,   72,   65,   66,   67,  237,   73,    6,   71,   72,
 /*   890 */   218,   74,   75,   73,   77,   78,   79,   80,   81,   82,
 /*   900 */    83,   84,   85,   86,   87,   88,   89,   90,   72,   92,
 /*   910 */    93,   76,   95,   96,   97,   98,   99,   75,  101,   73,
 /*   920 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   930 */   113,  114,   72,    1,    2,    3,    4,    5,   11,   72,
 /*   940 */   123,  124,   10,   73,  199,  200,   72,  202,   97,  199,
 /*   950 */   200,  134,  202,  136,  137,  138,  139,  140,   72,  199,
 /*   960 */   200,   11,  202,  199,  200,   74,  202,   72,   78,   98,
 /*   970 */    98,   72,   40,   41,  199,  200,   72,  202,   46,   72,
 /*   980 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   990 */    58,  109,   60,   61,   74,   11,   73,   65,   66,   67,
 /*  1000 */    91,   72,   74,   71,   72,  116,   74,   75,   76,   77,
 /*  1010 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1020 */    88,   89,   90,  238,   92,   93,   11,   95,   96,   97,
 /*  1030 */    98,   99,   76,  101,   94,  103,  104,  105,  106,  107,
 /*  1040 */   108,  109,  110,  111,  112,  113,  114,   98,    1,    2,
 /*  1050 */     3,    4,    5,   98,   72,   74,  124,   10,   95,   11,
 /*  1060 */   239,  183,  205,   76,   73,   72,  134,   11,  136,  137,
 /*  1070 */   138,  139,  140,   74,   74,    6,   11,  121,  122,   74,
 /*  1080 */   128,   11,   99,  210,   98,   74,   72,   40,   41,  150,
 /*  1090 */    95,   75,  150,   46,  150,   48,   49,   50,   51,   52,
 /*  1100 */    53,   54,   55,   56,   57,   58,   94,   60,   61,   72,
 /*  1110 */   152,   73,   65,   66,   67,   72,  128,  204,   71,   72,
 /*  1120 */   116,   74,   75,   73,   77,   78,   79,   80,   81,   82,
 /*  1130 */    83,   84,   85,   86,   87,   88,   89,   90,   74,   92,
 /*  1140 */    93,   73,   95,   96,   97,   98,   99,  173,  101,   76,
 /*  1150 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1160 */   113,  114,   47,  150,  198,   72,  119,   72,   59,   98,
 /*  1170 */    98,  124,   73,    1,    2,    3,    4,    5,  198,   95,
 /*  1180 */    73,  134,   10,  136,  137,  138,  139,  140,   27,   28,
 /*  1190 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  1200 */    39,   40,   41,   42,   43,   44,   45,  150,   47,   74,
 /*  1210 */   204,   11,   40,   41,  243,  198,  198,  150,   46,   72,
 /*  1220 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1230 */    58,   72,   60,   61,  185,  150,   95,   65,   66,   67,
 /*  1240 */   150,   73,   24,   71,   72,  223,   74,   75,  150,   77,
 /*  1250 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1260 */    88,   89,   90,  150,   92,   93,  150,   95,   96,   97,
 /*  1270 */    98,   99,   98,  101,   75,  103,  104,  105,  106,  107,
 /*  1280 */   108,  109,  110,  111,  112,  113,  114,  150,    1,    2,
 /*  1290 */     3,    4,    5,  150,   74,  150,  124,   10,  116,  185,
 /*  1300 */   150,  173,   74,  100,  187,   24,  134,    6,  136,  137,
 /*  1310 */   138,  139,  140,   72,   75,   98,  168,   74,  127,  192,
 /*  1320 */    73,  192,   11,  115,  213,   64,   95,   40,   41,   72,
 /*  1330 */   168,  176,   73,   46,  204,   48,   49,   50,   51,   52,
 /*  1340 */    53,   54,   55,   56,   57,   58,  116,   60,   61,   75,
 /*  1350 */   173,   73,   65,   66,   67,   72,  244,   75,   71,   72,
 /*  1360 */   127,   74,   75,   75,   77,   78,   79,   80,   81,   82,
 /*  1370 */    83,   84,   85,   86,   87,   88,   89,   90,  195,   92,
 /*  1380 */    93,   74,   95,   96,   97,   98,   99,  102,  101,  184,
 /*  1390 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1400 */   113,  114,   72,  171,   24,  246,  246,  246,  246,  246,
 /*  1410 */   246,  124,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  1420 */   246,  134,   10,  136,  137,  138,  139,  140,  246,  246,
 /*  1430 */   246,  246,  246,  246,  246,  246,   24,   11,   12,   13,
 /*  1440 */    14,   15,   16,   17,   18,   19,   20,   21,   22,  246,
 /*  1450 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1460 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1470 */    58,  246,   60,   61,  246,   49,   50,   65,  246,  246,
 /*  1480 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1490 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1500 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  1510 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  1520 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  1530 */   246,  246,  246,  246,  246,  246,  124,  246,    1,    2,
 /*  1540 */     3,    4,    5,  246,  246,  246,  134,   10,  136,  137,
 /*  1550 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  1560 */   246,   24,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1570 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  1580 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  1590 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  1600 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  1610 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  1620 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  1630 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  1640 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1650 */   113,  114,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1660 */   246,  124,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  1670 */   246,  134,   10,  136,  137,  138,  139,  140,  246,  246,
 /*  1680 */   246,  246,  246,  246,  246,  246,   24,  246,  246,  246,
 /*  1690 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1700 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1710 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1720 */    58,  246,   60,   61,  246,  246,  246,   65,  246,  246,
 /*  1730 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1740 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1750 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  1760 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  1770 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  1780 */   246,  246,  246,  246,  246,  246,  124,  246,    1,    2,
 /*  1790 */     3,    4,    5,  246,  246,  246,  134,   10,  136,  137,
 /*  1800 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  1810 */   246,   24,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1820 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  1830 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  1840 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  1850 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  1860 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  1870 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  1880 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  1890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1900 */   113,  114,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1910 */   246,  124,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  1920 */   246,  134,   10,  136,  137,  138,  139,  140,  246,  246,
 /*  1930 */   246,  246,  246,  246,  246,  246,   24,  246,  246,  246,
 /*  1940 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1950 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1960 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1970 */    58,  246,   60,   61,  246,  246,  246,   65,  246,  246,
 /*  1980 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1990 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2000 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  2010 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2020 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2030 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2040 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2050 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  2060 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2070 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2080 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2090 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  2100 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  2110 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  2120 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  2130 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2140 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  2150 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2160 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2170 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2180 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2190 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2200 */    58,  246,   60,   61,   65,   66,   67,   68,   69,   70,
 /*  2210 */   246,  246,  246,  246,   72,   76,   25,   26,   27,   28,
 /*  2220 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  2230 */    39,   40,   41,   42,   43,   44,   45,   95,   47,  246,
 /*  2240 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2250 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2260 */     3,    4,    5,  246,  125,  126,  124,   10,  246,  246,
 /*  2270 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2280 */   138,  139,  140,  246,  246,  246,   29,  246,  246,  246,
 /*  2290 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2300 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2310 */    53,   54,   55,   56,   57,   58,  246,   60,   61,   65,
 /*  2320 */    66,   67,   68,   69,   70,  246,  246,  246,  246,   72,
 /*  2330 */    76,  246,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  2340 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  2350 */   246,   47,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2360 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2370 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  125,
 /*  2380 */   126,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2390 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2400 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2410 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2420 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2430 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  2440 */   246,  246,  246,  246,   72,   73,  246,  246,   29,   30,
 /*  2450 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  2460 */    41,   42,   43,   44,   45,  246,   47,   95,  246,  246,
 /*  2470 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2480 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2490 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2500 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2510 */   138,  139,  140,  246,  246,  246,   29,  246,  246,  246,
 /*  2520 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2530 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2540 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2550 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  2560 */   246,  246,  246,  246,   30,   31,   32,   33,   34,   35,
 /*  2570 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  2580 */   246,   47,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2590 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2600 */   113,  114,  246,    1,    2,    3,    4,    5,   40,   41,
 /*  2610 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2620 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2630 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2640 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2650 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2660 */    58,  246,   60,   61,  246,  246,   98,  246,  246,  246,
 /*  2670 */   246,  246,  246,  105,   72,  107,  108,  109,  110,  111,
 /*  2680 */   112,  113,  114,  246,  246,  246,  246,  246,  246,  246,
 /*  2690 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  2700 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2710 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2720 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2730 */   246,  246,  246,  246,  246,  246,  134,  161,  136,  137,
 /*  2740 */   138,  139,  140,  167,  246,  246,  170,  246,  246,  173,
 /*  2750 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2760 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2770 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2780 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  2790 */   246,   74,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  2800 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  2810 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2820 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2830 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  2840 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2850 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2860 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2870 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2880 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2890 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  2900 */   246,  246,  246,  246,   72,  246,   74,  246,  246,  246,
 /*  2910 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2920 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  2930 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2940 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2950 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2960 */   246,  246,  246,  161,  246,  246,  134,  246,  136,  137,
 /*  2970 */   138,  139,  140,  246,  246,  173,   29,  246,  246,  246,
 /*  2980 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2990 */   246,  246,  190,   46,  246,   48,   49,   50,   51,   52,
 /*  3000 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3010 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3020 */   246,  246,  220,  246,  246,  246,  246,  225,  226,  227,
 /*  3030 */   228,  229,  230,  246,  232,  246,  246,  235,  246,  246,
 /*  3040 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3050 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3060 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  3070 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  3080 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  3090 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3100 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  3110 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3120 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  3130 */   246,  246,  246,  246,   72,  246,  246,  246,  246,  246,
 /*  3140 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3150 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3160 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3170 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  3180 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  3190 */   246,  161,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  3200 */   138,  139,  140,  173,  246,  246,   29,  246,  246,  246,
 /*  3210 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  3220 */   190,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  3230 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3240 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3250 */   220,  246,  246,  246,  246,  225,  226,  227,  228,  229,
 /*  3260 */   230,  246,  232,  246,  246,  235,  246,  246,  246,  246,
 /*  3270 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3280 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3290 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  3300 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  3310 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  3320 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3330 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  3340 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3350 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  3360 */   246,  246,  246,  246,   72,  246,   74,  246,  246,  246,
 /*  3370 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3380 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3390 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3400 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  3410 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  3420 */   246,  246,  161,  246,  246,  246,  134,  246,  136,  137,
 /*  3430 */   138,  139,  140,  246,  173,  246,  246,  246,  246,  246,
 /*  3440 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  3450 */   246,  246,  246,   46,  193,   48,   49,   50,   51,   52,
 /*  3460 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3470 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3480 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /*  3490 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  3500 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3510 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3520 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  3530 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  3540 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  3550 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3560 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  3570 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3580 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  3590 */   246,  246,  246,  246,   72,  246,  246,  246,  246,  246,
 /*  3600 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3610 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3620 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3630 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  3640 */   246,  246,  246,  246,  246,  246,  124,  246,  246,  146,
 /*  3650 */   147,  148,  149,  246,  151,  246,  134,  154,  136,  137,
 /*  3660 */   138,  139,  140,  160,  161,  246,  246,  246,  246,  246,
 /*  3670 */   246,  246,  246,  246,  246,  246,  173,  246,  246,  246,
 /*  3680 */   177,  178,  179,  246,  246,  182,  246,  246,  246,  186,
 /*  3690 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  3700 */   246,  246,  199,  246,   11,   12,   13,   14,   15,   16,
 /*  3710 */    17,   18,   19,   20,   21,   22,  246,  246,  246,  246,
 /*  3720 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  3730 */   227,  228,  229,  230,  246,  232,    7,    8,    9,  246,
 /*  3740 */   246,  246,   49,   50,  241,  246,  246,  246,  246,  246,
 /*  3750 */   246,  246,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3760 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  3770 */    41,   42,   43,   44,   45,  246,   47,  246,  246,  246,
 /*  3780 */   246,  246,  246,  246,   91,  246,  246,  246,  246,   59,
 /*  3790 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3800 */   246,  246,  246,   74,  246,   75,   76,  246,  161,  246,
 /*  3810 */   246,    7,    8,    9,  167,  246,  246,  170,  246,  246,
 /*  3820 */   173,  246,  246,  246,  246,   95,  246,   23,   98,   25,
 /*  3830 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  3840 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  3850 */   246,   47,  246,  246,  246,  246,  246,  127,  128,  129,
 /*  3860 */   130,  131,  132,  133,  246,  135,  246,  220,  246,  139,
 /*  3870 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  3880 */    76,  246,  246,  246,  246,  246,  246,  246,    7,    8,
 /*  3890 */     9,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3900 */   246,  246,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  3910 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  3920 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  3930 */   246,  246,  246,  246,  246,  246,  246,  246,   11,   12,
 /*  3940 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  3950 */   246,  246,  246,  246,   73,  246,  246,  246,  246,  246,
 /*  3960 */   246,  246,    7,    8,    9,  246,  246,  246,  246,  246,
 /*  3970 */   246,  246,  246,  246,  246,  246,   49,   50,   23,  246,
 /*  3980 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  3990 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  4000 */    45,   74,   47,  246,  246,  246,  246,  246,  246,   59,
 /*  4010 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4020 */   246,  246,  246,  246,  246,   75,   76,  246,   73,  246,
 /*  4030 */   246,  246,  246,  246,  246,  246,    7,    8,    9,  246,
 /*  4040 */   246,  246,  246,  246,  246,   95,  246,  246,   98,  246,
 /*  4050 */   246,  246,   23,  246,   25,   26,   27,   28,   29,   30,
 /*  4060 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  4070 */    41,   42,   43,   44,   45,  246,   47,  127,  128,  129,
 /*  4080 */   130,  131,  132,  133,  246,  135,   59,  246,  138,  246,
 /*  4090 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4100 */   246,  246,   75,   76,  246,   76,  161,  246,  246,  246,
 /*  4110 */   246,  166,  246,    7,    8,    9,  246,  246,  173,  246,
 /*  4120 */   246,  246,   95,  246,  246,   98,  246,  246,  246,   23,
 /*  4130 */   246,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4140 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4150 */    44,   45,  246,   47,  127,  128,  129,  130,  131,  132,
 /*  4160 */   133,  246,  135,  246,  219,  220,  246,  246,  141,  246,
 /*  4170 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  4180 */    74,  246,  246,  246,  246,  246,  246,  246,    7,    8,
 /*  4190 */     9,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4200 */   246,  246,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  4210 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4220 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  4230 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4240 */   246,  246,  246,  246,  161,  246,  246,  246,  246,  246,
 /*  4250 */   246,  246,  246,  246,   73,  246,  173,  246,  246,  246,
 /*  4260 */   246,  246,    7,    8,    9,  246,  246,  246,  246,  246,
 /*  4270 */   246,  246,  189,  246,  246,  246,  246,  246,   23,  246,
 /*  4280 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  4290 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  4300 */    45,  246,   47,  220,  246,  246,  246,  246,  225,  226,
 /*  4310 */   227,  228,  229,  230,  246,  232,  246,  246,  161,  246,
 /*  4320 */   246,  246,  246,  246,  246,  246,  246,  246,   73,  246,
 /*  4330 */   173,  246,  161,  246,  246,  246,    7,    8,    9,  246,
 /*  4340 */   246,  246,  246,  246,  173,  246,  246,  246,  246,  246,
 /*  4350 */   246,  246,   23,  246,   25,   26,   27,   28,   29,   30,
 /*  4360 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  4370 */    41,   42,   43,   44,   45,  246,   47,  220,  246,  246,
 /*  4380 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  4390 */   246,  220,  235,  246,  246,  246,  225,  226,  227,  228,
 /*  4400 */   229,  230,  246,  232,  246,   76,  246,  246,  246,  246,
 /*  4410 */   246,  240,  246,    7,    8,    9,  246,  246,  246,  246,
 /*  4420 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   23,
 /*  4430 */   246,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4440 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4450 */    44,   45,    6,   47,    7,    8,    9,   11,   12,   13,
 /*  4460 */    14,   15,   16,   17,   18,   19,   20,   21,   22,  246,
 /*  4470 */    23,  246,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4480 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  4490 */    43,   44,   45,  246,   47,   49,   50,  246,  246,  246,
 /*  4500 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4510 */   246,  246,  246,  246,  161,  246,  246,  246,  246,   73,
 /*  4520 */    73,  246,  246,  170,  246,  161,  173,  246,    7,    8,
 /*  4530 */     9,  246,  246,  246,  128,  246,  246,  173,  246,  246,
 /*  4540 */   246,  246,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  4550 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4560 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  4570 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  4580 */   227,  228,  229,  230,  220,  232,  246,  246,  246,  225,
 /*  4590 */   226,  227,  228,  229,  230,   74,  232,  161,  246,  246,
 /*  4600 */   246,  246,  246,    7,    8,    9,  170,  246,  246,  173,
 /*  4610 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   23,
 /*  4620 */   246,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4630 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4640 */    44,   45,  246,   47,  246,  246,  246,  246,  246,  246,
 /*  4650 */   246,  246,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  4660 */   246,  225,  226,  227,  228,  229,  230,  246,  232,   73,
 /*  4670 */   246,  246,  246,  246,  246,  246,  246,    7,    8,    9,
 /*  4680 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4690 */   246,  246,  246,   23,  246,   25,   26,   27,   28,   29,
 /*  4700 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4710 */    40,   41,   42,   43,   44,   45,  246,   47,  246,  246,
 /*  4720 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4730 */   246,  246,  246,  246,  246,  161,  246,  246,  246,  246,
 /*  4740 */   246,  246,  246,  246,   74,  246,  161,  173,  246,  246,
 /*  4750 */   246,  246,    7,    8,    9,  246,  246,  246,  173,  246,
 /*  4760 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  4770 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  4780 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  4790 */    45,  246,   47,  219,  220,  246,  246,  246,  246,  225,
 /*  4800 */   226,  227,  228,  229,  230,  220,  232,  246,  246,  246,
 /*  4810 */   225,  226,  227,  228,  229,  230,  246,  232,   73,  246,
 /*  4820 */   246,  246,  246,  246,  246,  246,    7,    8,    9,  246,
 /*  4830 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4840 */   246,  246,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4850 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  4860 */    41,   42,   43,   44,   45,    6,   47,    7,    8,    9,
 /*  4870 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  4880 */    21,   22,  246,   23,  246,   25,   26,   27,   28,   29,
 /*  4890 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4900 */    40,   41,   42,   43,   44,   45,  246,   47,   49,   50,
 /*  4910 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4920 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4930 */   246,  246,   73,   73,  246,  246,  246,  246,  246,  246,
 /*  4940 */   246,    7,    8,    9,  246,  246,  246,  246,  246,  246,
 /*  4950 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  4960 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  4970 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  4980 */   246,   47,    7,    8,    9,  246,  246,  246,  246,  246,
 /*  4990 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  5000 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5010 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5020 */    45,  246,   47,  246,  246,  246,  246,  246,  246,  246,
 /*  5030 */   246,  246,  246,  246,  246,   59,  246,  246,  246,  246,
 /*  5040 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  115,
 /*  5050 */   246,   75,   76,  246,  246,  246,  246,  246,  246,  246,
 /*  5060 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5070 */   246,   95,  246,  246,   98,  246,  246,  246,  246,  246,
 /*  5080 */   246,  246,  106,  246,  246,  246,  246,  246,  246,  246,
 /*  5090 */   115,  246,  246,  246,  246,  246,  246,  246,    7,    8,
 /*  5100 */     9,  246,  246,  127,  128,  129,  130,  131,  132,  133,
 /*  5110 */   246,  135,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  5120 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  5130 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  5140 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5150 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5160 */   246,  246,  246,  246,   73,  246,  161,  246,  246,  246,
 /*  5170 */   246,  246,    7,    8,    9,  170,  246,  246,  173,  246,
 /*  5180 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  5190 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5200 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5210 */    45,  246,   47,  246,  246,  246,  246,  246,  246,  246,
 /*  5220 */   246,  246,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  5230 */   225,  226,  227,  228,  229,  230,  161,  232,  246,  246,
 /*  5240 */   246,   76,  246,  246,  246,  170,  246,  246,  173,    7,
 /*  5250 */     8,    9,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5260 */   246,  246,  246,  246,  246,   23,  246,   25,   26,   27,
 /*  5270 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  5280 */    38,   39,   40,   41,   42,   43,   44,   45,  246,   47,
 /*  5290 */   246,  246,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  5300 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  5310 */   246,  246,  246,  246,  246,  246,   74,  246,  246,  246,
 /*  5320 */   246,  246,  246,  246,    7,    8,    9,  246,  246,  246,
 /*  5330 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5340 */    23,  246,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  5350 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  5360 */    43,   44,   45,  246,   47,  246,  246,  246,  246,  246,
 /*  5370 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5380 */   246,  246,  246,  246,  246,  246,  246,  161,  246,  246,
 /*  5390 */   246,  246,  246,   76,  246,  246,  170,  246,  161,  173,
 /*  5400 */   246,    7,    8,    9,  246,  246,  246,  170,  246,  246,
 /*  5410 */   173,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  5420 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  5430 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  5440 */   246,   47,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  5450 */   246,  225,  226,  227,  228,  229,  230,  220,  232,  246,
 /*  5460 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  5470 */    76,  146,  147,  148,  149,  246,  151,  246,  246,  246,
 /*  5480 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  5490 */   246,  246,  246,  246,  246,  246,  246,  246,  173,  246,
 /*  5500 */   246,  246,  177,  178,  179,  246,  246,  182,  246,  246,
 /*  5510 */   246,  186,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  5520 */   161,  196,  246,  246,  199,  246,  246,  246,  246,  170,
 /*  5530 */   246,  246,  173,  246,  246,  246,  246,  246,  246,  246,
 /*  5540 */   246,  246,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  5550 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  5560 */   246,  246,  246,  161,  246,  246,  241,  145,  146,  147,
 /*  5570 */   148,  149,  170,  151,  246,  173,  246,  246,  246,  220,
 /*  5580 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /*  5590 */   246,  232,  246,  246,  246,  173,  246,  246,  246,  246,
 /*  5600 */   178,  179,  246,  246,  182,  246,  246,  246,  186,  246,
 /*  5610 */   246,  189,  246,  246,  246,  193,  194,  246,  196,  246,
 /*  5620 */   246,  199,  220,  246,  246,  246,  246,  225,  226,  227,
 /*  5630 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  5640 */   246,  246,  220,  246,  246,  246,  246,  225,  226,  227,
 /*  5650 */   228,  229,  230,  246,  232,    7,    8,    9,  246,  246,
 /*  5660 */   246,  246,  246,  241,  246,  246,  246,  246,  246,  246,
 /*  5670 */   246,   23,  246,   25,   26,   27,   28,   29,   30,   31,
 /*  5680 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  5690 */    42,   43,   44,   45,  246,   47,    8,    9,  246,  246,
 /*  5700 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5710 */   246,   23,  246,   25,   26,   27,   28,   29,   30,   31,
 /*  5720 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  5730 */    42,   43,   44,   45,    9,   47,  246,  246,  246,  246,
 /*  5740 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  5750 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5760 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5770 */    45,  246,   47,  246,  246,  246,  246,  246,  246,  246,
 /*  5780 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  146,
 /*  5790 */   246,  246,  149,  246,  151,  246,  246,  246,  246,  246,
 /*  5800 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  5810 */   246,  246,  169,  246,  246,  246,  173,  246,  246,  246,
 /*  5820 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5830 */   246,  246,  189,  246,  246,  146,  193,  194,  149,  196,
 /*  5840 */   151,  246,  199,  246,  246,  246,  246,  246,  246,  160,
 /*  5850 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5860 */   246,  172,  173,  220,  246,  246,  246,  246,  225,  226,
 /*  5870 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  246,
 /*  5880 */   246,  246,  193,  194,  241,  196,  246,  161,  199,  246,
 /*  5890 */   246,  246,  246,  246,  246,  246,  246,  146,  246,  173,
 /*  5900 */   149,  246,  151,  246,  246,  246,  246,  156,  246,  220,
 /*  5910 */   246,  160,  161,  246,  225,  226,  227,  228,  229,  230,
 /*  5920 */   246,  232,  246,  246,  173,  246,  246,  246,  246,  246,
 /*  5930 */   241,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5940 */   189,  246,  246,  246,  193,  194,  220,  196,  246,  246,
 /*  5950 */   199,  225,  226,  227,  228,  229,  230,  246,  232,  146,
 /*  5960 */   246,  246,  149,  246,  151,  246,  246,  246,  246,  246,
 /*  5970 */   246,  220,  246,  160,  161,  246,  225,  226,  227,  228,
 /*  5980 */   229,  230,  169,  232,  146,  246,  173,  149,  246,  151,
 /*  5990 */   246,  246,  241,  246,  246,  246,  158,  246,  160,  161,
 /*  6000 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  6010 */   246,  173,  199,  246,  151,  246,  246,  246,  246,  246,
 /*  6020 */   246,  246,  246,  160,  161,  246,  246,  189,  246,  246,
 /*  6030 */   246,  193,  194,  220,  196,  246,  173,  199,  225,  226,
 /*  6040 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  6050 */   246,  246,  189,  246,  241,  246,  193,  194,  220,  196,
 /*  6060 */   246,  246,  199,  225,  226,  227,  228,  229,  230,  246,
 /*  6070 */   232,  208,  209,  246,  246,  246,  151,  246,  246,  241,
 /*  6080 */   246,  246,  246,  220,  246,  160,  161,  246,  225,  226,
 /*  6090 */   227,  228,  229,  230,  246,  232,  246,  246,  173,  246,
 /*  6100 */   246,  246,  246,  246,  241,  246,  246,  246,  246,  246,
 /*  6110 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  6120 */   246,  196,  246,  246,  199,  246,  151,  246,  246,  246,
 /*  6130 */   246,  246,  246,  208,  209,  160,  161,  246,  246,  246,
 /*  6140 */   246,  246,  246,  246,  246,  220,  246,  246,  173,  246,
 /*  6150 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6160 */   246,  246,  246,  246,  189,  246,  241,  246,  193,  194,
 /*  6170 */   246,  196,  197,  246,  199,  151,  246,  246,  246,  246,
 /*  6180 */   246,  246,  246,  246,  160,  161,  246,  246,  246,  246,
 /*  6190 */   246,  246,  246,  246,  246,  220,  246,  173,  246,  246,
 /*  6200 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6210 */   246,  236,  246,  189,  161,  246,  241,  193,  194,  151,
 /*  6220 */   196,  246,  246,  199,  246,  157,  173,  246,  160,  161,
 /*  6230 */   246,  246,  208,  209,  246,  246,  246,  246,  246,  246,
 /*  6240 */   246,  173,  246,  246,  220,  246,  193,  246,  246,  225,
 /*  6250 */   226,  227,  228,  229,  230,  246,  232,  189,  246,  246,
 /*  6260 */   246,  193,  194,  246,  196,  241,  246,  199,  246,  246,
 /*  6270 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  6280 */   227,  228,  229,  230,  246,  232,  246,  246,  220,  246,
 /*  6290 */   246,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  6300 */   232,  246,  151,  246,  246,  246,  246,  246,  246,  241,
 /*  6310 */   246,  160,  161,  245,  246,  246,  246,  246,  246,  246,
 /*  6320 */   246,  246,  246,  246,  173,  246,  246,  151,  246,  246,
 /*  6330 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  6340 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  6350 */   199,  246,  151,  246,  246,  246,  246,  246,  157,  208,
 /*  6360 */   209,  160,  161,  246,  246,  189,  246,  246,  246,  193,
 /*  6370 */   194,  220,  196,  246,  173,  199,  225,  226,  227,  228,
 /*  6380 */   229,  230,  246,  232,  208,  209,  246,  246,  246,  246,
 /*  6390 */   189,  246,  241,  246,  193,  194,  220,  196,  246,  246,
 /*  6400 */   199,  225,  226,  227,  228,  229,  230,  246,  232,  146,
 /*  6410 */   246,  246,  149,  246,  151,  246,  246,  241,  246,  246,
 /*  6420 */   246,  220,  246,  160,  161,  246,  225,  226,  227,  228,
 /*  6430 */   229,  230,  246,  232,  246,  246,  173,  246,  246,  246,
 /*  6440 */   246,  246,  241,  246,  246,  246,  245,  246,  246,  246,
 /*  6450 */   246,  246,  189,  246,  246,  246,  193,  194,  146,  196,
 /*  6460 */   246,  149,  199,  151,  246,  246,  246,  246,  246,  246,
 /*  6470 */   246,  246,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  6480 */   246,  246,  246,  220,  246,  173,  246,  246,  225,  226,
 /*  6490 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  6500 */   246,  189,  246,  246,  241,  193,  194,  146,  196,  246,
 /*  6510 */   149,  199,  151,  246,  246,  246,  246,  246,  246,  246,
 /*  6520 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /*  6530 */   246,  246,  220,  246,  173,  246,  246,  225,  226,  227,
 /*  6540 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  6550 */   189,  246,  246,  241,  193,  194,  146,  196,  246,  149,
 /*  6560 */   199,  151,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6570 */   160,  161,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6580 */   246,  220,  246,  173,  246,  246,  225,  226,  227,  228,
 /*  6590 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  189,
 /*  6600 */   246,  246,  241,  193,  194,  246,  196,  246,  246,  199,
 /*  6610 */   151,  246,  246,  246,  246,  246,  246,  246,  246,  160,
 /*  6620 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6630 */   220,  246,  173,  246,  246,  225,  226,  227,  228,  229,
 /*  6640 */   230,  246,  232,  246,  246,  246,  246,  246,  189,  246,
 /*  6650 */   246,  241,  193,  194,  246,  196,  151,  246,  199,  246,
 /*  6660 */   246,  246,  157,  246,  246,  160,  161,  208,  209,  246,
 /*  6670 */   246,  246,  246,  246,  246,  246,  246,  246,  173,  220,
 /*  6680 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  6690 */   246,  232,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  6700 */   241,  196,  161,  246,  199,  246,  151,  246,  246,  246,
 /*  6710 */   246,  246,  246,  246,  173,  160,  161,  246,  246,  164,
 /*  6720 */   246,  246,  246,  246,  246,  220,  246,  246,  173,  246,
 /*  6730 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6740 */   246,  246,  246,  246,  189,  246,  241,  246,  193,  194,
 /*  6750 */   245,  196,  246,  246,  199,  151,  246,  246,  246,  246,
 /*  6760 */   246,  220,  246,  246,  160,  161,  225,  226,  227,  228,
 /*  6770 */   229,  230,  246,  232,  246,  220,  246,  173,  246,  246,
 /*  6780 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6790 */   246,  246,  246,  189,  246,  246,  241,  193,  194,  246,
 /*  6800 */   196,  246,  246,  199,  151,  246,  246,  246,  246,  246,
 /*  6810 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  6820 */   246,  246,  246,  246,  220,  246,  173,  246,  246,  225,
 /*  6830 */   226,  227,  228,  229,  230,  231,  232,  246,  246,  246,
 /*  6840 */   246,  246,  189,  246,  246,  241,  193,  194,  246,  196,
 /*  6850 */   151,  246,  199,  246,  246,  246,  246,  246,  246,  160,
 /*  6860 */   161,  246,  246,  246,  246,  246,  246,  151,  246,  246,
 /*  6870 */   246,  246,  173,  220,  246,  246,  160,  161,  225,  226,
 /*  6880 */   227,  228,  229,  230,  231,  232,  246,  246,  189,  173,
 /*  6890 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  246,
 /*  6900 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  6910 */   194,  246,  196,  246,  246,  199,  246,  246,  246,  220,
 /*  6920 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  6930 */   246,  232,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  6940 */   241,  225,  226,  227,  228,  229,  230,  246,  232,  151,
 /*  6950 */   246,  246,  246,  246,  246,  246,  246,  241,  160,  161,
 /*  6960 */   246,  246,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  6970 */   246,  173,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  6980 */   246,  246,  246,  246,  246,  246,  246,  189,  173,  246,
 /*  6990 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /*  7000 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  7010 */   246,  196,  151,  246,  199,  246,  246,  246,  220,  246,
 /*  7020 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  7030 */   232,  246,  246,  246,  173,  220,  246,  246,  246,  241,
 /*  7040 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  7050 */   189,  246,  246,  246,  193,  194,  241,  196,  246,  246,
 /*  7060 */   199,  151,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7070 */   160,  161,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7080 */   246,  220,  246,  173,  246,  246,  225,  226,  227,  228,
 /*  7090 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  189,
 /*  7100 */   246,  246,  241,  193,  194,  246,  196,  246,  246,  199,
 /*  7110 */   151,  246,  246,  246,  246,  246,  246,  246,  246,  160,
 /*  7120 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7130 */   220,  246,  173,  246,  246,  225,  226,  227,  228,  229,
 /*  7140 */   230,  246,  232,  246,  246,  246,  246,  246,  189,  246,
 /*  7150 */   246,  241,  193,  194,  246,  196,  151,  246,  199,  246,
 /*  7160 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  7170 */   246,  246,  246,  151,  246,  246,  246,  246,  173,  220,
 /*  7180 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /*  7190 */   246,  232,  246,  246,  189,  173,  246,  246,  193,  194,
 /*  7200 */   241,  196,  246,  246,  199,  246,  246,  246,  246,  246,
 /*  7210 */   246,  189,  246,  246,  246,  193,  194,  246,  196,  246,
 /*  7220 */   246,  199,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  7230 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  7240 */   246,  246,  220,  246,  246,  246,  241,  225,  226,  227,
 /*  7250 */   228,  229,  230,  246,  232,  151,  246,  246,  246,  246,
 /*  7260 */   246,  246,  246,  241,  160,  161,  246,  246,  246,  246,
 /*  7270 */   246,  246,  151,  246,  246,  246,  246,  173,  246,  246,
 /*  7280 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /*  7290 */   246,  246,  246,  189,  173,  246,  246,  193,  194,  246,
 /*  7300 */   196,  246,  246,  199,  246,  246,  246,  246,  246,  246,
 /*  7310 */   189,  246,  246,  246,  193,  194,  246,  196,  151,  246,
 /*  7320 */   199,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /*  7330 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  7340 */   173,  220,  246,  246,  246,  241,  225,  226,  227,  228,
 /*  7350 */   229,  230,  246,  232,  246,  246,  189,  246,  246,  246,
 /*  7360 */   193,  194,  241,  196,  246,  246,  199,  151,  246,  246,
 /*  7370 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  7380 */   246,  246,  246,  246,  246,  246,  246,  220,  246,  173,
 /*  7390 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  7400 */   246,  246,  246,  246,  246,  189,  246,  246,  241,  193,
 /*  7410 */   194,  246,  196,  246,  246,  199,  151,  246,  246,  246,
 /*  7420 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  7430 */   246,  246,  246,  246,  246,  246,  220,  246,  173,  246,
 /*  7440 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  7450 */   246,  246,  246,  246,  189,  246,  246,  241,  193,  194,
 /*  7460 */   246,  196,  151,  246,  199,  246,  246,  246,  246,  246,
 /*  7470 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  151,
 /*  7480 */   246,  246,  246,  246,  173,  220,  246,  246,  160,  161,
 /*  7490 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  7500 */   189,  173,  246,  246,  193,  194,  241,  196,  246,  246,
 /*  7510 */   199,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  7520 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /*  7530 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /*  7540 */   229,  230,  246,  232,  246,  246,  246,  246,  220,  246,
 /*  7550 */   246,  246,  241,  225,  226,  227,  228,  229,  230,  246,
 /*  7560 */   232,  151,  246,  246,  246,  246,  246,  246,  246,  241,
 /*  7570 */   160,  161,  246,  246,  246,  246,  246,  246,  151,  246,
 /*  7580 */   246,  246,  246,  173,  246,  246,  246,  160,  161,  246,
 /*  7590 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  7600 */   173,  246,  246,  193,  194,  246,  196,  246,  246,  199,
 /*  7610 */   246,  246,  246,  246,  246,  246,  189,  246,  246,  246,
 /*  7620 */   193,  194,  246,  196,  151,  246,  199,  246,  246,  246,
 /*  7630 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /*  7640 */   230,  246,  232,  246,  246,  246,  173,  220,  246,  246,
 /*  7650 */   246,  241,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  7660 */   246,  246,  189,  246,  246,  246,  193,  194,  241,  196,
 /*  7670 */   246,  246,  199,  151,  246,  246,  246,  246,  246,  246,
 /*  7680 */   246,  246,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  7690 */   246,  246,  246,  220,  246,  173,  246,  246,  225,  226,
 /*  7700 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  7710 */   246,  189,  246,  246,  241,  193,  194,  246,  196,  246,
 /*  7720 */   246,  199,  151,  246,  246,  246,  246,  246,  246,  246,
 /*  7730 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /*  7740 */   246,  246,  220,  246,  173,  246,  246,  225,  226,  227,
 /*  7750 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  7760 */   189,  246,  246,  241,  193,  194,  246,  196,  151,  246,
 /*  7770 */   199,  246,  246,  246,  246,  246,  246,  160,  161,  246,
 /*  7780 */   246,  246,  246,  246,  246,  151,  246,  246,  246,  246,
 /*  7790 */   173,  220,  246,  246,  160,  161,  225,  226,  227,  228,
 /*  7800 */   229,  230,  246,  232,  246,  246,  189,  173,  246,  246,
 /*  7810 */   193,  194,  241,  196,  246,  246,  199,  246,  246,  246,
 /*  7820 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  246,
 /*  7830 */   196,  246,  246,  199,  246,  246,  246,  220,  246,  246,
 /*  7840 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  7850 */   246,  246,  246,  246,  220,  246,  246,  246,  241,  225,
 /*  7860 */   226,  227,  228,  229,  230,  246,  232,  151,  246,  246,
 /*  7870 */   246,  246,  246,  246,  246,  241,  160,  161,  246,  246,
 /*  7880 */   246,  246,  246,  246,  151,  246,  246,  246,  246,  173,
 /*  7890 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  7900 */   246,  246,  246,  246,  246,  189,  173,  246,  246,  193,
 /*  7910 */   194,  246,  196,  246,  246,  199,  246,  246,  246,  246,
 /*  7920 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  7930 */   151,  246,  199,  246,  246,  246,  220,  246,  246,  160,
 /*  7940 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  7950 */   246,  246,  173,  220,  246,  246,  246,  241,  225,  226,
 /*  7960 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  246,
 /*  7970 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  151,
 /*  7980 */   246,  246,  246,  246,  246,  246,  246,  246,  160,  161,
 /*  7990 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  220,
 /*  8000 */   246,  173,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  8010 */   246,  232,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  8020 */   241,  193,  194,  246,  196,  246,  246,  199,  151,  246,
 /*  8030 */   246,  246,  246,  246,  246,  246,  246,  160,  161,  246,
 /*  8040 */   246,  246,  246,  246,  246,  246,  246,  246,  220,  246,
 /*  8050 */   173,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  8060 */   232,  246,  246,  246,  246,  246,  189,  246,  246,  241,
 /*  8070 */   193,  194,  246,  196,  151,  246,  199,  246,  246,  246,
 /*  8080 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  8090 */   246,  151,  246,  246,  246,  246,  173,  220,  246,  246,
 /*  8100 */   160,  161,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  8110 */   246,  246,  189,  173,  246,  246,  193,  194,  241,  196,
 /*  8120 */   246,  246,  199,  246,  246,  246,  246,  246,  246,  189,
 /*  8130 */   246,  246,  246,  193,  194,  246,  196,  246,  246,  199,
 /*  8140 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  8150 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  8160 */   220,  246,  246,  246,  241,  225,  226,  227,  228,  229,
 /*  8170 */   230,  246,  232,  151,  246,  246,  246,  246,  246,  246,
 /*  8180 */   246,  241,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  8190 */   151,  246,  246,  246,  246,  173,  246,  246,  246,  160,
 /*  8200 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8210 */   246,  189,  173,  246,  246,  193,  194,  246,  196,  246,
 /*  8220 */   246,  199,  246,  246,  246,  246,  246,  246,  189,  246,
 /*  8230 */   246,  246,  193,  194,  246,  196,  151,  246,  199,  246,
 /*  8240 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  8250 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  220,
 /*  8260 */   246,  246,  246,  241,  225,  226,  227,  228,  229,  230,
 /*  8270 */   246,  232,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  8280 */   241,  196,  246,  246,  199,  151,  246,  246,  246,  246,
 /*  8290 */   246,  246,  246,  246,  160,  161,  246,  246,  246,  246,
 /*  8300 */   246,  246,  246,  246,  246,  220,  246,  173,  246,  246,
 /*  8310 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8320 */   246,  246,  246,  189,  246,  246,  241,  193,  194,  246,
 /*  8330 */   196,  246,  246,  199,  151,  246,  246,  246,  246,  246,
 /*  8340 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  8350 */   246,  246,  246,  246,  220,  246,  173,  246,  246,  225,
 /*  8360 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  8370 */   246,  246,  189,  246,  246,  241,  193,  194,  246,  196,
 /*  8380 */   151,  246,  199,  246,  246,  246,  246,  246,  246,  160,
 /*  8390 */   161,  246,  246,  246,  246,  246,  246,  151,  246,  246,
 /*  8400 */   246,  246,  173,  220,  246,  246,  160,  161,  225,  226,
 /*  8410 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  173,
 /*  8420 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  246,
 /*  8430 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  8440 */   194,  246,  196,  246,  246,  199,  246,  246,  246,  220,
 /*  8450 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  8460 */   246,  232,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  8470 */   241,  225,  226,  227,  228,  229,  230,  246,  232,  151,
 /*  8480 */   246,  246,  246,  246,  246,  246,  246,  241,  160,  161,
 /*  8490 */   246,  246,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  8500 */   246,  173,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  8510 */   246,  246,  246,  246,  246,  246,  246,  189,  173,  246,
 /*  8520 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /*  8530 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  8540 */   246,  196,  151,  246,  199,  246,  246,  246,  220,  246,
 /*  8550 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  8560 */   232,  246,  246,  246,  173,  220,  246,  246,  246,  241,
 /*  8570 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8580 */   189,  246,  246,  246,  193,  194,  241,  196,  246,  246,
 /*  8590 */   199,  151,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8600 */   160,  161,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8610 */   246,  220,  246,  173,  246,  246,  225,  226,  227,  228,
 /*  8620 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  189,
 /*  8630 */   246,  246,  241,  193,  194,  246,  196,  246,  246,  199,
 /*  8640 */   151,  246,  246,  246,  246,  246,  246,  246,  246,  160,
 /*  8650 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8660 */   220,  246,  173,  246,  246,  225,  226,  227,  228,  229,
 /*  8670 */   230,  246,  232,  246,  246,  246,  246,  246,  189,  246,
 /*  8680 */   246,  241,  193,  194,  246,  196,  151,  246,  199,  246,
 /*  8690 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  8700 */   246,  246,  246,  151,  246,  246,  246,  246,  173,  220,
 /*  8710 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /*  8720 */   246,  232,  246,  246,  189,  173,  246,  246,  193,  194,
 /*  8730 */   241,  196,  246,  246,  199,  246,  246,  246,  246,  246,
 /*  8740 */   246,  189,  246,  246,  246,  193,  194,  246,  196,  246,
 /*  8750 */   246,  199,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  8760 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8770 */   246,  246,  220,  246,  246,  246,  241,  225,  226,  227,
 /*  8780 */   228,  229,  230,  246,  232,  151,  246,  246,  246,  246,
 /*  8790 */   246,  246,  246,  241,  160,  161,  246,  246,  246,  246,
 /*  8800 */   246,  246,  151,  246,  246,  246,  246,  173,  246,  246,
 /*  8810 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /*  8820 */   246,  246,  246,  189,  173,  246,  246,  193,  194,  246,
 /*  8830 */   196,  246,  246,  199,  246,  246,  246,  246,  246,  246,
 /*  8840 */   189,  246,  246,  246,  193,  194,  246,  196,  151,  246,
 /*  8850 */   199,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /*  8860 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  8870 */   173,  220,  246,  246,  246,  241,  225,  226,  227,  228,
 /*  8880 */   229,  230,  246,  232,  246,  246,  189,  246,  246,  246,
 /*  8890 */   193,  194,  241,  196,  246,  246,  199,  151,  246,  246,
 /*  8900 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  8910 */   246,  246,  246,  246,  246,  246,  246,  220,  246,  173,
 /*  8920 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  8930 */   246,  246,  246,  246,  246,  189,  246,  246,  241,  193,
 /*  8940 */   194,  246,  196,  246,  246,  199,  151,  246,  246,  246,
 /*  8950 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  8960 */   246,  246,  246,  246,  246,  246,  220,  246,  173,  246,
 /*  8970 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  8980 */   246,  246,  246,  246,  189,  246,  246,  241,  193,  194,
 /*  8990 */   246,  196,  151,  246,  199,  246,  246,  246,  246,  246,
 /*  9000 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  151,
 /*  9010 */   246,  246,  246,  246,  173,  220,  246,  246,  160,  161,
 /*  9020 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  9030 */   189,  173,  246,  246,  193,  194,  241,  196,  246,  246,
 /*  9040 */   199,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  9050 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /*  9060 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /*  9070 */   229,  230,  246,  232,  246,  246,  246,  246,  220,  246,
 /*  9080 */   246,  246,  241,  225,  226,  227,  228,  229,  230,  246,
 /*  9090 */   232,  151,  246,  246,  246,  246,  246,  246,  246,  241,
 /*  9100 */   160,  161,  246,  246,  246,  246,  246,  246,  151,  246,
 /*  9110 */   246,  246,  246,  173,  246,  246,  246,  160,  161,  246,
 /*  9120 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  9130 */   173,  246,  246,  193,  194,  246,  196,  246,  246,  199,
 /*  9140 */   246,  246,  246,  246,  246,  246,  189,  246,  246,  246,
 /*  9150 */   193,  194,  246,  196,  151,  246,  199,  246,  246,  246,
 /*  9160 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /*  9170 */   230,  246,  232,  246,  246,  246,  173,  220,  246,  246,
 /*  9180 */   246,  241,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  9190 */   246,  246,  189,  246,  246,  246,  193,  194,  241,  196,
 /*  9200 */   246,  246,  199,  151,  246,  246,  246,  246,  246,  246,
 /*  9210 */   246,  246,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  9220 */   246,  246,  246,  220,  246,  173,  246,  246,  225,  226,
 /*  9230 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  9240 */   246,  189,  246,  246,  241,  193,  194,  246,  196,  246,
 /*  9250 */   246,  199,  151,  246,  246,  246,  246,  246,  246,  246,
 /*  9260 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /*  9270 */   246,  246,  220,  246,  173,  246,  246,  225,  226,  227,
 /*  9280 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  9290 */   189,  246,  246,  241,  193,  194,  246,  196,  151,  246,
 /*  9300 */   199,  246,  246,  246,  246,  246,  246,  160,  161,  246,
 /*  9310 */   246,  246,  246,  246,  246,  151,  246,  246,  246,  246,
 /*  9320 */   173,  220,  246,  246,  160,  161,  225,  226,  227,  228,
 /*  9330 */   229,  230,  246,  232,  246,  246,  189,  173,  246,  246,
 /*  9340 */   193,  194,  241,  196,  246,  246,  199,  246,  246,  246,
 /*  9350 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  246,
 /*  9360 */   196,  246,  246,  199,  246,  246,  246,  220,  246,  246,
 /*  9370 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  9380 */   246,  246,  246,  246,  220,  246,  246,  246,  241,  225,
 /*  9390 */   226,  227,  228,  229,  230,  246,  232,  151,  246,  246,
 /*  9400 */   246,  246,  246,  246,  246,  241,  160,  161,  246,  246,
 /*  9410 */   246,  246,  246,  246,  151,  246,  246,  246,  246,  173,
 /*  9420 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  9430 */   246,  246,  246,  246,  246,  189,  173,  246,  246,  193,
 /*  9440 */   194,  246,  196,  246,  246,  199,  246,  246,  246,  246,
 /*  9450 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  9460 */   151,  246,  199,  246,  246,  246,  220,  246,  246,  160,
 /*  9470 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  9480 */   246,  246,  173,  220,  246,  246,  246,  241,  225,  226,
 /*  9490 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  246,
 /*  9500 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  151,
 /*  9510 */   246,  246,  246,  246,  246,  246,  246,  246,  160,  161,
 /*  9520 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  220,
 /*  9530 */   246,  173,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  9540 */   246,  232,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  9550 */   241,  193,  194,  246,  196,  246,  246,  199,  151,  246,
 /*  9560 */   246,  246,  246,  246,  246,  246,  246,  160,  161,  246,
 /*  9570 */   246,  246,  246,  246,  246,  246,  246,  246,  220,  246,
 /*  9580 */   173,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  9590 */   232,  246,  246,  246,  246,  246,  189,  246,  246,  241,
 /*  9600 */   193,  194,  246,  196,  151,  246,  199,  246,  246,  246,
 /*  9610 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  9620 */   246,  151,  246,  246,  246,  246,  173,  220,  246,  246,
 /*  9630 */   160,  161,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  9640 */   246,  246,  189,  173,  246,  246,  193,  194,  241,  196,
 /*  9650 */   246,  246,  199,  246,  246,  246,  246,  246,  246,  189,
 /*  9660 */   246,  246,  246,  193,  194,  246,  196,  246,  246,  199,
 /*  9670 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  9680 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  9690 */   220,  246,  246,  246,  241,  225,  226,  227,  228,  229,
 /*  9700 */   230,  246,  232,  151,  246,  246,  246,  246,  246,  246,
 /*  9710 */   246,  241,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  9720 */   151,  246,  246,  246,  246,  173,  246,  246,  246,  160,
 /*  9730 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9740 */   246,  189,  173,  246,  246,  193,  194,  246,  196,  246,
 /*  9750 */   246,  199,  246,  246,  246,  246,  246,  246,  189,  246,
 /*  9760 */   246,  246,  193,  194,  246,  196,  151,  246,  199,  246,
 /*  9770 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  9780 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  220,
 /*  9790 */   246,  246,  246,  241,  225,  226,  227,  228,  229,  230,
 /*  9800 */   246,  232,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  9810 */   241,  196,  246,  246,  199,  151,  246,  246,  246,  246,
 /*  9820 */   246,  246,  246,  246,  160,  161,  246,  246,  246,  246,
 /*  9830 */   246,  246,  246,  246,  246,  220,  246,  173,  246,  246,
 /*  9840 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  9850 */   246,  246,  246,  189,  246,  246,  241,  193,  194,  246,
 /*  9860 */   196,  246,  246,  199,  151,  246,  246,  246,  246,  246,
 /*  9870 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  9880 */   246,  246,  246,  246,  220,  246,  173,  246,  246,  225,
 /*  9890 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  9900 */   246,  246,  189,  246,  246,  241,  193,  194,  246,  196,
 /*  9910 */   151,  246,  199,  246,  246,  246,  246,  246,  246,  160,
 /*  9920 */   161,  246,  246,  246,  246,  246,  246,  151,  246,  246,
 /*  9930 */   246,  246,  173,  220,  246,  246,  160,  161,  225,  226,
 /*  9940 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  173,
 /*  9950 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  246,
 /*  9960 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  9970 */   194,  246,  196,  246,  246,  199,  246,  246,  246,  220,
 /*  9980 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  9990 */   246,  232,  246,  246,  246,  246,  220,  246,  246,  246,
 /* 10000 */   241,  225,  226,  227,  228,  229,  230,  246,  232,  151,
 /* 10010 */   246,  246,  246,  246,  246,  246,  246,  241,  160,  161,
 /* 10020 */   246,  246,  246,  246,  246,  246,  151,  246,  246,  246,
 /* 10030 */   246,  173,  246,  246,  246,  160,  161,  246,  246,  246,
 /* 10040 */   246,  246,  246,  246,  246,  246,  246,  189,  173,  246,
 /* 10050 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /* 10060 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /* 10070 */   246,  196,  151,  246,  199,  246,  246,  246,  220,  246,
 /* 10080 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /* 10090 */   232,  246,  246,  246,  173,  220,  246,  246,  246,  241,
 /* 10100 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /* 10110 */   189,  246,  246,  246,  193,  194,  241,  196,  246,  246,
 /* 10120 */   199,  151,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10130 */   160,  161,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10140 */   246,  220,  246,  173,  246,  246,  225,  226,  227,  228,
 /* 10150 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  189,
 /* 10160 */   246,  246,  241,  193,  194,  246,  196,  246,  246,  199,
 /* 10170 */   151,  246,  246,  246,  246,  246,  246,  246,  246,  160,
 /* 10180 */   161,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10190 */   220,  246,  173,  246,  246,  225,  226,  227,  228,  229,
 /* 10200 */   230,  246,  232,  246,  246,  246,  246,  246,  189,  246,
 /* 10210 */   246,  241,  193,  194,  246,  196,  151,  246,  199,  246,
 /* 10220 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /* 10230 */   246,  246,  246,  151,  246,  246,  246,  246,  173,  220,
 /* 10240 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /* 10250 */   246,  232,  246,  246,  189,  173,  246,  246,  193,  194,
 /* 10260 */   241,  196,  246,  246,  199,  246,  246,  246,  246,  246,
 /* 10270 */   246,  189,  246,  246,  246,  193,  194,  246,  196,  246,
 /* 10280 */   246,  199,  246,  246,  246,  220,  246,  246,  246,  246,
 /* 10290 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /* 10300 */   246,  246,  220,  246,  246,  246,  241,  225,  226,  227,
 /* 10310 */   228,  229,  230,  246,  232,  151,  246,  246,  246,  246,
 /* 10320 */   246,  246,  246,  241,  160,  161,  246,  246,  246,  246,
 /* 10330 */   246,  246,  151,  246,  246,  246,  246,  173,  246,  246,
 /* 10340 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /* 10350 */   246,  246,  246,  189,  173,  246,  246,  193,  194,  246,
 /* 10360 */   196,  246,  246,  199,  246,  246,  246,  246,  246,  246,
 /* 10370 */   189,  246,  246,  246,  193,  194,  246,  196,  151,  246,
 /* 10380 */   199,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /* 10390 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /* 10400 */   173,  220,  246,  246,  246,  241,  225,  226,  227,  228,
 /* 10410 */   229,  230,  246,  232,  246,  246,  189,  246,  246,  246,
 /* 10420 */   193,  194,  241,  196,  246,  246,  199,  151,  246,  246,
 /* 10430 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /* 10440 */   246,  246,  246,  246,  246,  246,  246,  220,  246,  173,
 /* 10450 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /* 10460 */   246,  246,  246,  246,  246,  189,  246,  246,  241,  193,
 /* 10470 */   194,  246,  196,  246,  246,  199,  151,  246,  246,  246,
 /* 10480 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /* 10490 */   246,  246,  246,  246,  246,  246,  220,  246,  173,  246,
 /* 10500 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /* 10510 */   246,  246,  246,  246,  189,  246,  246,  241,  193,  194,
 /* 10520 */   246,  196,  151,  246,  199,  246,  246,  246,  246,  246,
 /* 10530 */   246,  160,  161,  246,  246,  246,  246,  246,  246,  246,
 /* 10540 */   246,  246,  246,  246,  173,  220,  246,  246,  246,  246,
 /* 10550 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /* 10560 */   189,  246,  246,  246,  193,  194,  241,  196,  246,  246,
 /* 10570 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10580 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10590 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /* 10600 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /* 10610 */   246,  246,  241,
);
    const YY_SHIFT_USE_DFLT = -58;
    const YY_SHIFT_MAX = 490;
    static public $yy_shift_ofst = array(
 /*     0 */   -58, 1172, 1047,  817,  114,   -1,  229,  469,  584,  344,
 /*    10 */   699,  932, 1172, 1172, 1287, 1172, 1172, 1662, 1912, 1412,
 /*    20 */  1662, 1787, 1537, 2027, 2027, 2027, 2142, 2142, 2142, 2142,
 /*    30 */  2257, 2142, 2142, 3407, 3407, 3407, 3407, 3407, 3407, 2372,
 /*    40 */  2487, 3062, 3177, 2947, 2832, 2602, 2717, 3292, 3407, 3407,
 /*    50 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    60 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    70 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    80 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    90 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3522, 3407, 3407,
 /*   100 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   110 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   120 */  3407, 3407, 3407, 3407,  322,  -57,  322,  -57,  164,  -57,
 /*   130 */   639,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*   140 */   164,  164,  164,  730,  164,  164,  164,  173,  173,  173,
 /*   150 */   755,  755,  755,  755, 2139, 2254, 2568,  731,  677,  583,
 /*   160 */  2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568, 2568,
 /*   170 */  2568, 2568, 2568, 2568, 2568, 2568, 2568,  371,  371,  940,
 /*   180 */   523,  522,  522,  522,  492,  492, 3729, 3950, 3730, 4976,
 /*   190 */  4027,   60,  410,  523,  579,  771,  643,  278,  139,  529,
 /*   200 */   275,  655,  655,  659,  634,  680,  704,  -14,  -14,  492,
 /*   210 */   377, 1231, 1208,  940, 1241, 1203,  492, 1241, 1208, 1217,
 /*   220 */  1285,  492, 1307, 1283, 1233,  492,  -58,  -58,  -58,  -58,
 /*   230 */   -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
 /*   240 */   -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
 /*   250 */   -58,  -58, 4819, 4745, 4670, 4521, 4596, 4860, 4934, 5242,
 /*   260 */  5165, 5091, 4975, 5317, 4329, 3955, 5394, 4106, 3881, 3804,
 /*   270 */  4029, 4181, 4406, 4255, 4447, 5648, 5648, 5648, 5648, 5648,
 /*   280 */  5648, 5648, 5648, 5648, 5648, 5648, 5648, 5688, 5725,  -15,
 /*   290 */   -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   300 */   -15,  -15,  -15,  -15, 2191,  459, 1161, 2304, 2419, 2534,
 /*   310 */  2534, 2534, 2534, 2534, 4859, 4446, 3927, 3693, 1426,  106,
 /*   320 */   106,  106,  106,  315,  315,  569,  569,  569,  569,  569,
 /*   330 */   171,  789,    0,  188,  285,  956,  338,  317,   61,   27,
 /*   340 */   202,  176,  402,  531,  269,  846,  557,  170,  323,  170,
 /*   350 */   761,  640,  170,  457,  142,  870,  646,  170,  851,  886,
 /*   360 */   891,  927,  881,  835,  842,  895,  909,  928,  889,  920,
 /*   370 */   871,  904,  882,  899,  923,  836,  874, 1069,  993, 1070,
 /*   380 */  1015,  982,  809,  495,   63,  157,  652,  690,  733,  831,
 /*   390 */   214,  259,  363,  842, 1311, 1115, 1257, 1247, 1228, 1301,
 /*   400 */  1243, 1239, 1330, 1380, 1274, 1115, 1288, 1182, 1064, 1068,
 /*   410 */  1115, 1115, 1071, 1095, 1050,  995, 1016, 1011, 1012, 1043,
 /*   420 */   988, 1037, 1099, 1218, 1174, 1220, 1141, 1135, 1084, 1159,
 /*   430 */  1200, 1147, 1107, 1199, 1168, 1072, 1038, 1014,  259, 1093,
 /*   440 */  1109, 1004, 1073, 1282, 1278, 1230, 1191, 1281, 1259, 1261,
 /*   450 */   986,  549,  813,  779,  297,  981,  983,  999,  867,  984,
 /*   460 */   907,  872,  929,  890,  860,  820,  950,  825, 1056, 1000,
 /*   470 */   991, 1065, 1005,  952,  987,  955,  949, 1048,  963,  427,
 /*   480 */   466,  498,  -23,   79,  162,  825,  728,  570,  732,  619,
 /*   490 */   720,
);
    const YY_REDUCE_USE_DFLT = -191;
    const YY_REDUCE_MAX = 251;
    static public $yy_reduce_ofst = array(
 /*     0 */    92, 3503, 5325, 5325, 5325, 5325, 5325, 5325, 5325, 5325,
 /*    10 */  5325, 5325, 5325, 5325, 5422, 5325, 5325, 5813, 5838, 5751,
 /*    20 */  5643, 5689, 6361, 6312, 6410, 6263, 6459, 6176, 5925, 5863,
 /*    30 */  5975, 6024, 6151, 6068, 6505, 6201, 6555, 6653, 6604, 10065,
 /*    40 */  9552, 8858, 8957, 8795, 8651, 8746, 9052, 9407, 9309, 9101,
 /*    50 */  9164, 9858, 7216, 7410, 7121, 7571, 6798, 6861, 6910, 8229,
 /*    60 */  8345, 8085, 8246, 7940, 7877, 7634, 8039, 8489, 8183, 7473,
 /*    70 */  6959, 7005, 7311, 10371, 7779, 7328, 6699, 7022, 7617, 8328,
 /*    80 */  8391, 7733, 7828, 8022, 7923, 7716, 8440, 8134, 8535, 7104,
 /*    90 */  6716, 6815, 7427, 7522, 7167, 7265, 9246, 9147, 9263, 9453,
 /*   100 */  9358, 9003, 8697, 8634, 8841, 8940, 9470, 10082, 10019, 10164,
 /*   110 */  10181, 10325, 10276, 10227, 9970, 9921, 9713, 9664, 9615, 9569,
 /*   120 */  9759, 9776, 9875, 8552, 2576, 2802, 3647, 3030, 3945, 4157,
 /*   130 */  4083, 5005, 6053, 5075, 5237, 5402, 5359, 5226, 4574, 3261,
 /*   140 */  4171, 4353, 4436, 4585, 4364, 5726, 6541,  369,  484,   14,
 /*   150 */   149,  394,   40, -190,  249,  249,  528, -164, -164,  -49,
 /*   160 */   645,  641,  660,  745,  775,  764,  760,  750,  615,  542,
 /*   170 */   312,  187,  178,  -68,  -41,  400,  536,  326,  207, -169,
 /*   180 */    54,  397,  233, -133,  340,  544,  857,  785,  785,  785,
 /*   190 */   785,  672,  821,  873,  163,  366,  416,  -91,  -34,   29,
 /*   200 */   665,  589,  442,  564,  534,  648,  669,   98, -188,  230,
 /*   210 */   878, 1111, 1162, 1155, 1129, 1117, 1128, 1127, 1148, 1232,
 /*   220 */  1205, 1177, 1130, 1183, 1112,  974, 1150, 1013,  966,  913,
 /*   230 */   939,  942,  958,  944, 1113, 1067,  971, 1085, 1018, 1017,
 /*   240 */   980, 1057, 1006, 1049, 1137, 1143, 1114, 1145, 1022, 1090,
 /*   250 */  1098, 1116,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(),
        /* 1 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 2 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 124, 134, 136, 137, 138, 139, 140, ),
        /* 3 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 134, 136, 137, 138, 139, 140, ),
        /* 4 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 5 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 6 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 7 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 8 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 9 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 124, 134, 136, 137, 138, 139, 140, ),
        /* 10 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 124, 134, 136, 137, 138, 139, 140, ),
        /* 11 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 12 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 13 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 14 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 15 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 16 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 17 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 18 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 19 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 20 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 21 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 22 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 23 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 24 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 25 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 26 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 27 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 28 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 29 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 30 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 31 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 32 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 33 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 34 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 35 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 36 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 37 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 38 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 39 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 73, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 40 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 41 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 42 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 43 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 44 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 45 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 46 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 47 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 48 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 49 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 50 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 51 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 52 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 53 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 54 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 55 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 56 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 57 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 58 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 59 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 60 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 61 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 62 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 63 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 64 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 65 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 66 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 67 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 68 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 69 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 70 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 71 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 72 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 73 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 74 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 75 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 76 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 77 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 78 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 79 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 80 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 81 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 82 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 83 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 84 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 85 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 86 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 87 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 88 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 89 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 90 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 91 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 92 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 93 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 94 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 95 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 96 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 97 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 98 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 99 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 100 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 101 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 102 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 103 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 104 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 105 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 106 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 107 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 108 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 109 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 110 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 111 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 112 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 113 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 114 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 115 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 116 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 117 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 118 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 119 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 120 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 121 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 122 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 123 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 124 */ array(29, 95, 98, 124, ),
        /* 125 */ array(95, 98, 103, 124, ),
        /* 126 */ array(29, 95, 98, 124, ),
        /* 127 */ array(95, 98, 103, 124, ),
        /* 128 */ array(95, 98, 124, ),
        /* 129 */ array(95, 98, 103, 124, ),
        /* 130 */ array(75, 95, 98, 124, ),
        /* 131 */ array(95, 98, 124, ),
        /* 132 */ array(95, 98, 124, ),
        /* 133 */ array(95, 98, 124, ),
        /* 134 */ array(95, 98, 124, ),
        /* 135 */ array(95, 98, 124, ),
        /* 136 */ array(95, 98, 124, ),
        /* 137 */ array(95, 98, 124, ),
        /* 138 */ array(95, 98, 124, ),
        /* 139 */ array(95, 98, 124, ),
        /* 140 */ array(95, 98, 124, ),
        /* 141 */ array(95, 98, 124, ),
        /* 142 */ array(95, 98, 124, ),
        /* 143 */ array(60, 95, 98, 124, ),
        /* 144 */ array(95, 98, 124, ),
        /* 145 */ array(95, 98, 124, ),
        /* 146 */ array(95, 98, 124, ),
        /* 147 */ array(95, 98, 124, ),
        /* 148 */ array(95, 98, 124, ),
        /* 149 */ array(95, 98, 124, ),
        /* 150 */ array(75, 95, 98, 124, ),
        /* 151 */ array(75, 95, 98, 124, ),
        /* 152 */ array(75, 95, 98, 124, ),
        /* 153 */ array(75, 95, 98, 124, ),
        /* 154 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 155 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 156 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 157 */ array(95, 98, 124, ),
        /* 158 */ array(95, 98, 124, ),
        /* 159 */ array(95, 124, ),
        /* 160 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 161 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 162 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 163 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 164 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 165 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 166 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 167 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 168 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 169 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 170 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 171 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 172 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 173 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 174 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 175 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 176 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 177 */ array(73, 98, 105, ),
        /* 178 */ array(73, 98, 105, ),
        /* 179 */ array(94, ),
        /* 180 */ array(95, 124, ),
        /* 181 */ array(95, 124, ),
        /* 182 */ array(95, 124, ),
        /* 183 */ array(95, 124, ),
        /* 184 */ array(98, ),
        /* 185 */ array(98, ),
        /* 186 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 187 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 138, ),
        /* 188 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 139, ),
        /* 189 */ array(59, 75, 76, 95, 98, 106, 127, 128, 129, 130, 131, 132, 133, 135, ),
        /* 190 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 141, ),
        /* 191 */ array(65, 66, 67, 68, 69, 70, 97, ),
        /* 192 */ array(95, 98, 129, ),
        /* 193 */ array(95, 124, ),
        /* 194 */ array(74, 75, ),
        /* 195 */ array(75, 109, ),
        /* 196 */ array(62, 63, ),
        /* 197 */ array(24, 74, ),
        /* 198 */ array(98, 105, ),
        /* 199 */ array(62, 63, ),
        /* 200 */ array(24, 75, ),
        /* 201 */ array(29, ),
        /* 202 */ array(29, ),
        /* 203 */ array(74, ),
        /* 204 */ array(127, ),
        /* 205 */ array(6, ),
        /* 206 */ array(95, ),
        /* 207 */ array(72, ),
        /* 208 */ array(72, ),
        /* 209 */ array(98, ),
        /* 210 */ array(100, ),
        /* 211 */ array(95, ),
        /* 212 */ array(115, ),
        /* 213 */ array(94, ),
        /* 214 */ array(72, ),
        /* 215 */ array(100, ),
        /* 216 */ array(98, ),
        /* 217 */ array(72, ),
        /* 218 */ array(115, ),
        /* 219 */ array(98, ),
        /* 220 */ array(102, ),
        /* 221 */ array(98, ),
        /* 222 */ array(74, ),
        /* 223 */ array(72, ),
        /* 224 */ array(127, ),
        /* 225 */ array(98, ),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 253 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 254 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 255 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 256 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 257 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 258 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 259 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 260 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 261 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 262 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 263 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 264 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 265 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 266 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 267 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 268 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 269 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 270 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 271 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 272 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 128, ),
        /* 273 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 274 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 275 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 276 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 277 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 278 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 279 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 280 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 281 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 282 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 283 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 284 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 285 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 286 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 287 */ array(8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 288 */ array(9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 289 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 290 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 291 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 292 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 293 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 294 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 295 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 296 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 297 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 298 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 299 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 300 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 301 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 302 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 303 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 304 */ array(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 305 */ array(26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 306 */ array(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 307 */ array(28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 308 */ array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 309 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 310 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 311 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 312 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 313 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 314 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 315 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 316 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 74, ),
        /* 317 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 91, ),
        /* 318 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, ),
        /* 319 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 320 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 321 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 322 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 323 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 324 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 325 */ array(43, 44, 45, 47, ),
        /* 326 */ array(43, 44, 45, 47, ),
        /* 327 */ array(43, 44, 45, 47, ),
        /* 328 */ array(43, 44, 45, 47, ),
        /* 329 */ array(43, 44, 45, 47, ),
        /* 330 */ array(120, 121, 122, ),
        /* 331 */ array(59, 72, 75, ),
        /* 332 */ array(120, 121, 122, ),
        /* 333 */ array(59, 72, 75, ),
        /* 334 */ array(76, 121, 122, ),
        /* 335 */ array(76, 121, 122, ),
        /* 336 */ array(6, 74, ),
        /* 337 */ array(6, 74, ),
        /* 338 */ array(29, 95, ),
        /* 339 */ array(6, 74, ),
        /* 340 */ array(6, 74, ),
        /* 341 */ array(6, 73, ),
        /* 342 */ array(6, 73, ),
        /* 343 */ array(6, 73, ),
        /* 344 */ array(29, 95, ),
        /* 345 */ array(6, 73, ),
        /* 346 */ array(6, 74, ),
        /* 347 */ array(59, 75, ),
        /* 348 */ array(49, 50, ),
        /* 349 */ array(59, 75, ),
        /* 350 */ array(6, 73, ),
        /* 351 */ array(59, 75, ),
        /* 352 */ array(59, 75, ),
        /* 353 */ array(59, 127, ),
        /* 354 */ array(72, 116, ),
        /* 355 */ array(6, 73, ),
        /* 356 */ array(6, 73, ),
        /* 357 */ array(59, 75, ),
        /* 358 */ array(97, ),
        /* 359 */ array(72, ),
        /* 360 */ array(74, ),
        /* 361 */ array(11, ),
        /* 362 */ array(6, ),
        /* 363 */ array(76, ),
        /* 364 */ array(75, ),
        /* 365 */ array(72, ),
        /* 366 */ array(91, ),
        /* 367 */ array(74, ),
        /* 368 */ array(116, ),
        /* 369 */ array(74, ),
        /* 370 */ array(98, ),
        /* 371 */ array(72, ),
        /* 372 */ array(109, ),
        /* 373 */ array(72, ),
        /* 374 */ array(73, ),
        /* 375 */ array(72, ),
        /* 376 */ array(72, ),
        /* 377 */ array(6, ),
        /* 378 */ array(72, ),
        /* 379 */ array(11, ),
        /* 380 */ array(11, ),
        /* 381 */ array(72, ),
        /* 382 */ array(72, ),
        /* 383 */ array(115, ),
        /* 384 */ array(6, ),
        /* 385 */ array(98, ),
        /* 386 */ array(73, ),
        /* 387 */ array(72, ),
        /* 388 */ array(116, ),
        /* 389 */ array(11, ),
        /* 390 */ array(115, ),
        /* 391 */ array(72, ),
        /* 392 */ array(72, ),
        /* 393 */ array(75, ),
        /* 394 */ array(11, ),
        /* 395 */ array(47, ),
        /* 396 */ array(72, ),
        /* 397 */ array(73, ),
        /* 398 */ array(74, ),
        /* 399 */ array(6, ),
        /* 400 */ array(74, ),
        /* 401 */ array(75, ),
        /* 402 */ array(72, ),
        /* 403 */ array(24, ),
        /* 404 */ array(75, ),
        /* 405 */ array(47, ),
        /* 406 */ array(75, ),
        /* 407 */ array(116, ),
        /* 408 */ array(74, ),
        /* 409 */ array(73, ),
        /* 410 */ array(47, ),
        /* 411 */ array(47, ),
        /* 412 */ array(98, ),
        /* 413 */ array(72, ),
        /* 414 */ array(73, ),
        /* 415 */ array(95, ),
        /* 416 */ array(75, ),
        /* 417 */ array(74, ),
        /* 418 */ array(94, ),
        /* 419 */ array(72, ),
        /* 420 */ array(128, ),
        /* 421 */ array(72, ),
        /* 422 */ array(73, ),
        /* 423 */ array(24, ),
        /* 424 */ array(98, ),
        /* 425 */ array(74, ),
        /* 426 */ array(95, ),
        /* 427 */ array(74, ),
        /* 428 */ array(95, ),
        /* 429 */ array(72, ),
        /* 430 */ array(11, ),
        /* 431 */ array(72, ),
        /* 432 */ array(73, ),
        /* 433 */ array(75, ),
        /* 434 */ array(73, ),
        /* 435 */ array(98, ),
        /* 436 */ array(73, ),
        /* 437 */ array(72, ),
        /* 438 */ array(72, ),
        /* 439 */ array(72, ),
        /* 440 */ array(59, ),
        /* 441 */ array(116, ),
        /* 442 */ array(76, ),
        /* 443 */ array(75, ),
        /* 444 */ array(73, ),
        /* 445 */ array(116, ),
        /* 446 */ array(127, ),
        /* 447 */ array(24, ),
        /* 448 */ array(73, ),
        /* 449 */ array(64, ),
        /* 450 */ array(98, ),
        /* 451 */ array(99, ),
        /* 452 */ array(73, ),
        /* 453 */ array(72, ),
        /* 454 */ array(74, ),
        /* 455 */ array(74, ),
        /* 456 */ array(99, ),
        /* 457 */ array(74, ),
        /* 458 */ array(72, ),
        /* 459 */ array(11, ),
        /* 460 */ array(72, ),
        /* 461 */ array(98, ),
        /* 462 */ array(72, ),
        /* 463 */ array(78, ),
        /* 464 */ array(72, ),
        /* 465 */ array(73, ),
        /* 466 */ array(11, ),
        /* 467 */ array(6, ),
        /* 468 */ array(11, ),
        /* 469 */ array(74, ),
        /* 470 */ array(73, ),
        /* 471 */ array(11, ),
        /* 472 */ array(74, ),
        /* 473 */ array(128, ),
        /* 474 */ array(76, ),
        /* 475 */ array(98, ),
        /* 476 */ array(98, ),
        /* 477 */ array(11, ),
        /* 478 */ array(95, ),
        /* 479 */ array(11, ),
        /* 480 */ array(72, ),
        /* 481 */ array(73, ),
        /* 482 */ array(95, ),
        /* 483 */ array(73, ),
        /* 484 */ array(95, ),
        /* 485 */ array(6, ),
        /* 486 */ array(128, ),
        /* 487 */ array(73, ),
        /* 488 */ array(11, ),
        /* 489 */ array(127, ),
        /* 490 */ array(73, ),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
        /* 560 */ array(),
        /* 561 */ array(),
        /* 562 */ array(),
        /* 563 */ array(),
        /* 564 */ array(),
        /* 565 */ array(),
        /* 566 */ array(),
        /* 567 */ array(),
        /* 568 */ array(),
        /* 569 */ array(),
        /* 570 */ array(),
        /* 571 */ array(),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
        /* 707 */ array(),
);
    static public $yy_default = array(
 /*     0 */   710,  887, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    10 */  1056, 1056,  879,  878,  708,  890,  886, 1056, 1056, 1056,
 /*    20 */  1056, 1056, 1056, 1056, 1056, 1056,  906,  906,  906,  906,
 /*    30 */   989,  906,  906, 1051, 1051, 1051, 1056,  973,  973, 1056,
 /*    40 */  1056, 1048, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    50 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    60 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    70 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    80 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*    90 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   100 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   110 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   120 */  1056, 1056, 1056, 1056, 1056,  987, 1056,  987, 1056,  987,
 /*   130 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   140 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   150 */  1056, 1056, 1056, 1056,  932,  932,  856, 1056, 1056, 1056,
 /*   160 */  1056, 1056, 1056, 1056, 1056,  855, 1056, 1056, 1056, 1056,
 /*   170 */  1056, 1056, 1056, 1056, 1056, 1056, 1056,  904,  904,  744,
 /*   180 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   190 */  1056,  929, 1056, 1056, 1056, 1056,  889, 1056,  904,  891,
 /*   200 */  1056, 1055, 1055,  880,  952, 1049, 1056,  958,  958, 1056,
 /*   210 */   763, 1056,  863,  743, 1047,  766, 1056, 1047,  863, 1056,
 /*   220 */   767, 1056,  880,  841, 1041, 1056,  749,  749, 1009,  880,
 /*   230 */   749,  749,  885,  749,  749,  749, 1044,  749, 1009, 1009,
 /*   240 */  1009,  749,  880,  923,  749,  749,  923,  749,  955,  749,
 /*   250 */   749,  749, 1056, 1056, 1056, 1056, 1056, 1056,  991, 1056,
 /*   260 */  1056, 1056,  993, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   270 */  1056, 1056, 1056, 1056, 1056,  990, 1023, 1019, 1022,  992,
 /*   280 */   942,  943, 1052,  972, 1056, 1053, 1020,  796,  798,  782,
 /*   290 */   788,  784,  785,  783,  779,  838,  797,  773,  786,  780,
 /*   300 */   789,  774,  787,  781,  824,  794,  795,  799,  801,  816,
 /*   310 */   814,  800,  817,  815,  949,  949,  949,  949,  949,  818,
 /*   320 */   821,  819,  820,  808,  809,  810,  803,  811,  804,  802,
 /*   330 */  1056,  965, 1056,  964, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   340 */  1056, 1056, 1056, 1056, 1056, 1056, 1056,  965, 1056,  964,
 /*   350 */   772,  974,  960, 1010, 1032,  772, 1056,  959, 1056,  961,
 /*   360 */  1056, 1056,  905, 1056,  982, 1056,  772, 1056, 1056, 1056,
 /*   370 */  1056, 1056, 1056, 1056, 1056, 1056, 1027,  854, 1056,  898,
 /*   380 */  1056, 1056, 1056,  858,  892, 1056, 1056, 1056, 1056,  920,
 /*   390 */   860, 1056, 1056,  981,  938,  805, 1056, 1056, 1056, 1050,
 /*   400 */  1056, 1056, 1056, 1056, 1056,  806, 1056, 1056, 1056, 1056,
 /*   410 */   807,  812, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   420 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   430 */   936, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1026, 1056,
 /*   440 */  1033,  849, 1056, 1056, 1056, 1039, 1042, 1056, 1056, 1056,
 /*   450 */  1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
 /*   460 */  1056, 1056, 1056, 1056, 1056, 1056,  895,  768, 1056, 1056,
 /*   470 */  1056,  899,  772, 1056, 1056, 1056, 1056, 1056, 1056,  894,
 /*   480 */  1056, 1056, 1056, 1056, 1056,  765, 1056, 1056,  918,  953,
 /*   490 */  1056,  760,  933,  935,  930,  941,  867,  924,  882,  922,
 /*   500 */   757,  770, 1027,  759,  758,  769,  866,  877,  928,  870,
 /*   510 */   888,  871,  897,  883,  745,  940,  884,  903,  934,  873,
 /*   520 */   901,  900,  902,  868,  872,  762,  896,  881,  738,  764,
 /*   530 */   761,  937,  718,  875,  927,  865,  925,  869, 1054,  862,
 /*   540 */   939,  926,  864,  876,  775,  846,  845,  844,  843,  847,
 /*   550 */   969,  962,  971,  970,  842, 1013, 1006, 1005, 1004, 1007,
 /*   560 */  1008, 1012, 1016, 1011,  963,  966, 1028, 1031, 1038, 1029,
 /*   570 */  1017,  912, 1024, 1025, 1037, 1036, 1018,  950,  909, 1021,
 /*   580 */  1033, 1015, 1035, 1034, 1003, 1002,  792,  790,  778,  777,
 /*   590 */   791,  951,  793,  956,  954,  772,  771,  712,  711,  709,
 /*   600 */   713,  714,  717,  716,  715,  822,  813,  835,  834,  840,
 /*   610 */   837,  998, 1001, 1000,  999,  833,  832,  826,  825,  823,
 /*   620 */   827,  828,  831,  830,  829, 1030, 1014,  919,  859,  857,
 /*   630 */   853,  921,  732,  735,  734,  733,  852,  851,  949,  917,
 /*   640 */   916,  914,  731,  850,  861,  848,  947,  948,  750,  748,
 /*   650 */   747,  751,  752,  755,  754,  753,  742,  746,  946,  945,
 /*   660 */   736,  944,  737,  741,  740,  739,  915,  913,  978,  975,
 /*   670 */   977,  976,  979,  980,  967, 1045, 1043, 1040,  961,  988,
 /*   680 */   836,  996,  994,  995,  968,  839,  997,  957, 1046,  725,
 /*   690 */   724,  723,  726,  727,  730,  729,  728,  874,  722,  985,
 /*   700 */   983,  776,  986,  984,  721,  720,  719,  756,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 247;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 708;
    const YYNRULE = 348;
    const YYERRORSYMBOL = 142;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_INCLUDE',     'T_INCLUDE_ONCE',  'T_EVAL',      
  'T_REQUIRE',     'T_REQUIRE_ONCE',  'COMMA',         'T_LOGICAL_OR',
  'T_LOGICAL_XOR',  'T_LOGICAL_AND',  'T_PRINT',       'EQUALS',      
  'T_PLUS_EQUAL',  'T_MINUS_EQUAL',  'T_MUL_EQUAL',   'T_DIV_EQUAL', 
  'T_CONCAT_EQUAL',  'T_MOD_EQUAL',   'T_AND_EQUAL',   'T_OR_EQUAL',  
  'T_XOR_EQUAL',   'T_SL_EQUAL',    'T_SR_EQUAL',    'QUESTION',    
  'COLON',         'T_BOOLEAN_OR',  'T_BOOLEAN_AND',  'BAR',         
  'CARAT',         'AMPERSAND',     'T_IS_EQUAL',    'T_IS_NOT_EQUAL',
  'T_IS_IDENTICAL',  'T_IS_NOT_IDENTICAL',  'LESSTHAN',      'T_IS_SMALLER_OR_EQUAL',
  'GREATERTHAN',   'T_IS_GREATER_OR_EQUAL',  'T_SL',          'T_SR',        
  'PLUS',          'MINUS',         'DOT',           'TIMES',       
  'DIVIDE',        'PERCENT',       'EXCLAM',        'T_INSTANCEOF',
  'TILDE',         'T_INC',         'T_DEC',         'T_INT_CAST',  
  'T_DOUBLE_CAST',  'T_STRING_CAST',  'T_ARRAY_CAST',  'T_OBJECT_CAST',
  'T_BOOL_CAST',   'T_UNSET_CAST',  'AT',            'LBRACKET',    
  'T_NEW',         'T_CLONE',       'T_ELSEIF',      'T_ELSE',      
  'T_ENDIF',       'T_STATIC',      'T_ABSTRACT',    'T_FINAL',     
  'T_PRIVATE',     'T_PROTECTED',   'T_PUBLIC',      'T_HALT_COMPILER',
  'LPAREN',        'RPAREN',        'SEMI',          'LCURLY',      
  'RCURLY',        'T_IF',          'T_WHILE',       'T_DO',        
  'T_FOR',         'T_SWITCH',      'T_BREAK',       'T_CONTINUE',  
  'T_RETURN',      'T_GLOBAL',      'T_ECHO',        'T_INLINE_HTML',
  'T_USE',         'T_UNSET',       'T_FOREACH',     'T_AS',        
  'T_DECLARE',     'T_TRY',         'T_CATCH',       'T_VARIABLE',  
  'T_THROW',       'T_FUNCTION',    'T_STRING',      'T_CLASS',     
  'T_EXTENDS',     'T_INTERFACE',   'T_IMPLEMENTS',  'T_LIST',      
  'T_EXIT',        'T_ARRAY',       'BACKQUOTE',     'T_LNUMBER',   
  'T_DNUMBER',     'T_CONSTANT_ENCAPSED_STRING',  'T_LINE',        'T_FILE',      
  'T_CLASS_C',     'T_METHOD_C',    'T_FUNC_C',      'T_DOUBLE_ARROW',
  'T_PAAMAYIM_NEKUDOTAYIM',  'T_ENDFOR',      'T_ENDFOREACH',  'T_ENDDECLARE',
  'T_ENDSWITCH',   'T_CASE',        'T_DEFAULT',     'T_ENDWHILE',  
  'DOLLAR',        'T_VAR',         'T_CONST',       'T_OBJECT_OPERATOR',
  'RBRACKET',      'T_NUM_STRING',  'T_ENCAPSED_AND_WHITESPACE',  'T_CHARACTER', 
  'T_BAD_CHARACTER',  'T_DOLLAR_OPEN_CURLY_BRACES',  'T_STRING_VARNAME',  'T_CURLY_OPEN',
  'T_ISSET',       'T_EMPTY',       'DOUBLEQUOTE',   'SINGLEQUOTE', 
  'T_START_HEREDOC',  'T_END_HEREDOC',  'error',         'start',       
  'top_statement_list',  'top_statement',  'statement',     'function_declaration_statement',
  'class_declaration_statement',  'unticked_statement',  'inner_statement_list',  'expr',        
  'elseif_list',   'else_single',   'new_elseif_list',  'new_else_single',
  'while_statement',  'for_expr',      'for_statement',  'switch_case_list',
  'expr_without_variable',  'variable',      'global_var_list',  'static_var_list',
  'echo_expr_list',  'use_filename',  'unset_variables',  'foreach_variable',
  'foreach_optional_arg',  'foreach_statement',  'w_variable',    'declare_list',
  'declare_statement',  'fully_qualified_class_name',  'additional_catches',  'non_empty_additional_catches',
  'additional_catch',  'inner_statement',  'unticked_function_declaration_statement',  'unticked_class_declaration_statement',
  'is_reference',  'parameter_list',  'class_entry_type',  'extends_from',
  'implements_list',  'class_statement_list',  'interface_entry',  'interface_extends_list',
  'interface_list',  'r_variable',    'assignment_list',  'class_name_reference',
  'ctor_arguments',  'rw_variable',   'internal_functions_in_yacc',  'exit_expr',   
  'scalar',        'array_pair_list',  'encaps_list',   'common_scalar',
  'static_scalar',  'static_array_pair_list',  'static_class_constant',  'non_empty_static_array_pair_list',
  'case_list',     'case_separator',  'non_empty_parameter_list',  'optional_class_type',
  'function_call_parameter_list',  'non_empty_function_call_parameter_list',  'global_var',    'class_statement',
  'variable_modifiers',  'class_variable_declaration',  'class_constant_declaration',  'method_modifiers',
  'method_body',   'non_empty_member_modifiers',  'member_modifier',  'unset_variable',
  'base_variable_with_function_calls',  'object_property',  'method_or_not',  'variable_properties',
  'variable_property',  'variable_without_objects',  'reference_variable',  'simple_indirect_reference',
  'static_member',  'base_variable',  'function_call',  'dim_offset',  
  'compound_variable',  'object_dim_list',  'variable_name',  'assignment_list_element',
  'non_empty_array_pair_list',  'possible_comma',  'encaps_var',    'encaps_var_offset',
  'isset_variables',  'class_constant',  'dynamic_class_name_reference',  'dynamic_class_name_variable_properties',
  'dynamic_class_name_variable_property',  'non_empty_for_expr',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= top_statement_list",
 /*   1 */ "top_statement_list ::= top_statement_list top_statement",
 /*   2 */ "top_statement_list ::=",
 /*   3 */ "top_statement ::= statement",
 /*   4 */ "top_statement ::= function_declaration_statement",
 /*   5 */ "top_statement ::= class_declaration_statement",
 /*   6 */ "top_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*   7 */ "statement ::= unticked_statement",
 /*   8 */ "unticked_statement ::= LCURLY inner_statement_list RCURLY",
 /*   9 */ "unticked_statement ::= T_IF LPAREN expr RPAREN statement elseif_list else_single",
 /*  10 */ "unticked_statement ::= T_IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single T_ENDIF COLON",
 /*  11 */ "unticked_statement ::= T_WHILE LPAREN expr RPAREN while_statement",
 /*  12 */ "unticked_statement ::= T_DO statement T_WHILE LPAREN expr RPAREN SEMI",
 /*  13 */ "unticked_statement ::= T_FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement",
 /*  14 */ "unticked_statement ::= T_SWITCH LPAREN expr RPAREN switch_case_list",
 /*  15 */ "unticked_statement ::= T_BREAK SEMI",
 /*  16 */ "unticked_statement ::= T_BREAK expr SEMI",
 /*  17 */ "unticked_statement ::= T_CONTINUE SEMI",
 /*  18 */ "unticked_statement ::= T_CONTINUE expr SEMI",
 /*  19 */ "unticked_statement ::= T_RETURN SEMI",
 /*  20 */ "unticked_statement ::= T_RETURN expr_without_variable SEMI",
 /*  21 */ "unticked_statement ::= T_RETURN variable SEMI",
 /*  22 */ "unticked_statement ::= T_GLOBAL global_var_list SEMI",
 /*  23 */ "unticked_statement ::= T_STATIC static_var_list SEMI",
 /*  24 */ "unticked_statement ::= T_ECHO echo_expr_list SEMI",
 /*  25 */ "unticked_statement ::= T_INLINE_HTML",
 /*  26 */ "unticked_statement ::= expr SEMI",
 /*  27 */ "unticked_statement ::= T_USE use_filename SEMI",
 /*  28 */ "unticked_statement ::= T_UNSET LPAREN unset_variables RPAREN SEMI",
 /*  29 */ "unticked_statement ::= T_FOREACH LPAREN variable T_AS foreach_variable foreach_optional_arg RPAREN foreach_statement",
 /*  30 */ "unticked_statement ::= T_FOREACH LPAREN expr_without_variable T_AS w_variable foreach_optional_arg RPAREN foreach_statement",
 /*  31 */ "unticked_statement ::= T_DECLARE LPAREN declare_list RPAREN declare_statement",
 /*  32 */ "unticked_statement ::= SEMI",
 /*  33 */ "unticked_statement ::= T_TRY LCURLY inner_statement_list RCURLY T_CATCH LPAREN fully_qualified_class_name T_VARIABLE RPAREN LCURLY inner_statement_list RCURLY additional_catches",
 /*  34 */ "unticked_statement ::= T_THROW expr SEMI",
 /*  35 */ "additional_catches ::= non_empty_additional_catches",
 /*  36 */ "additional_catches ::=",
 /*  37 */ "non_empty_additional_catches ::= additional_catch",
 /*  38 */ "non_empty_additional_catches ::= non_empty_additional_catches additional_catch",
 /*  39 */ "additional_catch ::= T_CATCH LPAREN fully_qualified_class_name T_VARIABLE RPAREN LCURLY inner_statement_list RCURLY",
 /*  40 */ "inner_statement_list ::= inner_statement_list inner_statement",
 /*  41 */ "inner_statement_list ::=",
 /*  42 */ "inner_statement ::= statement",
 /*  43 */ "inner_statement ::= function_declaration_statement",
 /*  44 */ "inner_statement ::= class_declaration_statement",
 /*  45 */ "inner_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*  46 */ "function_declaration_statement ::= unticked_function_declaration_statement",
 /*  47 */ "class_declaration_statement ::= unticked_class_declaration_statement",
 /*  48 */ "unticked_function_declaration_statement ::= T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN LCURLY inner_statement_list RCURLY",
 /*  49 */ "unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list LCURLY class_statement_list RCURLY",
 /*  50 */ "unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list LCURLY class_statement_list RCURLY",
 /*  51 */ "class_entry_type ::= T_CLASS",
 /*  52 */ "class_entry_type ::= T_ABSTRACT T_CLASS",
 /*  53 */ "class_entry_type ::= T_FINAL T_CLASS",
 /*  54 */ "extends_from ::= T_EXTENDS fully_qualified_class_name",
 /*  55 */ "extends_from ::=",
 /*  56 */ "interface_entry ::= T_INTERFACE",
 /*  57 */ "interface_extends_list ::= T_EXTENDS interface_list",
 /*  58 */ "interface_extends_list ::=",
 /*  59 */ "implements_list ::=",
 /*  60 */ "implements_list ::= T_IMPLEMENTS interface_list",
 /*  61 */ "interface_list ::= fully_qualified_class_name",
 /*  62 */ "interface_list ::= interface_list COMMA fully_qualified_class_name",
 /*  63 */ "expr ::= r_variable",
 /*  64 */ "expr ::= expr_without_variable",
 /*  65 */ "expr_without_variable ::= T_LIST LPAREN assignment_list RPAREN EQUALS expr",
 /*  66 */ "expr_without_variable ::= variable EQUALS expr",
 /*  67 */ "expr_without_variable ::= variable EQUALS AMPERSAND variable",
 /*  68 */ "expr_without_variable ::= variable EQUALS AMPERSAND T_NEW class_name_reference ctor_arguments",
 /*  69 */ "expr_without_variable ::= T_NEW class_name_reference ctor_arguments",
 /*  70 */ "expr_without_variable ::= T_CLONE expr",
 /*  71 */ "expr_without_variable ::= variable T_PLUS_EQUAL expr",
 /*  72 */ "expr_without_variable ::= variable T_MINUS_EQUAL expr",
 /*  73 */ "expr_without_variable ::= variable T_MUL_EQUAL expr",
 /*  74 */ "expr_without_variable ::= variable T_DIV_EQUAL expr",
 /*  75 */ "expr_without_variable ::= variable T_CONCAT_EQUAL expr",
 /*  76 */ "expr_without_variable ::= variable T_MOD_EQUAL expr",
 /*  77 */ "expr_without_variable ::= variable T_AND_EQUAL expr",
 /*  78 */ "expr_without_variable ::= variable T_OR_EQUAL expr",
 /*  79 */ "expr_without_variable ::= variable T_XOR_EQUAL expr",
 /*  80 */ "expr_without_variable ::= variable T_SL_EQUAL expr",
 /*  81 */ "expr_without_variable ::= variable T_SR_EQUAL expr",
 /*  82 */ "expr_without_variable ::= rw_variable T_INC",
 /*  83 */ "expr_without_variable ::= T_INC rw_variable",
 /*  84 */ "expr_without_variable ::= rw_variable T_DEC",
 /*  85 */ "expr_without_variable ::= T_DEC rw_variable",
 /*  86 */ "expr_without_variable ::= expr T_BOOLEAN_OR expr",
 /*  87 */ "expr_without_variable ::= expr T_BOOLEAN_AND expr",
 /*  88 */ "expr_without_variable ::= expr T_LOGICAL_OR expr",
 /*  89 */ "expr_without_variable ::= expr T_LOGICAL_AND expr",
 /*  90 */ "expr_without_variable ::= expr T_LOGICAL_XOR expr",
 /*  91 */ "expr_without_variable ::= expr BAR expr",
 /*  92 */ "expr_without_variable ::= expr AMPERSAND expr",
 /*  93 */ "expr_without_variable ::= expr CARAT expr",
 /*  94 */ "expr_without_variable ::= expr DOT expr",
 /*  95 */ "expr_without_variable ::= expr PLUS expr",
 /*  96 */ "expr_without_variable ::= expr MINUS expr",
 /*  97 */ "expr_without_variable ::= expr TIMES expr",
 /*  98 */ "expr_without_variable ::= expr DIVIDE expr",
 /*  99 */ "expr_without_variable ::= expr PERCENT expr",
 /* 100 */ "expr_without_variable ::= expr T_SL expr",
 /* 101 */ "expr_without_variable ::= expr T_SR expr",
 /* 102 */ "expr_without_variable ::= PLUS expr",
 /* 103 */ "expr_without_variable ::= MINUS expr",
 /* 104 */ "expr_without_variable ::= EXCLAM expr",
 /* 105 */ "expr_without_variable ::= TILDE expr",
 /* 106 */ "expr_without_variable ::= expr T_IS_IDENTICAL expr",
 /* 107 */ "expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr",
 /* 108 */ "expr_without_variable ::= expr T_IS_EQUAL expr",
 /* 109 */ "expr_without_variable ::= expr T_IS_NOT_EQUAL expr",
 /* 110 */ "expr_without_variable ::= expr LESSTHAN expr",
 /* 111 */ "expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr",
 /* 112 */ "expr_without_variable ::= expr GREATERTHAN expr",
 /* 113 */ "expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr",
 /* 114 */ "expr_without_variable ::= expr T_INSTANCEOF class_name_reference",
 /* 115 */ "expr_without_variable ::= LPAREN expr RPAREN",
 /* 116 */ "expr_without_variable ::= expr QUESTION expr COLON expr",
 /* 117 */ "expr_without_variable ::= internal_functions_in_yacc",
 /* 118 */ "expr_without_variable ::= T_INT_CAST expr",
 /* 119 */ "expr_without_variable ::= T_DOUBLE_CAST expr",
 /* 120 */ "expr_without_variable ::= T_STRING_CAST expr",
 /* 121 */ "expr_without_variable ::= T_ARRAY_CAST expr",
 /* 122 */ "expr_without_variable ::= T_OBJECT_CAST expr",
 /* 123 */ "expr_without_variable ::= T_BOOL_CAST expr",
 /* 124 */ "expr_without_variable ::= T_UNSET_CAST expr",
 /* 125 */ "expr_without_variable ::= T_EXIT exit_expr",
 /* 126 */ "expr_without_variable ::= AT expr",
 /* 127 */ "expr_without_variable ::= scalar",
 /* 128 */ "expr_without_variable ::= T_ARRAY LPAREN array_pair_list RPAREN",
 /* 129 */ "expr_without_variable ::= BACKQUOTE encaps_list BACKQUOTE",
 /* 130 */ "expr_without_variable ::= T_PRINT expr",
 /* 131 */ "exit_expr ::= LPAREN RPAREN",
 /* 132 */ "exit_expr ::= LPAREN expr RPAREN",
 /* 133 */ "exit_expr ::=",
 /* 134 */ "common_scalar ::= T_LNUMBER",
 /* 135 */ "common_scalar ::= T_DNUMBER",
 /* 136 */ "common_scalar ::= T_CONSTANT_ENCAPSED_STRING",
 /* 137 */ "common_scalar ::= T_LINE",
 /* 138 */ "common_scalar ::= T_FILE",
 /* 139 */ "common_scalar ::= T_CLASS_C|T_METHOD_C|T_FUNC_C",
 /* 140 */ "static_scalar ::= common_scalar",
 /* 141 */ "static_scalar ::= T_STRING",
 /* 142 */ "static_scalar ::= PLUS static_scalar",
 /* 143 */ "static_scalar ::= MINUS static_scalar",
 /* 144 */ "static_scalar ::= T_ARRAY LPAREN static_array_pair_list RPAREN",
 /* 145 */ "static_scalar ::= static_class_constant",
 /* 146 */ "static_array_pair_list ::= non_empty_static_array_pair_list",
 /* 147 */ "static_array_pair_list ::= non_empty_static_array_pair_list COMMA",
 /* 148 */ "static_array_pair_list ::=",
 /* 149 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar T_DOUBLE_ARROW static_scalar",
 /* 150 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar",
 /* 151 */ "non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar",
 /* 152 */ "non_empty_static_array_pair_list ::= static_scalar",
 /* 153 */ "static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 154 */ "foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable",
 /* 155 */ "foreach_optional_arg ::=",
 /* 156 */ "foreach_variable ::= w_variable",
 /* 157 */ "foreach_variable ::= AMPERSAND w_variable",
 /* 158 */ "for_statement ::= statement",
 /* 159 */ "for_statement ::= COLON inner_statement_list T_ENDFOR SEMI",
 /* 160 */ "foreach_statement ::= statement",
 /* 161 */ "foreach_statement ::= COLON inner_statement_list T_ENDFOREACH SEMI",
 /* 162 */ "declare_statement ::= statement",
 /* 163 */ "declare_statement ::= COLON inner_statement_list T_ENDDECLARE SEMI",
 /* 164 */ "declare_list ::= T_STRING EQUALS static_scalar",
 /* 165 */ "declare_list ::= declare_list COMMA T_STRING EQUALS static_scalar",
 /* 166 */ "switch_case_list ::= LCURLY case_list RCURLY",
 /* 167 */ "switch_case_list ::= LCURLY SEMI case_list RCURLY",
 /* 168 */ "switch_case_list ::= COLON case_list T_ENDSWITCH SEMI",
 /* 169 */ "switch_case_list ::= COLON SEMI case_list T_ENDSWITCH SEMI",
 /* 170 */ "case_list ::= case_list T_CASE expr case_separator inner_statement_list",
 /* 171 */ "case_list ::= case_list T_DEFAULT case_separator inner_statement_list",
 /* 172 */ "case_list ::=",
 /* 173 */ "case_separator ::= COLON|SEMI",
 /* 174 */ "while_statement ::= statement",
 /* 175 */ "while_statement ::= COLON inner_statement_list T_ENDWHILE SEMI",
 /* 176 */ "elseif_list ::= elseif_list T_ELSEIF LPAREN expr RPAREN statement",
 /* 177 */ "elseif_list ::=",
 /* 178 */ "new_elseif_list ::= new_elseif_list T_ELSEIF LPAREN expr RPAREN COLON inner_statement_list",
 /* 179 */ "new_elseif_list ::=",
 /* 180 */ "else_single ::= T_ELSE statement",
 /* 181 */ "else_single ::=",
 /* 182 */ "new_else_single ::= T_ELSE COLON inner_statement_list",
 /* 183 */ "new_else_single ::=",
 /* 184 */ "parameter_list ::= non_empty_parameter_list",
 /* 185 */ "parameter_list ::=",
 /* 186 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE",
 /* 187 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE",
 /* 188 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 189 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 190 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE",
 /* 191 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE",
 /* 192 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 193 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 194 */ "optional_class_type ::= T_STRING",
 /* 195 */ "optional_class_type ::= T_ARRAY",
 /* 196 */ "optional_class_type ::=",
 /* 197 */ "function_call_parameter_list ::= non_empty_function_call_parameter_list",
 /* 198 */ "function_call_parameter_list ::=",
 /* 199 */ "non_empty_function_call_parameter_list ::= expr_without_variable",
 /* 200 */ "non_empty_function_call_parameter_list ::= variable",
 /* 201 */ "non_empty_function_call_parameter_list ::= AMPERSAND w_variable",
 /* 202 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA expr_without_variable",
 /* 203 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA variable",
 /* 204 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA AMPERSAND w_variable",
 /* 205 */ "global_var_list ::= global_var_list COMMA global_var",
 /* 206 */ "global_var_list ::= global_var",
 /* 207 */ "global_var ::= T_VARIABLE",
 /* 208 */ "global_var ::= DOLLAR r_variable",
 /* 209 */ "global_var ::= DOLLAR LCURLY expr RCURLY",
 /* 210 */ "static_var_list ::= static_var_list COMMA T_VARIABLE",
 /* 211 */ "static_var_list ::= static_var_list COMMA T_VARIABLE EQUALS static_scalar",
 /* 212 */ "static_var_list ::= T_VARIABLE",
 /* 213 */ "static_var_list ::= T_VARIABLE EQUALS static_scalar",
 /* 214 */ "class_statement_list ::= class_statement_list class_statement",
 /* 215 */ "class_statement_list ::=",
 /* 216 */ "class_statement ::= variable_modifiers class_variable_declaration SEMI",
 /* 217 */ "class_statement ::= class_constant_declaration SEMI",
 /* 218 */ "class_statement ::= method_modifiers T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN method_body",
 /* 219 */ "method_body ::= SEMI",
 /* 220 */ "method_body ::= LCURLY inner_statement_list RCURLY",
 /* 221 */ "variable_modifiers ::= non_empty_member_modifiers",
 /* 222 */ "variable_modifiers ::= T_VAR",
 /* 223 */ "method_modifiers ::= non_empty_member_modifiers",
 /* 224 */ "method_modifiers ::=",
 /* 225 */ "non_empty_member_modifiers ::= member_modifier",
 /* 226 */ "non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier",
 /* 227 */ "member_modifier ::= T_PUBLIC|T_PROTECTED|T_PRIVATE|T_STATIC|T_ABSTRACT|T_FINAL",
 /* 228 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE",
 /* 229 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE EQUALS static_scalar",
 /* 230 */ "class_variable_declaration ::= T_VARIABLE",
 /* 231 */ "class_variable_declaration ::= T_VARIABLE EQUALS static_scalar",
 /* 232 */ "class_constant_declaration ::= class_constant_declaration COMMA T_STRING EQUALS static_scalar",
 /* 233 */ "class_constant_declaration ::= T_CONST T_STRING EQUALS static_scalar",
 /* 234 */ "echo_expr_list ::= echo_expr_list COMMA expr",
 /* 235 */ "echo_expr_list ::= expr",
 /* 236 */ "unset_variables ::= unset_variable",
 /* 237 */ "unset_variables ::= unset_variables COMMA unset_variable",
 /* 238 */ "unset_variable ::= variable",
 /* 239 */ "use_filename ::= T_CONSTANT_ENCAPSED_STRING",
 /* 240 */ "use_filename ::= LCURLY T_CONSTANT_ENCAPSED_STRING RCURLY",
 /* 241 */ "r_variable ::= variable",
 /* 242 */ "w_variable ::= variable",
 /* 243 */ "rw_variable ::= variable",
 /* 244 */ "variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties",
 /* 245 */ "variable ::= base_variable_with_function_calls",
 /* 246 */ "variable_properties ::= variable_properties variable_property",
 /* 247 */ "variable_properties ::=",
 /* 248 */ "variable_property ::= T_OBJECT_OPERATOR object_property method_or_not",
 /* 249 */ "method_or_not ::= LPAREN function_call_parameter_list RPAREN",
 /* 250 */ "method_or_not ::=",
 /* 251 */ "variable_without_objects ::= reference_variable",
 /* 252 */ "variable_without_objects ::= simple_indirect_reference reference_variable",
 /* 253 */ "static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects",
 /* 254 */ "base_variable_with_function_calls ::= base_variable",
 /* 255 */ "base_variable_with_function_calls ::= function_call",
 /* 256 */ "base_variable ::= reference_variable",
 /* 257 */ "base_variable ::= simple_indirect_reference reference_variable",
 /* 258 */ "base_variable ::= static_member",
 /* 259 */ "reference_variable ::= reference_variable LBRACKET dim_offset RBRACKET",
 /* 260 */ "reference_variable ::= reference_variable LCURLY expr RCURLY",
 /* 261 */ "reference_variable ::= compound_variable",
 /* 262 */ "compound_variable ::= T_VARIABLE",
 /* 263 */ "compound_variable ::= DOLLAR LCURLY expr RCURLY",
 /* 264 */ "dim_offset ::= expr",
 /* 265 */ "dim_offset ::=",
 /* 266 */ "object_property ::= object_dim_list",
 /* 267 */ "object_property ::= variable_without_objects",
 /* 268 */ "object_dim_list ::= object_dim_list LBRACKET dim_offset RBRACKET",
 /* 269 */ "object_dim_list ::= object_dim_list LCURLY expr RCURLY",
 /* 270 */ "object_dim_list ::= variable_name",
 /* 271 */ "variable_name ::= T_STRING",
 /* 272 */ "variable_name ::= LCURLY expr RCURLY",
 /* 273 */ "simple_indirect_reference ::= DOLLAR",
 /* 274 */ "simple_indirect_reference ::= simple_indirect_reference DOLLAR",
 /* 275 */ "assignment_list ::= assignment_list COMMA assignment_list_element",
 /* 276 */ "assignment_list ::= assignment_list_element",
 /* 277 */ "assignment_list_element ::= variable",
 /* 278 */ "assignment_list_element ::= T_LIST LPAREN assignment_list RPAREN",
 /* 279 */ "assignment_list_element ::=",
 /* 280 */ "array_pair_list ::= non_empty_array_pair_list possible_comma",
 /* 281 */ "array_pair_list ::=",
 /* 282 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW expr",
 /* 283 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr",
 /* 284 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr",
 /* 285 */ "non_empty_array_pair_list ::= expr",
 /* 286 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 287 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA AMPERSAND w_variable",
 /* 288 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 289 */ "non_empty_array_pair_list ::= AMPERSAND w_variable",
 /* 290 */ "encaps_list ::= encaps_list encaps_var",
 /* 291 */ "encaps_list ::= encaps_list T_STRING",
 /* 292 */ "encaps_list ::= encaps_list T_NUM_STRING",
 /* 293 */ "encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE",
 /* 294 */ "encaps_list ::= encaps_list T_CHARACTER",
 /* 295 */ "encaps_list ::= encaps_list T_BAD_CHARACTER",
 /* 296 */ "encaps_list ::= encaps_list LBRACKET",
 /* 297 */ "encaps_list ::= encaps_list RBRACKET",
 /* 298 */ "encaps_list ::= encaps_list LCURLY",
 /* 299 */ "encaps_list ::= encaps_list RCURLY",
 /* 300 */ "encaps_list ::= encaps_list T_OBJECT_OPERATOR",
 /* 301 */ "encaps_list ::=",
 /* 302 */ "encaps_var ::= T_VARIABLE",
 /* 303 */ "encaps_var ::= T_VARIABLE LBRACKET encaps_var_offset RBRACKET",
 /* 304 */ "encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR T_STRING",
 /* 305 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr RCURLY",
 /* 306 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME LBRACKET expr RBRACKET RCURLY",
 /* 307 */ "encaps_var ::= T_CURLY_OPEN variable RCURLY",
 /* 308 */ "encaps_var_offset ::= T_STRING|T_NUM_STRING|T_VARIABLE",
 /* 309 */ "internal_functions_in_yacc ::= T_ISSET LPAREN isset_variables RPAREN",
 /* 310 */ "internal_functions_in_yacc ::= T_EMPTY LPAREN variable RPAREN",
 /* 311 */ "internal_functions_in_yacc ::= T_INCLUDE expr",
 /* 312 */ "internal_functions_in_yacc ::= T_INCLUDE_ONCE expr",
 /* 313 */ "internal_functions_in_yacc ::= T_EVAL LPAREN expr RPAREN",
 /* 314 */ "internal_functions_in_yacc ::= T_REQUIRE expr",
 /* 315 */ "internal_functions_in_yacc ::= T_REQUIRE_ONCE expr",
 /* 316 */ "isset_variables ::= variable",
 /* 317 */ "isset_variables ::= isset_variables COMMA variable",
 /* 318 */ "class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 319 */ "fully_qualified_class_name ::= T_STRING",
 /* 320 */ "function_call ::= T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 321 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 322 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 323 */ "function_call ::= variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 324 */ "scalar ::= T_STRING",
 /* 325 */ "scalar ::= T_STRING_VARNAME",
 /* 326 */ "scalar ::= class_constant",
 /* 327 */ "scalar ::= common_scalar",
 /* 328 */ "scalar ::= DOUBLEQUOTE encaps_list DOUBLEQUOTE",
 /* 329 */ "scalar ::= SINGLEQUOTE encaps_list SINGLEQUOTE",
 /* 330 */ "scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC",
 /* 331 */ "class_name_reference ::= T_STRING",
 /* 332 */ "class_name_reference ::= dynamic_class_name_reference",
 /* 333 */ "dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties",
 /* 334 */ "dynamic_class_name_reference ::= base_variable",
 /* 335 */ "dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property",
 /* 336 */ "dynamic_class_name_variable_properties ::=",
 /* 337 */ "dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property",
 /* 338 */ "ctor_arguments ::= LPAREN function_call_parameter_list RPAREN",
 /* 339 */ "ctor_arguments ::=",
 /* 340 */ "possible_comma ::= COMMA",
 /* 341 */ "possible_comma ::=",
 /* 342 */ "for_expr ::= non_empty_for_expr",
 /* 343 */ "for_expr ::=",
 /* 344 */ "non_empty_for_expr ::= non_empty_for_expr COMMA expr",
 /* 345 */ "non_empty_for_expr ::= expr",
 /* 346 */ "is_reference ::= AMPERSAND",
 /* 347 */ "is_reference ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param PC_Type_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Type_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Type_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new PC_Type_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 0 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 10 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 9 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 8 ),
  array( 'lhs' => 149, 'rhs' => 8 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 13 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 0 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 8 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 4 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 9 ),
  array( 'lhs' => 179, 'rhs' => 7 ),
  array( 'lhs' => 179, 'rhs' => 6 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 0 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 5 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 0 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 4 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 0 ),
  array( 'lhs' => 203, 'rhs' => 5 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 0 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 4 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 4 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 5 ),
  array( 'lhs' => 159, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 5 ),
  array( 'lhs' => 204, 'rhs' => 5 ),
  array( 'lhs' => 204, 'rhs' => 4 ),
  array( 'lhs' => 204, 'rhs' => 0 ),
  array( 'lhs' => 205, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 6 ),
  array( 'lhs' => 152, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 7 ),
  array( 'lhs' => 154, 'rhs' => 0 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 0 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 0 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 0 ),
  array( 'lhs' => 206, 'rhs' => 2 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 5 ),
  array( 'lhs' => 206, 'rhs' => 4 ),
  array( 'lhs' => 206, 'rhs' => 4 ),
  array( 'lhs' => 206, 'rhs' => 5 ),
  array( 'lhs' => 206, 'rhs' => 7 ),
  array( 'lhs' => 206, 'rhs' => 6 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 0 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 0 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 4 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 4 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 5 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 0 ),
  array( 'lhs' => 211, 'rhs' => 3 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 8 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 0 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 5 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 214, 'rhs' => 5 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 5 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 0 ),
  array( 'lhs' => 224, 'rhs' => 3 ),
  array( 'lhs' => 222, 'rhs' => 3 ),
  array( 'lhs' => 222, 'rhs' => 0 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 2 ),
  array( 'lhs' => 228, 'rhs' => 3 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 2 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 4 ),
  array( 'lhs' => 226, 'rhs' => 4 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 4 ),
  array( 'lhs' => 231, 'rhs' => 1 ),
  array( 'lhs' => 231, 'rhs' => 0 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 3 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 4 ),
  array( 'lhs' => 235, 'rhs' => 0 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 0 ),
  array( 'lhs' => 236, 'rhs' => 5 ),
  array( 'lhs' => 236, 'rhs' => 3 ),
  array( 'lhs' => 236, 'rhs' => 3 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 6 ),
  array( 'lhs' => 236, 'rhs' => 4 ),
  array( 'lhs' => 236, 'rhs' => 4 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 0 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 4 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 6 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 3 ),
  array( 'lhs' => 241, 'rhs' => 3 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 4 ),
  array( 'lhs' => 230, 'rhs' => 6 ),
  array( 'lhs' => 230, 'rhs' => 6 ),
  array( 'lhs' => 230, 'rhs' => 4 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 4 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 0 ),
  array( 'lhs' => 244, 'rhs' => 2 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 0 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 0 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 0 ),
  array( 'lhs' => 245, 'rhs' => 3 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        224 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        57 => 57,
        60 => 57,
        221 => 57,
        223 => 57,
        225 => 57,
        319 => 57,
        58 => 58,
        59 => 58,
        61 => 61,
        62 => 62,
        127 => 127,
        140 => 127,
        146 => 127,
        184 => 127,
        197 => 127,
        327 => 127,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        141 => 141,
        324 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        147 => 144,
        145 => 145,
        148 => 148,
        195 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        185 => 185,
        198 => 185,
        215 => 185,
        186 => 186,
        187 => 187,
        188 => 188,
        189 => 189,
        190 => 190,
        191 => 191,
        192 => 192,
        193 => 193,
        194 => 194,
        196 => 196,
        199 => 199,
        200 => 199,
        201 => 199,
        202 => 202,
        203 => 202,
        204 => 204,
        214 => 214,
        216 => 216,
        217 => 217,
        218 => 218,
        222 => 222,
        226 => 226,
        227 => 227,
        228 => 228,
        229 => 229,
        230 => 230,
        231 => 231,
        232 => 232,
        233 => 233,
        320 => 320,
        325 => 325,
        328 => 325,
        329 => 325,
        330 => 325,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 186 "src/compile/typeparser.y"
    function yy_r48(){
		$this->state->declare_function($this->yystack[$this->yyidx + -6]->minor,$this->yystack[$this->yyidx + -4]->minor);
    }
#line 4702 "src/compile/typeparser.php"
#line 195 "src/compile/typeparser.y"
    function yy_r49(){
		$this->state->declare_class(
			$this->yystack[$this->yyidx + -5]->minor,$this->yystack[$this->yyidx + -6]->minor->metadata,$this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -3]->minor->metadata,$this->yystack[$this->yyidx + -1]->minor
		);
    }
#line 4709 "src/compile/typeparser.php"
#line 205 "src/compile/typeparser.y"
    function yy_r50(){
		$this->state->declare_interface($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -3]->minor->metadata,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 4714 "src/compile/typeparser.php"
#line 209 "src/compile/typeparser.y"
    function yy_r51(){ $this->_retvalue = new PC_Type_yyToken('');     }
#line 4717 "src/compile/typeparser.php"
#line 210 "src/compile/typeparser.y"
    function yy_r52(){ $this->_retvalue = new PC_Type_yyToken('',array('abstract' => true));     }
#line 4720 "src/compile/typeparser.php"
#line 211 "src/compile/typeparser.y"
    function yy_r53(){ $this->_retvalue = new PC_Type_yyToken('',array('final' => true));     }
#line 4723 "src/compile/typeparser.php"
#line 213 "src/compile/typeparser.y"
    function yy_r54(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor->string;     }
#line 4726 "src/compile/typeparser.php"
#line 214 "src/compile/typeparser.y"
    function yy_r55(){ $this->_retvalue = null;     }
#line 4729 "src/compile/typeparser.php"
#line 218 "src/compile/typeparser.y"
    function yy_r57(){ $this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + 0]->minor);     }
#line 4732 "src/compile/typeparser.php"
#line 219 "src/compile/typeparser.y"
    function yy_r58(){ $this->_retvalue = new PC_Type_yyToken('',array());     }
#line 4735 "src/compile/typeparser.php"
#line 224 "src/compile/typeparser.y"
    function yy_r61(){
	$this->_retvalue = new PC_Type_yyToken('');
	$this->_retvalue[] = array($this->yystack[$this->yyidx + 0]->minor->string);
    }
#line 4741 "src/compile/typeparser.php"
#line 228 "src/compile/typeparser.y"
    function yy_r62(){
	$this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + -2]->minor);
	$this->_retvalue[] = array($this->yystack[$this->yyidx + 0]->minor->string);
    }
#line 4747 "src/compile/typeparser.php"
#line 300 "src/compile/typeparser.y"
    function yy_r127(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 4750 "src/compile/typeparser.php"
#line 309 "src/compile/typeparser.y"
    function yy_r134(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::INT,$this->yystack[$this->yyidx + 0]->minor);     }
#line 4753 "src/compile/typeparser.php"
#line 310 "src/compile/typeparser.y"
    function yy_r135(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::FLOAT,$this->yystack[$this->yyidx + 0]->minor);     }
#line 4756 "src/compile/typeparser.php"
#line 311 "src/compile/typeparser.y"
    function yy_r136(){
	$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::STRING,substr($this->yystack[$this->yyidx + 0]->minor,1,-1));
    }
#line 4761 "src/compile/typeparser.php"
#line 314 "src/compile/typeparser.y"
    function yy_r137(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::INT,$this->state->get_line());     }
#line 4764 "src/compile/typeparser.php"
#line 315 "src/compile/typeparser.y"
    function yy_r138(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::STRING,$this->state->get_file());     }
#line 4767 "src/compile/typeparser.php"
#line 316 "src/compile/typeparser.y"
    function yy_r139(){
	// TODO value
	$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::STRING);
    }
#line 4773 "src/compile/typeparser.php"
#line 323 "src/compile/typeparser.y"
    function yy_r141(){
	if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"true") == 0)
		$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::BOOL,true);
	else if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"false") == 0)
		$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::BOOL,false);
	else 
		$this->_retvalue = $this->state->get_constant_type($this->yystack[$this->yyidx + 0]->minor);
    }
#line 4783 "src/compile/typeparser.php"
#line 331 "src/compile/typeparser.y"
    function yy_r142(){
	$this->_retvalue = $this->state->handle_unary_op('+',new PC_Obj_Variable('',$this->yystack[$this->yyidx + 0]->minor))->get_type();
    }
#line 4788 "src/compile/typeparser.php"
#line 334 "src/compile/typeparser.y"
    function yy_r143(){
	$this->_retvalue = $this->state->handle_unary_op('-',new PC_Obj_Variable('',$this->yystack[$this->yyidx + 0]->minor))->get_type();
    }
#line 4793 "src/compile/typeparser.php"
#line 337 "src/compile/typeparser.y"
    function yy_r144(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 4796 "src/compile/typeparser.php"
#line 338 "src/compile/typeparser.y"
    function yy_r145(){ /* TODO */ $this->_retvalue = null;     }
#line 4799 "src/compile/typeparser.php"
#line 342 "src/compile/typeparser.y"
    function yy_r148(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::TARRAY);     }
#line 4802 "src/compile/typeparser.php"
#line 345 "src/compile/typeparser.y"
    function yy_r149(){
	$this->_retvalue = $this->yystack[$this->yyidx + -4]->minor;
	$this->_retvalue->set_array_type($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4808 "src/compile/typeparser.php"
#line 350 "src/compile/typeparser.y"
    function yy_r150(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue->set_array_type($this->_retvalue->get_next_array_key(),$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4814 "src/compile/typeparser.php"
#line 354 "src/compile/typeparser.y"
    function yy_r151(){
	$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::TARRAY);
	$this->_retvalue->set_array_type($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4820 "src/compile/typeparser.php"
#line 358 "src/compile/typeparser.y"
    function yy_r152(){
	$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::TARRAY);
	$this->_retvalue->set_array_type(0,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4826 "src/compile/typeparser.php"
#line 411 "src/compile/typeparser.y"
    function yy_r185(){ $this->_retvalue = array();     }
#line 4829 "src/compile/typeparser.php"
#line 413 "src/compile/typeparser.y"
    function yy_r186(){
	$this->_retvalue = array();
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + 0]->minor);
	$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -1]->minor)));
	$this->_retvalue[] = $param;
    }
#line 4837 "src/compile/typeparser.php"
#line 419 "src/compile/typeparser.y"
    function yy_r187(){
	$this->_retvalue = array();
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + 0]->minor);
	$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -2]->minor)));
	$this->_retvalue[] = $param;
    }
#line 4845 "src/compile/typeparser.php"
#line 426 "src/compile/typeparser.y"
    function yy_r188(){
	$this->_retvalue = array();
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + -2]->minor);
	if($this->yystack[$this->yyidx + -4]->minor->is_unknown())
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + 0]->minor)));
	else
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -4]->minor)));
	$param->set_optional(true);
	$this->_retvalue[] = $param;
    }
#line 4857 "src/compile/typeparser.php"
#line 437 "src/compile/typeparser.y"
    function yy_r189(){
	$this->_retvalue = array();
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + -2]->minor);
	if($this->yystack[$this->yyidx + -3]->minor->is_unknown())
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + 0]->minor)));
	else
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -3]->minor)));
	$param->set_optional(true);
	$this->_retvalue[] = $param;
    }
#line 4869 "src/compile/typeparser.php"
#line 448 "src/compile/typeparser.y"
    function yy_r190(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + 0]->minor);
	$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -1]->minor)));
	$this->_retvalue[] = $param;
    }
#line 4877 "src/compile/typeparser.php"
#line 455 "src/compile/typeparser.y"
    function yy_r191(){
	$this->_retvalue = $this->yystack[$this->yyidx + -4]->minor;
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + 0]->minor);
	$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -2]->minor)));
	$this->_retvalue[] = $param;
    }
#line 4885 "src/compile/typeparser.php"
#line 462 "src/compile/typeparser.y"
    function yy_r192(){
	$this->_retvalue = $this->yystack[$this->yyidx + -6]->minor;
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + -2]->minor);
	if($this->yystack[$this->yyidx + -4]->minor->is_unknown())
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + 0]->minor)));
	else
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -4]->minor)));
	$param->set_optional(true);
	$this->_retvalue[] = $param;
    }
#line 4897 "src/compile/typeparser.php"
#line 473 "src/compile/typeparser.y"
    function yy_r193(){
	$this->_retvalue = $this->yystack[$this->yyidx + -5]->minor;
	$param = new PC_Obj_Parameter($this->yystack[$this->yyidx + -2]->minor);
	if($this->yystack[$this->yyidx + -3]->minor->is_unknown())
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + 0]->minor)));
	else
		$param->set_mtype(new PC_Obj_MultiType(array($this->yystack[$this->yyidx + -3]->minor)));
	$param->set_optional(true);
	$this->_retvalue[] = $param;
    }
#line 4909 "src/compile/typeparser.php"
#line 485 "src/compile/typeparser.y"
    function yy_r194(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::OBJECT,null,$this->yystack[$this->yyidx + 0]->minor);     }
#line 4912 "src/compile/typeparser.php"
#line 487 "src/compile/typeparser.y"
    function yy_r196(){ $this->_retvalue = new PC_Obj_Type(PC_Obj_Type::UNKNOWN);     }
#line 4915 "src/compile/typeparser.php"
#line 492 "src/compile/typeparser.y"
    function yy_r199(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 4918 "src/compile/typeparser.php"
#line 496 "src/compile/typeparser.y"
    function yy_r202(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4924 "src/compile/typeparser.php"
#line 506 "src/compile/typeparser.y"
    function yy_r204(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4930 "src/compile/typeparser.php"
#line 524 "src/compile/typeparser.y"
    function yy_r214(){
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4936 "src/compile/typeparser.php"
#line 530 "src/compile/typeparser.y"
    function yy_r216(){
	$this->_retvalue = new PC_Obj_Field($this->state->get_file(),$this->state->get_line());
	$this->_retvalue->set_name($this->yystack[$this->yyidx + -1]->minor->metadata['name']);
	$this->_retvalue->set_static(in_array('static',$this->yystack[$this->yyidx + -2]->minor->metadata));
	if(in_array('private',$this->yystack[$this->yyidx + -2]->minor->metadata))
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PRIVATE);
	else if(in_array('protected',$this->yystack[$this->yyidx + -2]->minor->metadata))
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PROTECTED);
	else
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PUBLIC);
	if(isset($this->yystack[$this->yyidx + -1]->minor->metadata['val']))
		$this->_retvalue->set_type($this->yystack[$this->yyidx + -1]->minor->metadata['val']);
	$this->state->parse_field_doc($this->_retvalue);
    }
#line 4952 "src/compile/typeparser.php"
#line 544 "src/compile/typeparser.y"
    function yy_r217(){
	$this->_retvalue = new PC_Obj_Constant(
		$this->state->get_file(),$this->state->get_line(),$this->yystack[$this->yyidx + -1]->minor->metadata['name'],
		isset($this->yystack[$this->yyidx + -1]->minor->metadata['val']) ? $this->yystack[$this->yyidx + -1]->minor->metadata['val'] : new PC_Obj_Type(PC_Obj_Type::UNKNOWN)
	);
	$this->state->parse_const_doc($this->_retvalue);
    }
#line 4961 "src/compile/typeparser.php"
#line 552 "src/compile/typeparser.y"
    function yy_r218(){
	$this->_retvalue = new PC_Obj_Method($this->state->get_file(),$this->state->get_last_function_line(),false);
	$this->_retvalue->set_name($this->yystack[$this->yyidx + -4]->minor);
	$this->_retvalue->set_static(in_array('static',$this->yystack[$this->yyidx + -7]->minor->metadata));
	$this->_retvalue->set_abstract(in_array('abstract',$this->yystack[$this->yyidx + -7]->minor->metadata));
	$this->_retvalue->set_final(in_array('final',$this->yystack[$this->yyidx + -7]->minor->metadata));
	if(in_array('private',$this->yystack[$this->yyidx + -7]->minor->metadata))
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PRIVATE);
	else if(in_array('protected',$this->yystack[$this->yyidx + -7]->minor->metadata))
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PROTECTED);
	else
		$this->_retvalue->set_visibility(PC_Obj_Visible::V_PUBLIC);
	foreach($this->yystack[$this->yyidx + -2]->minor as $param)
		$this->_retvalue->put_param($param);
	$this->state->parse_method_doc($this->_retvalue);
    }
#line 4979 "src/compile/typeparser.php"
#line 574 "src/compile/typeparser.y"
    function yy_r222(){ $this->_retvalue = new PC_Type_yyToken('',array('public'));     }
#line 4982 "src/compile/typeparser.php"
#line 580 "src/compile/typeparser.y"
    function yy_r226(){
	$this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + -1]->minor);
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4988 "src/compile/typeparser.php"
#line 585 "src/compile/typeparser.y"
    function yy_r227(){
	$this->_retvalue = new PC_Type_yyToken('',array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 4993 "src/compile/typeparser.php"
#line 589 "src/compile/typeparser.y"
    function yy_r228(){
	$this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + -2]->minor);
	$this->_retvalue[] = array('name' => substr($this->yystack[$this->yyidx + 0]->minor,1));
    }
#line 4999 "src/compile/typeparser.php"
#line 594 "src/compile/typeparser.y"
    function yy_r229(){
	$this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + -4]->minor);
	$this->_retvalue[] = array('name' => substr($this->yystack[$this->yyidx + -2]->minor,1),'val' => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 5005 "src/compile/typeparser.php"
#line 598 "src/compile/typeparser.y"
    function yy_r230(){
	$this->_retvalue = new PC_Type_yyToken('',array('name' => substr($this->yystack[$this->yyidx + 0]->minor,1)));
    }
#line 5010 "src/compile/typeparser.php"
#line 601 "src/compile/typeparser.y"
    function yy_r231(){
	$this->_retvalue = new PC_Type_yyToken('',array('name' => substr($this->yystack[$this->yyidx + -2]->minor,1),'val' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5015 "src/compile/typeparser.php"
#line 606 "src/compile/typeparser.y"
    function yy_r232(){
	$this->_retvalue = new PC_Type_yyToken($this->yystack[$this->yyidx + -4]->minor);
	$this->_retvalue[] = array('name' => $this->yystack[$this->yyidx + -2]->minor,'val' => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 5021 "src/compile/typeparser.php"
#line 610 "src/compile/typeparser.y"
    function yy_r233(){
	$this->_retvalue = new PC_Type_yyToken('',array('name' => $this->yystack[$this->yyidx + -2]->minor,'val' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5026 "src/compile/typeparser.php"
#line 735 "src/compile/typeparser.y"
    function yy_r320(){
	if(strcasecmp($this->yystack[$this->yyidx + -3]->minor,'define') == 0)
		$this->state->handle_define($this->yystack[$this->yyidx + -1]->minor);
    }
#line 5032 "src/compile/typeparser.php"
#line 751 "src/compile/typeparser.y"
    function yy_r325(){
	$this->_retvalue = new PC_Obj_Type(PC_Obj_Type::STRING);
    }
#line 5037 "src/compile/typeparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //PC_Type_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new PC_Type_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 4 "src/compile/typeparser.y"

    echo "Syntax Error " . ($this->state->get_file() ? "in file " . $this->state->get_file()." " : '');
		echo "on line " . $this->state->get_line() . ": token '" . htmlspecialchars($this->state->get_value()) . "'";
		echo " (".token_name($this->state->get_token()).") while parsing rule: ";
    foreach ($this->yystack as $entry) {
        echo $this->tokenName($entry->major) . '->';
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	echo "\n";	
    throw new Exception('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. '), expected one of: ' . implode(',', $expect));
#line 5163 "src/compile/typeparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new PC_Type_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}