<?php
/* Driver template for the PHP_PC_Stmt_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class PC_Stmt_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof PC_Stmt_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof PC_Stmt_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof PC_Stmt_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof PC_Stmt_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class PC_Stmt_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "src/compile/stmtparser.y"
class PC_Compile_StmtParser#line 102 "src/compile/stmtparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 18 "src/compile/stmtparser.y"

		// current state, i.e. the function, class and variables in scope
		private $state;
		
		public $transTable = array();

    function __construct($state)
    {
				$this->state = $state;
				if(!count($this->transTable))
				{
					$start = 240; // start nice and low to be sure
					while(token_name($start) == 'UNKNOWN')
						$start++;
					$hash = array_flip(self::$yyTokenName);
					$map = array(
						ord(',') => self::COMMA,
						ord('=') => self::EQUALS,
						ord('?') => self::QUESTION,
						ord(':') => self::COLON,
						ord('|') => self::BAR,
						ord('^') => self::CARAT,
						ord('&') => self::AMPERSAND,
						ord('<') => self::LESSTHAN,
						ord('>') => self::GREATERTHAN,
						ord('+') => self::PLUS,
						ord('-') => self::MINUS,
						ord('.') => self::DOT,
						ord('*') => self::TIMES,
						ord('/') => self::DIVIDE,
						ord('%') => self::PERCENT,
						ord('!') => self::EXCLAM,
						ord('~') => self::TILDE,
						ord('@') => self::AT,
						ord('[') => self::LBRACKET,
						ord('(') => self::LPAREN,
						ord(')') => self::RPAREN,
						ord(';') => self::SEMI,
						ord('{') => self::LCURLY,
						ord('}') => self::RCURLY,
						ord('`') => self::BACKQUOTE,
						ord('$') => self::DOLLAR,
						ord(']') => self::RBRACKET,
						ord('"') => self::DOUBLEQUOTE,
						ord("'") => self::SINGLEQUOTE,
					);
					for($i = $start; $i < self::YYERRORSYMBOL + $start; $i++)
					{
						$lt = token_name($i);
      			$lt = ($lt == 'T_ML_COMMENT') ? 'T_COMMENT' : $lt;
						$lt = ($lt == 'T_DOUBLE_COLON') ?  'T_PAAMAYIM_NEKUDOTAYIM' : $lt;
						if(!isset($hash[$lt]))
							continue;
		
						$map[$i] = $hash[$lt];
					}
					$this->transTable = $map;
				}
    }
#line 167 "src/compile/stmtparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_INCLUDE                      =  1;
    const T_INCLUDE_ONCE                 =  2;
    const T_EVAL                         =  3;
    const T_REQUIRE                      =  4;
    const T_REQUIRE_ONCE                 =  5;
    const COMMA                          =  6;
    const T_LOGICAL_OR                   =  7;
    const T_LOGICAL_XOR                  =  8;
    const T_LOGICAL_AND                  =  9;
    const T_PRINT                        = 10;
    const EQUALS                         = 11;
    const T_PLUS_EQUAL                   = 12;
    const T_MINUS_EQUAL                  = 13;
    const T_MUL_EQUAL                    = 14;
    const T_DIV_EQUAL                    = 15;
    const T_CONCAT_EQUAL                 = 16;
    const T_MOD_EQUAL                    = 17;
    const T_AND_EQUAL                    = 18;
    const T_OR_EQUAL                     = 19;
    const T_XOR_EQUAL                    = 20;
    const T_SL_EQUAL                     = 21;
    const T_SR_EQUAL                     = 22;
    const QUESTION                       = 23;
    const COLON                          = 24;
    const T_BOOLEAN_OR                   = 25;
    const T_BOOLEAN_AND                  = 26;
    const BAR                            = 27;
    const CARAT                          = 28;
    const AMPERSAND                      = 29;
    const T_IS_EQUAL                     = 30;
    const T_IS_NOT_EQUAL                 = 31;
    const T_IS_IDENTICAL                 = 32;
    const T_IS_NOT_IDENTICAL             = 33;
    const LESSTHAN                       = 34;
    const T_IS_SMALLER_OR_EQUAL          = 35;
    const GREATERTHAN                    = 36;
    const T_IS_GREATER_OR_EQUAL          = 37;
    const T_SL                           = 38;
    const T_SR                           = 39;
    const PLUS                           = 40;
    const MINUS                          = 41;
    const DOT                            = 42;
    const TIMES                          = 43;
    const DIVIDE                         = 44;
    const PERCENT                        = 45;
    const EXCLAM                         = 46;
    const T_INSTANCEOF                   = 47;
    const TILDE                          = 48;
    const T_INC                          = 49;
    const T_DEC                          = 50;
    const T_INT_CAST                     = 51;
    const T_DOUBLE_CAST                  = 52;
    const T_STRING_CAST                  = 53;
    const T_ARRAY_CAST                   = 54;
    const T_OBJECT_CAST                  = 55;
    const T_BOOL_CAST                    = 56;
    const T_UNSET_CAST                   = 57;
    const AT                             = 58;
    const LBRACKET                       = 59;
    const T_NEW                          = 60;
    const T_CLONE                        = 61;
    const T_ELSEIF                       = 62;
    const T_ELSE                         = 63;
    const T_ENDIF                        = 64;
    const T_STATIC                       = 65;
    const T_ABSTRACT                     = 66;
    const T_FINAL                        = 67;
    const T_PRIVATE                      = 68;
    const T_PROTECTED                    = 69;
    const T_PUBLIC                       = 70;
    const T_HALT_COMPILER                = 71;
    const LPAREN                         = 72;
    const RPAREN                         = 73;
    const SEMI                           = 74;
    const LCURLY                         = 75;
    const RCURLY                         = 76;
    const T_IF                           = 77;
    const T_WHILE                        = 78;
    const T_DO                           = 79;
    const T_FOR                          = 80;
    const T_SWITCH                       = 81;
    const T_BREAK                        = 82;
    const T_CONTINUE                     = 83;
    const T_RETURN                       = 84;
    const T_GLOBAL                       = 85;
    const T_ECHO                         = 86;
    const T_INLINE_HTML                  = 87;
    const T_USE                          = 88;
    const T_UNSET                        = 89;
    const T_FOREACH                      = 90;
    const T_AS                           = 91;
    const T_DECLARE                      = 92;
    const T_TRY                          = 93;
    const T_CATCH                        = 94;
    const T_VARIABLE                     = 95;
    const T_THROW                        = 96;
    const T_FUNCTION                     = 97;
    const T_STRING                       = 98;
    const T_CLASS                        = 99;
    const T_EXTENDS                      = 100;
    const T_INTERFACE                    = 101;
    const T_IMPLEMENTS                   = 102;
    const T_LIST                         = 103;
    const T_EXIT                         = 104;
    const T_ARRAY                        = 105;
    const BACKQUOTE                      = 106;
    const T_LNUMBER                      = 107;
    const T_DNUMBER                      = 108;
    const T_CONSTANT_ENCAPSED_STRING     = 109;
    const T_LINE                         = 110;
    const T_FILE                         = 111;
    const T_CLASS_C                      = 112;
    const T_METHOD_C                     = 113;
    const T_FUNC_C                       = 114;
    const T_DOUBLE_ARROW                 = 115;
    const T_PAAMAYIM_NEKUDOTAYIM         = 116;
    const T_ENDFOR                       = 117;
    const T_ENDFOREACH                   = 118;
    const T_ENDDECLARE                   = 119;
    const T_ENDSWITCH                    = 120;
    const T_CASE                         = 121;
    const T_DEFAULT                      = 122;
    const T_ENDWHILE                     = 123;
    const DOLLAR                         = 124;
    const T_VAR                          = 125;
    const T_CONST                        = 126;
    const T_OBJECT_OPERATOR              = 127;
    const RBRACKET                       = 128;
    const T_NUM_STRING                   = 129;
    const T_ENCAPSED_AND_WHITESPACE      = 130;
    const T_CHARACTER                    = 131;
    const T_BAD_CHARACTER                = 132;
    const T_DOLLAR_OPEN_CURLY_BRACES     = 133;
    const T_STRING_VARNAME               = 134;
    const T_CURLY_OPEN                   = 135;
    const T_ISSET                        = 136;
    const T_EMPTY                        = 137;
    const DOUBLEQUOTE                    = 138;
    const SINGLEQUOTE                    = 139;
    const T_START_HEREDOC                = 140;
    const T_END_HEREDOC                  = 141;
    const YY_NO_ACTION = 1056;
    const YY_ACCEPT_ACTION = 1055;
    const YY_ERROR_ACTION = 1054;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 10543;
static public $yy_action = array(
 /*     0 */    82,   83,  455,   58,   55,  575,  223,  497,   80,   70,
 /*    10 */   106,   99,   90,  115,  112,   64,   59,   52,   50,   63,
 /*    20 */    54,   60,   49,  120,   85,  110,  111,  123,  119,  118,
 /*    30 */   114,  234,  148,  391,  905,  610,  354,  180,  668,   67,
 /*    40 */    88,  484,  667,  338,  609,   87,  456,   79,  135,  137,
 /*    50 */    69,   72,   73,   77,   75,   74,  122,   76,  148,  149,
 /*    60 */    94,  431,  354,  180,  205,  382,  384,  383,  667,  241,
 /*    70 */   429,   78,  540,  673,  227,  419,  486,  444,   24,  439,
 /*    80 */   452,   40,   39,   41,  181,   36,  701,  198,  378,  386,
 /*    90 */   406,  361,  377,  245,  668,  105,  225,  347,  535,  400,
 /*   100 */   552,  905,  417,  224,  440,  228,  706,  663,  664,  661,
 /*   110 */   665,  671,  671,  671,  192,   82,   83,  455,   58,   55,
 /*   120 */   443,   98,  194,  383,   70,  565,  565,  565,  565,  565,
 /*   130 */   565,  687,  493,  607,  676,  375,  485,  230,  237,  235,
 /*   140 */    63,   54,   60,   49,  120,   85,  110,  111,  123,  119,
 /*   150 */   118,  114,  526,  148,   67,   88,  404,  929,  668,  526,
 /*   160 */    87,  465,   79,  135,  137,   69,   72,   73,   77,   75,
 /*   170 */    74,  122,   76,  408,  149,   94,  618,  354,  180,  205,
 /*   180 */   382,  384,  434,  667,  128,  429,   78,  383,  673,  227,
 /*   190 */   453,  486,  444,   24,  439,  452,   40,   39,   41,  181,
 /*   200 */    36,  701,  198,  378,  386,  132,  361,  377,  201,  668,
 /*   210 */   105,  225,  347,  535,  411,  552,   29,  417,  224,  440,
 /*   220 */   228,  706,  663,  664,  661,  665,  671,  671,  671,  668,
 /*   230 */   139,  457,  484,   82,   83,  455,   58,   55,  383,  403,
 /*   240 */   357,  659,   70,  345,  183,  702,  466,  172,  607,  667,
 /*   250 */   375,  485,  230,  237,  235,  482,  121,  634,  383,  621,
 /*   260 */  1025,  610,  354,  180,  687,  682,  392,  676,  667,  338,
 /*   270 */   609,  668,   67,   88,  484,   38,  668,  698,   87,  612,
 /*   280 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*   290 */    76,   81,  149,   94,  602,  582,   93,  205,  382,  384,
 /*   300 */   383,  459,  464,  429,   78,  383,  673,  227,  179,  486,
 /*   310 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*   320 */   198,  378,  386,  684,  361,  377,  193,  668,  105,  225,
 /*   330 */   347,  535,  551,  552,  672,  417,  224,  440,  228,  706,
 /*   340 */   663,  664,  661,  665,  671,  671,  671,  593,   82,   83,
 /*   350 */   455,   58,   55,  437,   98,  194,  383,   70,  110,  111,
 /*   360 */   123,  119,  118,  114,  680,  148,  607,  219,  375,  485,
 /*   370 */   230,  237,  235,  209,  499,  248,  129,  610,  354,  180,
 /*   380 */   668,  668,  551,  370,  667,  338,  609,   67,   88,  687,
 /*   390 */   494,  398,  676,   87,  600,   79,  135,  137,   69,   72,
 /*   400 */    73,   77,   75,   74,  122,   76,  100,  149,   94,  383,
 /*   410 */   393,  140,  205,  382,  384,  144,  403,  357,  429,   78,
 /*   420 */   453,  673,  227,  544,  486,  444,   24,  439,  452,   40,
 /*   430 */    39,   41,  181,   36,  701,  198,  378,  386,  590,  361,
 /*   440 */   377,  330,  668,  105,  225,  347,  535,  667,  552,  703,
 /*   450 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*   460 */   671,  671,  533,   82,   83,  455,   58,   55, 1055,   12,
 /*   470 */   538,  383,   70,  345,  183,  702,  466,  380,  379,  667,
 /*   480 */   531,  607,  522,  375,  485,  230,  237,  235,   38,  621,
 /*   490 */   687,  369,  668,  676,  208,  445,  364,  130,  610,  354,
 /*   500 */   180,  957,   67,   88,   81,  667,  338,  609,   87,   46,
 /*   510 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*   520 */    76,  383,  149,   94,  346,   98,  194,  205,  382,  384,
 /*   530 */   667,  397,   23,  429,   78,  353,  673,  227,  533,  486,
 /*   540 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*   550 */   198,  378,  386,  367,  361,  377,  342,  668,  105,  225,
 /*   560 */   347,  535,  667,  552,  360,  417,  224,  440,  228,  706,
 /*   570 */   663,  664,  661,  665,  671,  671,  671,  390,   82,   83,
 /*   580 */   455,   58,   55,  685,  402,  475,  383,   70,  687,  366,
 /*   590 */   436,  676,  374,  119,  118,  114,  607,  148,  375,  485,
 /*   600 */   230,  237,  235,  166,  130,  670,  221,  558,  356,  405,
 /*   610 */   558,  191,  536,  687,  514,  892,  676,   67,   88,  687,
 /*   620 */   502,  178,  676,   87,  160,   79,  135,  137,   69,   72,
 /*   630 */    73,   77,   75,   74,  122,   76,  199,  149,   94,  163,
 /*   640 */   526,  558,  205,  382,  384,  490,  200,  526,  429,   78,
 /*   650 */   453,  673,  227,  657,  486,  444,   24,  439,  452,   40,
 /*   660 */    39,   41,  181,   36,  701,  198,  378,  386,  210,  361,
 /*   670 */   377,  630,  668,  105,  225,  347,  535,  212,  552,  577,
 /*   680 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*   690 */   671,  671,   37,   82,   83,  455,   58,   55,  104,  399,
 /*   700 */    71,  383,   70,  345,  183,  702,  466,   92,  116,  667,
 /*   710 */   216,  607,   20,  375,  485,  230,  237,  235,  156,  621,
 /*   720 */   687,  547,  668,  676,   98,  194,  381,  668,  687,  678,
 /*   730 */   484,  676,   67,   88,  687,  529,  220,  676,   87,  495,
 /*   740 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*   750 */    76,  383,  149,   94,  243,  162,  383,  205,  382,  384,
 /*   760 */   705,  207,  161,  429,   78,  569,  673,  227,  549,  486,
 /*   770 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*   780 */   198,  378,  386,  570,  361,  377,  908,  668,  105,  225,
 /*   790 */   347,  535,  242,  552,  432,  417,  224,  440,  228,  706,
 /*   800 */   663,  664,  661,  665,  671,  671,  671,  594,  385,  687,
 /*   810 */   675,  371,  676,  341,  687,  666,  383,  676,   82,   83,
 /*   820 */   455,   58,   55,  578,  560,  231,  607,   70,  375,  485,
 /*   830 */   230,  237,  235,   99,   90,  115,  112,   64,   59,   52,
 /*   840 */    50,   63,   54,   60,   49,  120,   85,  110,  111,  123,
 /*   850 */   119,  118,  114,  908,  148,  461,  415,   67,   88,  687,
 /*   860 */   681,  175,  676,   87,  170,   79,  135,  137,   69,   72,
 /*   870 */    73,   77,   75,   74,  122,   76,  176,  149,   94,  518,
 /*   880 */    31,  157,  205,  382,  384,  704,  363,  107,  429,   78,
 /*   890 */   217,  673,  227,  650,  486,  444,   24,  439,  452,   40,
 /*   900 */    39,   41,  181,   36,  701,  198,  378,  386,  410,  361,
 /*   910 */   377,  147,  668,  105,  225,  347,  535,   17,  552,  598,
 /*   920 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*   930 */   671,  671,   38,   82,   83,  455,   58,   55,  409, 1025,
 /*   940 */   229,  383,   70,  620,  622,  958,  668,  153,   81,  484,
 /*   950 */   473,  607,  638,  375,  485,  230,  237,  235,  687,  662,
 /*   960 */   555,  676,  460,  687,  683,  625,  676,  687,  660,  528,
 /*   970 */   676,  159,   67,   88,   19,  383,  687,  679,   87,  676,
 /*   980 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*   990 */    76,  109,  149,   94,  152,   89,  125,  205,  382,  384,
 /*  1000 */   103,  239,  102,  429,   78,  530,  673,  227,  146,  486,
 /*  1010 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*  1020 */   198,  378,  386,   29,  361,  377,  202,  668,  105,  225,
 /*  1030 */   347,  535,  606,  552,  487,  417,  224,  440,  228,  706,
 /*  1040 */   663,  664,  661,  665,  671,  671,  671,  101,  687,  520,
 /*  1050 */   488,  676,  167,  489,  173,  572,  383,  591,   82,   83,
 /*  1060 */   455,   58,   55,  131,  470,  636,  607,   70,  375,  485,
 /*  1070 */   230,  237,  235,   90,  115,  112,   64,   59,   52,   50,
 /*  1080 */    63,   54,   60,   49,  120,   85,  110,  111,  123,  119,
 /*  1090 */   118,  114,  613,  148,  491,  637,  171,   67,   88,  589,
 /*  1100 */    18,   28,  422,   87,  418,   79,  135,  137,   69,   72,
 /*  1110 */    73,   77,   75,   74,  122,   76,  222,  149,   94,  158,
 /*  1120 */   420,  424,  205,  382,  384,  244,  645,  426,  429,   78,
 /*  1130 */   246,  673,  227,  567,  486,  444,   24,  439,  452,   40,
 /*  1140 */    39,   41,  181,   36,  701,  198,  378,  386,  126,  361,
 /*  1150 */   377,  395,  668,  105,  225,  347,  535,  165,  552,  164,
 /*  1160 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  1170 */   671,  671,  177,   82,   83,  455,   58,   55,  689,  423,
 /*  1180 */   211,  383,   70,  697,  412,  425,  564,  441,   97,   26,
 /*  1190 */    96,  607,  599,  375,  485,  230,  237,  235,   34,   33,
 /*  1200 */    35,  554,   32,  413,  215,  677,  247,  553,  492,  117,
 /*  1210 */   168,    3,   67,   88,  331,  477,  511,   45,   87,   30,
 /*  1220 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  1230 */    76,    4,  149,   94,  653,  127,  686,  205,  382,  384,
 /*  1240 */   226,  546,  537,  467,   78,  539,  673,  227,  365,  486,
 /*  1250 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*  1260 */   198,  378,  386,  416,  361,  377,  185,  668,  105,  225,
 /*  1270 */   347,  535,    1,  552,  566,  417,  224,  440,  228,  706,
 /*  1280 */   663,  664,  661,  665,  671,  671,  671,    9,   82,   83,
 /*  1290 */   455,   58,   55,  218,  362,  451,  383,   70,   27,  249,
 /*  1300 */   450,  332,  182,  702,  693,  699,  607,  667,  375,  485,
 /*  1310 */   230,  237,  235,  626,  154,  352,  407,    7,  214,    2,
 /*  1320 */   204,    5,  401,  585,  421,    6,  336,   67,   88,  428,
 /*  1330 */   232,   11,  635,   87,  151,   79,  135,  137,   69,   72,
 /*  1340 */    73,   77,   75,   74,  122,   76,  155,  149,   94,  690,
 /*  1350 */   188,  190,  205,  382,  384,   13,  187,  500,  429,   78,
 /*  1360 */   197,  673,  227,   14,  486,  444,   24,  439,  452,   40,
 /*  1370 */    39,   41,  181,   36,  701,  198,  378,  386,  479,  361,
 /*  1380 */   377,   16,  668,  105,  225,  347,  535,  189,  552,  335,
 /*  1390 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  1400 */   671,  671,    8,  348,   43,   10,  150,  184,   15,  505,
 /*  1410 */   588,  383,  368,   82,   83,  455,   58,   55,  333,  334,
 /*  1420 */   579,  607,   70,  375,  485,  230,  237,  235,  433,  595,
 /*  1430 */   389,  595,  595,  595,  595,  595,  236,   42,   91,   86,
 /*  1440 */    51,   61,   65,   57,   66,   62,   56,   48,   53,  595,
 /*  1450 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  1460 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  1470 */    76,  595,  149,   94,  595,  949,  949,  205,  595,  595,
 /*  1480 */   595,  595,  595,  595,   78,  595,  673,  227,  595,  486,
 /*  1490 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*  1500 */   198,  378,  386,  595,  361,  377,  595,  668,  105,  595,
 /*  1510 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  1520 */   663,  664,  661,  665,  671,  671,  671,  595,  595,  595,
 /*  1530 */   595,  595,  595,  595,  595,  595,  383,  595,   82,   83,
 /*  1540 */   455,   58,   55,  595,  595,  595,  607,   70,  375,  485,
 /*  1550 */   230,  237,  235,  595,  595,  595,  595,  595,  595,  595,
 /*  1560 */   595,  251,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1570 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  1580 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  1590 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  1600 */   595,  595,  205,  595,  595,  595,  595,  595,  595,   78,
 /*  1610 */   595,  673,  227,  595,  486,  444,   24,  439,  452,   40,
 /*  1620 */    39,   41,  181,   36,  701,  198,  378,  386,  595,  361,
 /*  1630 */   377,  595,  668,  105,  595,  347,  595,  595,  595,  595,
 /*  1640 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  1650 */   671,  671,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1660 */   595,  383,  595,   82,   83,  455,   58,   55,  595,  595,
 /*  1670 */   595,  607,   70,  375,  485,  230,  237,  235,  595,  595,
 /*  1680 */   595,  595,  595,  595,  595,  595,  250,  595,  595,  595,
 /*  1690 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1700 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  1710 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  1720 */    76,  595,  149,   94,  595,  595,  595,  205,  595,  595,
 /*  1730 */   595,  595,  595,  595,   78,  595,  673,  227,  595,  486,
 /*  1740 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*  1750 */   198,  378,  386,  595,  361,  377,  595,  668,  105,  595,
 /*  1760 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  1770 */   663,  664,  661,  665,  671,  671,  671,  595,  595,  595,
 /*  1780 */   595,  595,  595,  595,  595,  595,  383,  595,   82,   83,
 /*  1790 */   455,   58,   55,  595,  595,  595,  607,   70,  375,  485,
 /*  1800 */   230,  237,  235,  595,  595,  595,  595,  595,  595,  595,
 /*  1810 */   595,  233,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1820 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  1830 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  1840 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  1850 */   595,  595,  205,  595,  595,  595,  595,  595,  595,   78,
 /*  1860 */   595,  673,  227,  595,  486,  444,   24,  439,  452,   40,
 /*  1870 */    39,   41,  181,   36,  701,  198,  378,  386,  595,  361,
 /*  1880 */   377,  595,  668,  105,  595,  347,  595,  595,  595,  595,
 /*  1890 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  1900 */   671,  671,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1910 */   595,  383,  595,   82,   83,  455,   58,   55,  595,  595,
 /*  1920 */   595,  607,   70,  375,  485,  230,  237,  235,  595,  595,
 /*  1930 */   595,  595,  595,  595,  595,  595,  238,  595,  595,  595,
 /*  1940 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  1950 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  1960 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  1970 */    76,  595,  149,   94,  595,  595,  595,  205,  595,  595,
 /*  1980 */   595,  595,  595,  595,   78,  595,  673,  227,  595,  486,
 /*  1990 */   444,   24,  439,  452,   40,   39,   41,  181,   36,  701,
 /*  2000 */   198,  378,  386,  595,  361,  377,  595,  668,  105,  595,
 /*  2010 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  2020 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  2030 */   455,   58,   55,  595,  595,  595,  383,   70,  595,  595,
 /*  2040 */   595,  595,  595,  595,  595,  595,  607,  595,  375,  485,
 /*  2050 */   230,  237,  235,  595,  595,  595,  595,  595,  595,  595,
 /*  2060 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  2070 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  2080 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  2090 */   595,  595,  205,  595,  595,  595,  595,  595,  595,   78,
 /*  2100 */   595,  673,  227,  595,  486,  444,   24,  439,  452,   40,
 /*  2110 */    39,   41,  181,   36,  701,  198,  378,  386,  595,  361,
 /*  2120 */   377,  595,  668,  105,  595,  347,  595,  595,  595,  595,
 /*  2130 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  2140 */   671,  671,  595,   82,   83,  455,   58,   55,  595,  595,
 /*  2150 */   595,  383,   70,  595,  595,  595,  595,  595,  595,  595,
 /*  2160 */   595,  607,  595,  375,  485,  230,  237,  235,  595,  595,
 /*  2170 */   595,  141,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  2180 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  2190 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  2200 */    76,  595,  149,   94,  565,  565,  565,  565,  565,  565,
 /*  2210 */   595,  595,  595,  595,   78,  556,  106,   99,   90,  115,
 /*  2220 */   112,   64,   59,   52,   50,   63,   54,   60,   49,  120,
 /*  2230 */    85,  110,  111,  123,  119,  118,  114,  668,  148,  595,
 /*  2240 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  2250 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  2260 */   455,   58,   55,  595,  568,  358,  383,   70,  595,  595,
 /*  2270 */   595,  595,  595,  595,  595,  595,  607,  595,  375,  485,
 /*  2280 */   230,  237,  235,  595,  595,  595,  138,  595,  595,  595,
 /*  2290 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  2300 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  2310 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  565,
 /*  2320 */   565,  565,  565,  565,  565,  595,  595,  595,  595,   78,
 /*  2330 */   669,  595,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  2340 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  2350 */   595,  148,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  2360 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  2370 */   671,  671,  595,   82,   83,  455,   58,   55,  595,  568,
 /*  2380 */   358,  383,   70,  595,  595,  595,  595,  595,  595,  595,
 /*  2390 */   595,  607,  595,  375,  485,  230,  237,  235,  595,  595,
 /*  2400 */   595,  133,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  2410 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  2420 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  2430 */    76,  595,  149,   94,  595,  595,  595,  595,  595,  595,
 /*  2440 */   595,  595,  595,  595,   78,  595,  595,  595,  112,   64,
 /*  2450 */    59,   52,   50,   63,   54,   60,   49,  120,   85,  110,
 /*  2460 */   111,  123,  119,  118,  114,  595,  148,  668,  595,  595,
 /*  2470 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  2480 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  2490 */   455,   58,   55,  595,  595,  595,  383,   70,  595,  595,
 /*  2500 */   595,  595,  595,  595,  595,  595,  607,  595,  375,  485,
 /*  2510 */   230,  237,  235,  595,  595,  595,  134,  595,  595,  595,
 /*  2520 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  2530 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  2540 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  2550 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   78,
 /*  2560 */   595,  595,  595,  595,   64,   59,   52,   50,   63,   54,
 /*  2570 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  2580 */   595,  148,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  2590 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  2600 */   671,  671,  595,   82,   83,  455,   58,   55,  595,  595,
 /*  2610 */   595,  383,   70,  169,  174,  595,  595,  595,  595,  595,
 /*  2620 */   595,  607,  595,  375,  485,  230,  237,  235,  595,  595,
 /*  2630 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  2640 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  2650 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  2660 */    76,  595,  149,   94,  595,  595,  595,  595,  595,  595,
 /*  2670 */   595,  438,  595,  595,   78,  651,  595,  595,  373,  595,
 /*  2680 */   706,  663,  664,  661,  665,  671,  671,  671,  595,  595,
 /*  2690 */   595,  595,  595,  595,  595,  595,  595,  668,  595,  595,
 /*  2700 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  2710 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  2720 */   455,   58,   55,  595,  595,  595,  383,   70,  595,  595,
 /*  2730 */   595,  595,  694,  595,  595,  595,  607,  337,  375,  485,
 /*  2740 */   230,  237,  235,  595,  365,  595,  136,  595,  595,  595,
 /*  2750 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  2760 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  2770 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  2780 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   78,
 /*  2790 */   695,  451,  595,  595,  595,  595,  450,  332,  182,  702,
 /*  2800 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /*  2810 */   595,  595,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  2820 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  2830 */   671,  671,  595,   82,   83,  455,   58,   55,  595,  595,
 /*  2840 */   595,  383,   70,  595,  595,  595,  631,  595,  595,  595,
 /*  2850 */   595,  607,  595,  375,  485,  230,  237,  235,  365,  595,
 /*  2860 */   595,  142,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  2870 */   595,  595,   67,   88,  595,  344,  595,  595,   87,  595,
 /*  2880 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  2890 */    76,  595,  149,   94,  686,  595,  595,  595,  595,  595,
 /*  2900 */   206,  595,  595,  539,   78,  451,  365,  595,  595,  595,
 /*  2910 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  2920 */   608,  595,  595,  595,  595,  595,  595,  668,  595,  595,
 /*  2930 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  2940 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  2950 */   455,   58,   55,  451,  595,  595,  383,   70,  450,  332,
 /*  2960 */   182,  702,  693,  699,  595,  667,  607,  595,  375,  485,
 /*  2970 */   230,  237,  235,  595,  595,  595,  143,  595,  595,  595,
 /*  2980 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  2990 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  3000 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  3010 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   78,
 /*  3020 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3030 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3040 */   595,  595,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  3050 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  3060 */   671,  671,  576,   82,   83,  455,   58,   55,  595,  595,
 /*  3070 */   595,  383,   70,  595,  365,  595,  631,  595,  595,  595,
 /*  3080 */   595,  607,  595,  375,  485,  230,  237,  235,  365,  595,
 /*  3090 */   595,  595,  595,  595,  580,  595,  595,  595,  595,  595,
 /*  3100 */   595,  595,   67,   88,  595,  351,  595,  595,   87,  595,
 /*  3110 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  3120 */    76,  451,  149,   94,  595,  595,  450,  332,  182,  702,
 /*  3130 */   693,  699,  595,  667,   78,  451,  604,  595,  595,  595,
 /*  3140 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  3150 */   608,  595,  595,  595,  595,  595,  595,  668,  595,  595,
 /*  3160 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  3170 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  3180 */   455,   58,   55,  595,  595,  595,  383,   70,  595,  595,
 /*  3190 */   595,  595,  595,  595,  595,  595,  607,  595,  375,  485,
 /*  3200 */   230,  237,  235,  595,  595,  595,  595,  595,  595,  595,
 /*  3210 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  3220 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  3230 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  3240 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   78,
 /*  3250 */   595,  601,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3260 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3270 */   595,  595,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  3280 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  3290 */   671,  671,  542,   82,   83,  455,   58,   55,  595,  595,
 /*  3300 */   595,  383,   70,  595,  365,  595,  595,  595,  595,  686,
 /*  3310 */   595,  607,  595,  375,  485,  230,  237,  235,  691,  595,
 /*  3320 */   595,  365,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3330 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  3340 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  3350 */    76,  451,  149,   94,  595,  595,  450,  332,  182,  702,
 /*  3360 */   693,  699,  595,  667,   78,  595,  581,  595,  451,  595,
 /*  3370 */   595,  343,  595,  450,  332,  182,  702,  693,  699,  595,
 /*  3380 */   667,  595,  595,  595,  595,  595,  595,  668,  595,  595,
 /*  3390 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  3400 */   663,  664,  661,  665,  671,  671,  671,  595,   82,   83,
 /*  3410 */   455,   58,   55,  595,  595,  595,  383,   70,  595,  595,
 /*  3420 */   595,  595,  595,  595,  595,  595,  607,  595,  375,  485,
 /*  3430 */   230,  237,  235,  595,  595,  595,  595,  595,  595,  595,
 /*  3440 */   595,  595,  595,  595,  595,  595,  595,   67,   88,  595,
 /*  3450 */   595,  595,  595,   87,  595,   79,  135,  137,   69,   72,
 /*  3460 */    73,   77,   75,   74,  122,   76,  595,  149,   94,  595,
 /*  3470 */   595,  686,  595,  595,  595,  595,  595,  595,  595,   78,
 /*  3480 */   617,  595,  595,  365,  595,  595,  595,  595,  595,  595,
 /*  3490 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3500 */   595,  595,  668,  595,  595,  347,  595,  595,  595,  595,
 /*  3510 */   417,  224,  440,  228,  706,  663,  664,  661,  665,  671,
 /*  3520 */   671,  671,  576,   82,   83,  455,   58,   55,  595,  595,
 /*  3530 */   451,  383,   70,  595,  365,  450,  332,  182,  702,  693,
 /*  3540 */   699,  607,  667,  375,  485,  230,  237,  235,  595,  595,
 /*  3550 */   595,  595,  595,  595,  586,  595,  595,  595,  595,  595,
 /*  3560 */   595,  595,   67,   88,  595,  595,  595,  595,   87,  595,
 /*  3570 */    79,  135,  137,   69,   72,   73,   77,   75,   74,  122,
 /*  3580 */    76,  451,  149,   94,  595,  595,  450,  332,  182,  702,
 /*  3590 */   693,  699,  595,  667,   78,  595,  595,  595,  595,  595,
 /*  3600 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3610 */   595,  595,  595,  595,  595,  595,  595,  668,  595,  595,
 /*  3620 */   347,  595,  595,  595,  595,  417,  224,  440,  228,  706,
 /*  3630 */   663,  664,  661,  665,  671,  671,  671,  595,  595,  595,
 /*  3640 */   595,  595,  595,  595,  595,  595,  383,  595,  595,  644,
 /*  3650 */   643,  642,  541,  595,  254,  595,  435,  195,  375,  485,
 /*  3660 */   230,  237,  235,  654,  318,  595,  595,  595,  595,  595,
 /*  3670 */   595,  595,  595,  595,  595,  595,  427,  595,  595,  595,
 /*  3680 */   649,  646,  648,  595,  595,  394,  595,  595,  595,  430,
 /*  3690 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  3700 */   595,  595,  632,  595,   42,   91,   86,   51,   61,   65,
 /*  3710 */    57,   66,   62,   56,   48,   53,  595,  595,  595,  595,
 /*  3720 */   595,  595,  595,  451,  595,  595,  595,  595,  450,  332,
 /*  3730 */   182,  702,  693,  699,  595,  667,   95,  113,  108,  595,
 /*  3740 */   595,  595,  949,  949,  627,  595,  595,  595,  595,  595,
 /*  3750 */   595,  595,   80,  551,  106,   99,   90,  115,  112,   64,
 /*  3760 */    59,   52,   50,   63,   54,   60,   49,  120,   85,  110,
 /*  3770 */   111,  123,  119,  118,  114,  595,  148,  595,  595,  595,
 /*  3780 */   595,  595,  595,  595,  124,  595,  595,  595,  595,  595,
 /*  3790 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3800 */   595,  595,  595,  551,  595,  595,  595,  595,  595,  595,
 /*  3810 */   595,   95,  113,  108,  595,  595,  595,  595,  595,  595,
 /*  3820 */   595,  595,  595,  595,  595,  595,  595,   80,  595,  106,
 /*  3830 */    99,   90,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  3840 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  3850 */   595,  148,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3860 */   595,   42,   91,   86,   51,   61,   65,   57,   66,   62,
 /*  3870 */    56,   48,   53,  595,  595,  595,  694,  458,  595,  595,
 /*  3880 */   595,  595,  595,  595,  595,   95,  113,  108,  365,  595,
 /*  3890 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  949,
 /*  3900 */   949,   80,  595,  106,   99,   90,  115,  112,   64,   59,
 /*  3910 */    52,   50,   63,   54,   60,   49,  120,   85,  110,  111,
 /*  3920 */   123,  119,  118,  114,  605,  148,  595,  595,  595,  595,
 /*  3930 */   595,  595,  595,  595,  692,  451,  595,  595,  595,  595,
 /*  3940 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  3950 */   595,  584,  595,  595,  595,  595,  595,  595,  595,   95,
 /*  3960 */   113,  108,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  3970 */   595,  595,  595,  595,  595,   80,  595,  106,   99,   90,
 /*  3980 */   115,  112,   64,   59,   52,   50,   63,   54,   60,   49,
 /*  3990 */   120,   85,  110,  111,  123,  119,  118,  114,  595,  148,
 /*  4000 */   909,  595,  595,  595,  595,   42,   91,   86,   51,   61,
 /*  4010 */    65,   57,   66,   62,   56,   48,   53,  595,  595,  595,
 /*  4020 */   595,  595,  595,  595,  595,  196,  595,  595,  595,  686,
 /*  4030 */   595,  595,  644,  643,  642,  541,  595,  254,  639,  595,
 /*  4040 */   595,  365,  595,  949,  949,  595,  654,  318,  595,  595,
 /*  4050 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  427,
 /*  4060 */   595,  595,  595,  649,  646,  648,  595,  909,  394,  595,
 /*  4070 */   595,  595,  430,  595,  595,  656,  595,  595,  595,  339,
 /*  4080 */   513,  595,  573,  595,  595,  632,  595,  595,  451,  595,
 /*  4090 */   595,  595,  512,  450,  332,  182,  702,  693,  699,  595,
 /*  4100 */   667,  595,  595,  595,  595,  595,  451,  595,  571,  545,
 /*  4110 */   595,  450,  332,  182,  702,  693,  699,  595,  667,   95,
 /*  4120 */   113,  108,  595,  595,  595,  595,  595,  627,  340,  595,
 /*  4130 */   595,  559,  595,  595,  595,   80,  595,  106,   99,   90,
 /*  4140 */   115,  112,   64,   59,   52,   50,   63,   54,   60,   49,
 /*  4150 */   120,   85,  110,  111,  123,  119,  118,  114,  595,  148,
 /*  4160 */   543,  524,  574,  507,  525,  510,   68,  595,  145,  595,
 /*  4170 */   595,  624,  512,  595,  595,  595,  595,  595,  595,  595,
 /*  4180 */   595,  595,  595,  595,  595,  595,  592,  595,  571,  545,
 /*  4190 */   595,  686,  595,  595,   95,  113,  108,  595,  595,  595,
 /*  4200 */   688,  595,  595,  365,  595,  595,  595,  595,  340,  595,
 /*  4210 */    80,  559,  106,   99,   90,  115,  112,   64,   59,   52,
 /*  4220 */    50,   63,   54,   60,   49,  120,   85,  110,  111,  123,
 /*  4230 */   119,  118,  114,  595,  148,  595,  595,  595,  595,  595,
 /*  4240 */   543,  524,  574,  507,  525,  510,   68,  595,  145,  595,
 /*  4250 */   451,  595,  615,  595,  686,  450,  332,  182,  702,  693,
 /*  4260 */   699,  603,  667,  623,  595,  595,  365,  595,  595,   95,
 /*  4270 */   113,  108,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  4280 */   595,  595,  595,  595,  595,   80,  595,  106,   99,   90,
 /*  4290 */   115,  112,   64,   59,   52,   50,   63,   54,   60,   49,
 /*  4300 */   120,   85,  110,  111,  123,  119,  118,  114,  595,  148,
 /*  4310 */   595,  595,  595,  451,  595,  595,  595,  595,  450,  332,
 /*  4320 */   182,  702,  693,  699,  595,  667,  595,  686,  595,  595,
 /*  4330 */   595,  595,  595,  595,  595,   21,  532,  595,  595,  365,
 /*  4340 */   595,  595,  595,   95,  113,  108,  595,  595,  595,  595,
 /*  4350 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   80,
 /*  4360 */   595,  106,   99,   90,  115,  112,   64,   59,   52,   50,
 /*  4370 */    63,   54,   60,   49,  120,   85,  110,  111,  123,  119,
 /*  4380 */   118,  114,  595,  148,  595,  595,  451,  595,  595,  595,
 /*  4390 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  4400 */   595,  595,  686,  595,  595,  595,  595,  595,  595,  478,
 /*  4410 */   595,  628,  595,  595,  365,  595,  631,   95,  113,  108,
 /*  4420 */   595,  595,  595,  595,  595,  595,  595,  595,  365,  595,
 /*  4430 */   595,  595,  595,   80,  595,  106,   99,   90,  115,  112,
 /*  4440 */    64,   59,   52,   50,   63,   54,   60,   49,  120,   85,
 /*  4450 */   110,  111,  123,  119,  118,  114,  595,  148,  595,  595,
 /*  4460 */   595,  451,  595,  595,  595,  595,  450,  332,  182,  702,
 /*  4470 */   693,  699,  595,  667,  595,  451,  595,  595,  595,  595,
 /*  4480 */   450,  332,  182,  702,  693,  699,  614,  667,  595,  595,
 /*  4490 */   629,  595,  595,  595,   95,  113,  108,  595,  595,  595,
 /*  4500 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  4510 */    80,  595,  106,   99,   90,  115,  112,   64,   59,   52,
 /*  4520 */    50,   63,   54,   60,   49,  120,   85,  110,  111,  123,
 /*  4530 */   119,  118,  114,  595,  148,  595,  595,  595,  906,  595,
 /*  4540 */   595,  595,  595,   42,   91,   86,   51,   61,   65,   57,
 /*  4550 */    66,   62,   56,   48,   53,  595,  512,  595,  595,  595,
 /*  4560 */   595,  700,  595,  516,  515,  527,  523,  541,  595,  254,
 /*  4570 */   595,  595,  571,  545,  595,  595,  595,  595,  654,  318,
 /*  4580 */   595,  949,  949,  595,  595,  595,  595,  595,  595,  595,
 /*  4590 */   595,  427,  340,  595,  595,  559,  646,  648,  595,  595,
 /*  4600 */   394,  595,  595,  562,  430,  906,  595,  656,  595,  595,
 /*  4610 */   595,  339,  513,  595,  573,  595,  595,  632,  595,  595,
 /*  4620 */   595,  595,  595,  595,  543,  524,  574,  507,  525,  510,
 /*  4630 */    68,  595,  145,  595,  595,  595,  595,  595,  451,  595,
 /*  4640 */   595,  595,  595,  450,  332,  182,  702,  693,  699,  595,
 /*  4650 */   667,   95,  113,  108,  595,  595,  595,  595,  595,  627,
 /*  4660 */   595,  595,  595,  595,  595,  595,  595,   80,  595,  106,
 /*  4670 */    99,   90,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  4680 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  4690 */   595,  148,   95,  113,  108,  595,  595,  595,  595,  595,
 /*  4700 */   595,  595,  595,  595,  595,  595,  595,  595,   80,  595,
 /*  4710 */   106,   99,   90,  115,  112,   64,   59,   52,   50,   63,
 /*  4720 */    54,   60,   49,  120,   85,  110,  111,  123,  119,  118,
 /*  4730 */   114,  595,  148,   95,  113,  108,  595,  595,  595,  595,
 /*  4740 */   595,  595,  595,  595,  595,  595,  595,  595,  595,   80,
 /*  4750 */   595,  106,   99,   90,  115,  112,   64,   59,   52,   50,
 /*  4760 */    63,   54,   60,   49,  120,   85,  110,  111,  123,  119,
 /*  4770 */   118,  114,  414,  148,  595,  595,  595,  595,  595,  595,
 /*  4780 */   512,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  4790 */   595,  595,  595,  595,  595,  595,  571,  545,  595,   22,
 /*  4800 */    47,  595,  595,  595,  595,  595,  595,   95,  113,  108,
 /*  4810 */   595,  595,  595,  595,  595,  595,  340,  595,  595,  559,
 /*  4820 */   595,  595,  595,   80,  595,  106,   99,   90,  115,  112,
 /*  4830 */    64,   59,   52,   50,   63,   54,   60,   49,  120,   85,
 /*  4840 */   110,  111,  123,  119,  118,  114,  595,  148,  543,  524,
 /*  4850 */   574,  507,  525,  510,   68,  595,  145,  595,  595,  595,
 /*  4860 */   595,  595,  616,  595,  595,  595,  595,  595,  595,  595,
 /*  4870 */   595,  595,  595,   25,  595,  686,  595,  595,  595,  595,
 /*  4880 */   595,   95,  113,  108,  213,  595,  595,  365,  595,  595,
 /*  4890 */   595,  595,  595,  595,  595,  595,  595,   80,  595,  106,
 /*  4900 */    99,   90,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  4910 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  4920 */   595,  148,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  4930 */   595,  595,  595,  595,  451,  595,  595,  595,  595,  450,
 /*  4940 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  4950 */   619,  595,  595,  595,  595,  595,  595,  595,   95,  113,
 /*  4960 */   108,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  4970 */   595,  595,  595,  595,   80,  595,  106,   99,   90,  115,
 /*  4980 */   112,   64,   59,   52,   50,   63,   54,   60,   49,  120,
 /*  4990 */    85,  110,  111,  123,  119,  118,  114,  595,  148,  595,
 /*  5000 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5010 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5020 */   595,  595,  595,  595,  595,  595,  595,  521,  595,  595,
 /*  5030 */   595,  595,  595,  595,  595,   95,  113,  108,  595,  595,
 /*  5040 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5050 */   595,   80,  595,  106,   99,   90,  115,  112,   64,   59,
 /*  5060 */    52,   50,   63,   54,   60,   49,  120,   85,  110,  111,
 /*  5070 */   123,  119,  118,  114,  595,  148,   95,  113,  108,  595,
 /*  5080 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5090 */   595,  595,   80,  595,  106,   99,   90,  115,  112,   64,
 /*  5100 */    59,   52,   50,   63,   54,   60,   49,  120,   85,  110,
 /*  5110 */   111,  123,  119,  118,  114,  595,  148,  595,  595,  595,
 /*  5120 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5130 */   595,  595,  595,  595,  595,  595,  641,  595,  595,  595,
 /*  5140 */   595,  595,  501,   44,  595,  595,  595,  595,  365,  595,
 /*  5150 */    95,  113,  108,  595,  595,  595,  595,  595,  595,  595,
 /*  5160 */   595,  595,  595,  595,  596,  595,   80,  595,  106,   99,
 /*  5170 */    90,  115,  112,   64,   59,   52,   50,   63,   54,   60,
 /*  5180 */    49,  120,   85,  110,  111,  123,  119,  118,  114,  595,
 /*  5190 */   148,  595,  595,  595,  595,  451,  595,  595,  595,  595,
 /*  5200 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  5210 */   595,  595,  595,  595,  595,  595,  658,  595,  595,  595,
 /*  5220 */   595,  595,  595,  595,   95,  113,  108,  595,  595,  595,
 /*  5230 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5240 */    80,   84,  106,   99,   90,  115,  112,   64,   59,   52,
 /*  5250 */    50,   63,   54,   60,   49,  120,   85,  110,  111,  123,
 /*  5260 */   119,  118,  114,  595,  148,   95,  113,  108,  595,  595,
 /*  5270 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5280 */   595,   80,  595,  106,   99,   90,  115,  112,   64,   59,
 /*  5290 */    52,   50,   63,   54,   60,   49,  120,   85,  110,  111,
 /*  5300 */   123,  119,  118,  114,  595,  148,  595,  595,  595,  595,
 /*  5310 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5320 */   595,  595,  595,  595,  595,  595,  561,  595,  595,  595,
 /*  5330 */   595,  595,  595,  595,  640,  595,  595,  468,  365,  595,
 /*  5340 */   595,  595,   95,  113,  108,  595,  595,  595,  595,  365,
 /*  5350 */   595,  595,  595,  595,  595,  595,  595,  595,   80,  595,
 /*  5360 */   106,   99,   90,  115,  112,   64,   59,   52,   50,   63,
 /*  5370 */    54,   60,   49,  120,   85,  110,  111,  123,  119,  118,
 /*  5380 */   114,  595,  148,  595,  595,  451,  595,  595,  595,  595,
 /*  5390 */   450,  332,  182,  702,  693,  699,  451,  667,  595,  595,
 /*  5400 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  655,
 /*  5410 */   481,  595,  595,  595,  595,  595,  595,   95,  113,  108,
 /*  5420 */   595,  595,  365,  595,  595,  595,  595,  595,  595,  595,
 /*  5430 */   595,  595,  595,   80,  595,  106,   99,   90,  115,  112,
 /*  5440 */    64,   59,   52,   50,   63,   54,   60,   49,  120,   85,
 /*  5450 */   110,  111,  123,  119,  118,  114,  595,  148,  595,  595,
 /*  5460 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  451,
 /*  5470 */   595,  595,  595,  595,  450,  332,  182,  702,  693,  699,
 /*  5480 */   595,  667,  595,  595,  595,  595,  611,  595,  633,  595,
 /*  5490 */   595,  595,  595,  595,   95,  113,  108,  595,  595,  595,
 /*  5500 */   365,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5510 */    80,  595,  106,   99,   90,  115,  112,   64,   59,   52,
 /*  5520 */    50,   63,   54,   60,   49,  120,   85,  110,  111,  123,
 /*  5530 */   119,  118,  114,  595,  148,  595,  595,  595,  595,  595,
 /*  5540 */   595,  595,  595,  595,  595,  595,  595,  451,  595,  595,
 /*  5550 */   595,  595,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  5560 */   595,  595,  595,  647,  595,  595,  595,  595,  595,  595,
 /*  5570 */   595,   95,  113,  108,  595,  595,  595,  595,  595,  595,
 /*  5580 */   595,  595,  595,  595,  595,  595,  595,   80,  595,  106,
 /*  5590 */    99,   90,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  5600 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  5610 */   595,  148,  113,  108,  595,  595,  595,  595,  595,  595,
 /*  5620 */   595,  595,  595,  595,  595,  595,  595,   80,  595,  106,
 /*  5630 */    99,   90,  115,  112,   64,   59,   52,   50,   63,   54,
 /*  5640 */    60,   49,  120,   85,  110,  111,  123,  119,  118,  114,
 /*  5650 */   108,  148,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5660 */   595,  595,  595,  595,   80,  595,  106,   99,   90,  115,
 /*  5670 */   112,   64,   59,   52,   50,   63,   54,   60,   49,  120,
 /*  5680 */    85,  110,  111,  123,  119,  118,  114,  595,  148,  595,
 /*  5690 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5700 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5710 */   595,  595,  595,  595,  595,  595,  595,  595,  563,  595,
 /*  5720 */   595,  541,  595,  254,  595,  595,  595,  595,  595,  595,
 /*  5730 */   583,  595,  654,  318,  595,  595,  504,  595,  595,  541,
 /*  5740 */   595,  254,  595,  595,  595,  427,  595,  595,  595,  595,
 /*  5750 */   654,  318,  595,  595,  595,  595,  595,  595,  595,  548,
 /*  5760 */   595,  656,  595,  427,  595,  339,  513,  595,  573,  595,
 /*  5770 */   595,  632,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  5780 */   595,  595,  595,  339,  513,  595,  573,  595,  595,  632,
 /*  5790 */   595,  595,  451,  595,  595,  595,  595,  450,  332,  182,
 /*  5800 */   702,  693,  699,  595,  667,  595,  595,  595,  595,  595,
 /*  5810 */   451,  595,  595,  627,  595,  450,  332,  182,  702,  693,
 /*  5820 */   699,  504,  667,  595,  541,  595,  254,  595,  595,  595,
 /*  5830 */   595,  627,  595,  595,  595,  654,  318,  595,  595,  595,
 /*  5840 */   595,  595,  595,  595,  696,  595,  595,  595,  427,  595,
 /*  5850 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  5860 */   595,  595,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  5870 */   506,  573,  595,  541,  632,  254,  595,  595,  595,  595,
 /*  5880 */   587,  595,  595,  595,  654,  318,  595,  595,  595,  595,
 /*  5890 */   595,  595,  595,  595,  595,  451,  595,  427,  595,  595,
 /*  5900 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  5910 */   595,  595,  595,  656,  595,  595,  627,  339,  513,  595,
 /*  5920 */   573,  595,  595,  632,  595,  595,  595,  595,  595,  595,
 /*  5930 */   595,  509,  595,  595,  541,  595,  254,  595,  595,  595,
 /*  5940 */   595,  595,  595,  595,  451,  654,  318,  595,  595,  450,
 /*  5950 */   332,  182,  702,  693,  699,  595,  667,  674,  427,  595,
 /*  5960 */   595,  595,  595,  595,  595,  627,  595,  595,  595,  595,
 /*  5970 */   595,  595,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  5980 */   595,  573,  595,  595,  632,  595,  595,  286,  595,  595,
 /*  5990 */   595,  595,  595,  595,  595,  595,  350,  314,  595,  595,
 /*  6000 */   595,  595,  595,  595,  595,  451,  595,  595,  595,  427,
 /*  6010 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  6020 */   595,  595,  595,  595,  595,  656,  627,  595,  595,  339,
 /*  6030 */   513,  595,  573,  595,  595,  632,  595,  286,  595,  595,
 /*  6040 */   595,  595,  595,  595,  396,  387,  350,  314,  595,  595,
 /*  6050 */   595,  595,  595,  595,  595,  595,  451,  595,  595,  427,
 /*  6060 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  6070 */   595,  595,  595,  595,  595,  656,  595,  627,  595,  339,
 /*  6080 */   513,  595,  573,  286,  595,  632,  595,  595,  595,  595,
 /*  6090 */   595,  595,  350,  314,  476,  387,  595,  595,  595,  595,
 /*  6100 */   595,  595,  595,  595,  595,  427,  451,  595,  595,  595,
 /*  6110 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  6120 */   595,  656,  595,  595,  595,  339,  513,  627,  573,  595,
 /*  6130 */   595,  632,  595,  286,  595,  595,  595,  595,  595,  595,
 /*  6140 */   448,  387,  350,  314,  595,  595,  595,  595,  595,  595,
 /*  6150 */   595,  595,  451,  595,  595,  427,  595,  450,  332,  182,
 /*  6160 */   702,  693,  699,  595,  667,  595,  595,  595,  595,  595,
 /*  6170 */   595,  656,  595,  627,  595,  339,  513,  595,  573,  496,
 /*  6180 */   595,  632,  541,  595,  254,  595,  595,  595,  595,  595,
 /*  6190 */   472,  387,  595,  654,  318,  595,  595,  595,  595,  595,
 /*  6200 */   595,  595,  451,  595,  595,  595,  427,  450,  332,  182,
 /*  6210 */   702,  693,  699,  595,  667,  595,  595,  595,  595,  595,
 /*  6220 */   595,  595,  656,  627,  595,  595,  339,  513,  595,  573,
 /*  6230 */   595,  595,  632,  595,  282,  595,  595,  595,  595,  595,
 /*  6240 */   447,  595,  595,  654,  318,  595,  595,  595,  595,  595,
 /*  6250 */   595,  595,  595,  451,  595,  595,  427,  595,  450,  332,
 /*  6260 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  6270 */   595,  595,  656,  595,  627,  595,  339,  513,  282,  573,
 /*  6280 */   595,  595,  632,  595,  446,  595,  595,  654,  318,  595,
 /*  6290 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  6300 */   427,  595,  595,  451,  595,  595,  595,  595,  450,  332,
 /*  6310 */   182,  702,  693,  699,  595,  667,  656,  595,  595,  595,
 /*  6320 */   339,  513,  595,  573,  627,  595,  632,  595,  471,  595,
 /*  6330 */   595,  595,  595,  595,  595,  595,  282,  595,  595,  595,
 /*  6340 */   595,  595,  454,  595,  595,  654,  318,  451,  595,  595,
 /*  6350 */   595,  595,  450,  332,  182,  702,  693,  699,  427,  667,
 /*  6360 */   595,  595,  595,  595,  595,  595,  595,  595,  627,  595,
 /*  6370 */   595,  595,  471,  595,  656,  595,  595,  595,  339,  513,
 /*  6380 */   595,  573,  595,  595,  632,  595,  286,  595,  595,  595,
 /*  6390 */   595,  595,  595,  595,  595,  350,  314,  595,  595,  595,
 /*  6400 */   595,  595,  595,  595,  595,  451,  595,  595,  427,  595,
 /*  6410 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  6420 */   595,  595,  595,  595,  656,  595,  627,  595,  339,  513,
 /*  6430 */   471,  573,  595,  595,  632,  595,  286,  595,  595,  595,
 /*  6440 */   595,  595,  595,  469,  387,  350,  314,  595,  595,  595,
 /*  6450 */   595,  595,  595,  595,  595,  451,  595,  595,  427,  595,
 /*  6460 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  6470 */   595,  595,  595,  595,  656,  595,  627,  595,  339,  513,
 /*  6480 */   275,  573,  595,  595,  632,  595,  595,  595,  595,  654,
 /*  6490 */   318,  595,  595,  463,  387,  595,  595,  273,  595,  595,
 /*  6500 */   595,  595,  427,  595,  595,  451,  654,  318,  595,  595,
 /*  6510 */   450,  332,  182,  702,  693,  699,  595,  667,  656,  427,
 /*  6520 */   595,  595,  339,  513,  595,  573,  627,  595,  632,  595,
 /*  6530 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  6540 */   513,  595,  573,  372,  595,  632,  595,  595,  595,  451,
 /*  6550 */   595,  595,  595,  595,  450,  332,  182,  702,  693,  699,
 /*  6560 */   474,  667,  595,  595,  595,  595,  451,  595,  595,  595,
 /*  6570 */   627,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  6580 */   595,  498,  203,  595,  541,  595,  254,  627,  595,  595,
 /*  6590 */   595,  595,  595,  595,  595,  654,  318,  595,  595,  595,
 /*  6600 */   595,  595,  595,  595,  595,  595,  595,  595,  427,  595,
 /*  6610 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  6620 */   595,  595,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  6630 */   595,  573,  275,  595,  632,  595,  595,  595,  595,  595,
 /*  6640 */   595,  654,  318,  595,  240,  595,  595,  541,  595,  254,
 /*  6650 */   595,  595,  595,  595,  427,  451,  595,  595,  654,  318,
 /*  6660 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  6670 */   656,  427,  595,  595,  339,  513,  627,  573,  595,  595,
 /*  6680 */   632,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  6690 */   442,  339,  513,  541,  573,  254,  595,  632,  595,  595,
 /*  6700 */   595,  451,  595,  595,  654,  318,  450,  332,  182,  702,
 /*  6710 */   693,  699,  462,  667,  595,  595,  595,  427,  451,  595,
 /*  6720 */   595,  595,  627,  450,  332,  182,  702,  693,  699,  595,
 /*  6730 */   667,  595,  595,  656,  595,  595,  595,  339,  513,  627,
 /*  6740 */   573,  595,  595,  632,  595,  595,  595,  595,  595,  595,
 /*  6750 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  6760 */   595,  595,  595,  595,  451,  595,  595,  595,  595,  450,
 /*  6770 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  6780 */   281,  595,  595,  595,  595,  627,  595,  595,  595,  654,
 /*  6790 */   318,  595,  595,  349,  595,  595,  595,  595,  595,  388,
 /*  6800 */   595,  595,  427,  595,  595,  595,  595,  595,  654,  318,
 /*  6810 */   595,  595,  595,  595,  595,  595,  595,  595,  656,  595,
 /*  6820 */   595,  427,  339,  513,  595,  573,  595,  595,  632,  595,
 /*  6830 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  6840 */   595,  339,  513,  308,  573,  595,  595,  632,  595,  451,
 /*  6850 */   595,  595,  654,  318,  450,  332,  182,  702,  693,  699,
 /*  6860 */   595,  667,  258,  595,  595,  427,  595,  595,  451,  595,
 /*  6870 */   627,  654,  318,  450,  332,  182,  702,  693,  699,  595,
 /*  6880 */   667,  656,  595,  595,  427,  339,  513,  595,  573,  627,
 /*  6890 */   595,  632,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  6900 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  595,
 /*  6910 */   632,  595,  451,  595,  595,  595,  595,  450,  332,  182,
 /*  6920 */   702,  693,  699,  595,  667,  326,  595,  595,  595,  595,
 /*  6930 */   595,  451,  595,  627,  654,  318,  450,  332,  182,  702,
 /*  6940 */   693,  699,  595,  667,  595,  595,  595,  427,  595,  595,
 /*  6950 */   595,  595,  627,  595,  595,  595,  595,  595,  595,  595,
 /*  6960 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  595,
 /*  6970 */   573,  595,  595,  632,  376,  595,  595,  595,  595,  595,
 /*  6980 */   595,  595,  595,  654,  318,  595,  595,  595,  595,  595,
 /*  6990 */   595,  595,  595,  595,  451,  595,  427,  595,  595,  450,
 /*  7000 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  7010 */   595,  595,  656,  595,  595,  627,  339,  513,  595,  573,
 /*  7020 */   449,  595,  632,  595,  595,  595,  595,  595,  595,  654,
 /*  7030 */   318,  595,  595,  595,  595,  595,  595,  255,  595,  595,
 /*  7040 */   595,  595,  427,  451,  595,  595,  654,  318,  450,  332,
 /*  7050 */   182,  702,  693,  699,  595,  667,  595,  595,  656,  427,
 /*  7060 */   595,  595,  339,  513,  627,  573,  595,  595,  632,  595,
 /*  7070 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  7080 */   513,  595,  573,  517,  595,  632,  595,  595,  595,  451,
 /*  7090 */   595,  595,  654,  318,  450,  332,  182,  702,  693,  699,
 /*  7100 */   595,  667,  595,  595,  595,  427,  451,  595,  595,  595,
 /*  7110 */   627,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  7120 */   595,  656,  595,  595,  595,  339,  513,  627,  573,  595,
 /*  7130 */   595,  632,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7140 */   595,  595,  595,  595,  595,  595,  323,  595,  595,  595,
 /*  7150 */   595,  595,  451,  595,  595,  654,  318,  450,  332,  182,
 /*  7160 */   702,  693,  699,  595,  667,  595,  595,  595,  427,  595,
 /*  7170 */   595,  253,  595,  627,  595,  595,  595,  595,  595,  595,
 /*  7180 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  7190 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  7200 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  7210 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  7220 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  7230 */   595,  595,  292,  595,  595,  595,  627,  595,  595,  595,
 /*  7240 */   451,  654,  318,  595,  595,  450,  332,  182,  702,  693,
 /*  7250 */   699,  595,  667,  595,  427,  595,  595,  508,  595,  595,
 /*  7260 */   595,  627,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  7270 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  7280 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7290 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  7300 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  7310 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /*  7320 */   272,  595,  627,  595,  595,  595,  451,  595,  595,  654,
 /*  7330 */   318,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  7340 */   595,  595,  427,  595,  595,  550,  595,  627,  595,  595,
 /*  7350 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  7360 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  7370 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7380 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  7390 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  7400 */   595,  667,  595,  595,  595,  595,  534,  595,  595,  595,
 /*  7410 */   627,  595,  595,  595,  451,  654,  318,  595,  595,  450,
 /*  7420 */   332,  182,  702,  693,  699,  595,  667,  595,  427,  595,
 /*  7430 */   595,  557,  595,  595,  595,  627,  595,  595,  595,  595,
 /*  7440 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  7450 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  7460 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  7470 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  7480 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  7490 */   595,  595,  595,  595,  519,  595,  627,  595,  595,  595,
 /*  7500 */   451,  595,  595,  654,  318,  450,  332,  182,  702,  693,
 /*  7510 */   699,  595,  667,  595,  595,  595,  427,  595,  595,  597,
 /*  7520 */   595,  627,  595,  595,  595,  595,  595,  595,  654,  318,
 /*  7530 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  7540 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  7550 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  7560 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  7570 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  7580 */   329,  595,  595,  595,  627,  595,  595,  595,  451,  654,
 /*  7590 */   318,  595,  595,  450,  332,  182,  702,  693,  699,  595,
 /*  7600 */   667,  595,  427,  595,  595,  299,  595,  595,  595,  627,
 /*  7610 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  7620 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  7630 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7640 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  7650 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  7660 */   595,  667,  595,  595,  595,  595,  595,  595,  303,  595,
 /*  7670 */   627,  595,  595,  595,  451,  595,  595,  654,  318,  450,
 /*  7680 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  7690 */   427,  595,  595,  322,  595,  627,  595,  595,  595,  595,
 /*  7700 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  7710 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  7720 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7730 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  7740 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  7750 */   595,  595,  595,  595,  310,  595,  595,  595,  627,  595,
 /*  7760 */   595,  595,  451,  654,  318,  595,  595,  450,  332,  182,
 /*  7770 */   702,  693,  699,  595,  667,  595,  427,  595,  595,  295,
 /*  7780 */   595,  595,  595,  627,  595,  595,  595,  595,  654,  318,
 /*  7790 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  7800 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  7810 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  7820 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  7830 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  7840 */   595,  595,  321,  595,  627,  595,  595,  595,  451,  595,
 /*  7850 */   595,  654,  318,  450,  332,  182,  702,  693,  699,  595,
 /*  7860 */   667,  595,  595,  595,  427,  595,  595,  301,  595,  627,
 /*  7870 */   595,  595,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  7880 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  7890 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7900 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  7910 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  7920 */   693,  699,  595,  667,  595,  595,  595,  595,  309,  595,
 /*  7930 */   595,  595,  627,  595,  595,  595,  451,  654,  318,  595,
 /*  7940 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  7950 */   427,  595,  595,  503,  595,  595,  595,  627,  595,  595,
 /*  7960 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  7970 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  7980 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  7990 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  8000 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  8010 */   595,  595,  595,  595,  595,  595,  268,  595,  627,  595,
 /*  8020 */   595,  595,  451,  595,  595,  654,  318,  450,  332,  182,
 /*  8030 */   702,  693,  699,  595,  667,  595,  595,  595,  427,  595,
 /*  8040 */   595,  307,  595,  627,  595,  595,  595,  595,  595,  595,
 /*  8050 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  8060 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  8070 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  8080 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  8090 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  8100 */   595,  595,  271,  595,  595,  595,  627,  595,  595,  595,
 /*  8110 */   451,  654,  318,  595,  595,  450,  332,  182,  702,  693,
 /*  8120 */   699,  595,  667,  595,  427,  595,  595,  328,  595,  595,
 /*  8130 */   595,  627,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  8140 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  8150 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8160 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  8170 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  8180 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /*  8190 */   289,  595,  627,  595,  595,  595,  451,  595,  595,  654,
 /*  8200 */   318,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  8210 */   595,  595,  427,  595,  595,  266,  595,  627,  595,  595,
 /*  8220 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  8230 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  8240 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8250 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  8260 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  8270 */   595,  667,  595,  595,  595,  595,  288,  595,  595,  595,
 /*  8280 */   627,  595,  595,  595,  451,  654,  318,  595,  595,  450,
 /*  8290 */   332,  182,  702,  693,  699,  595,  667,  595,  427,  595,
 /*  8300 */   595,  595,  595,  595,  595,  627,  595,  595,  595,  595,
 /*  8310 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  8320 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  8330 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  8340 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  8350 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  8360 */   595,  595,  595,  595,  279,  595,  627,  595,  595,  595,
 /*  8370 */   451,  595,  595,  654,  318,  450,  332,  182,  702,  693,
 /*  8380 */   699,  595,  667,  595,  595,  595,  427,  595,  595,  359,
 /*  8390 */   595,  627,  595,  595,  595,  595,  595,  595,  654,  318,
 /*  8400 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  8410 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  8420 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  8430 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  8440 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  8450 */   290,  595,  595,  595,  627,  595,  595,  595,  451,  654,
 /*  8460 */   318,  595,  595,  450,  332,  182,  702,  693,  699,  595,
 /*  8470 */   667,  595,  427,  595,  595,  269,  595,  595,  595,  627,
 /*  8480 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  8490 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  8500 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8510 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  8520 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  8530 */   595,  667,  595,  595,  595,  595,  595,  595,  270,  595,
 /*  8540 */   627,  595,  595,  595,  451,  595,  595,  654,  318,  450,
 /*  8550 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  8560 */   427,  595,  595,  652,  595,  627,  595,  595,  595,  595,
 /*  8570 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  8580 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  8590 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8600 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  8610 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  8620 */   595,  595,  595,  595,  276,  595,  595,  595,  627,  595,
 /*  8630 */   595,  595,  451,  654,  318,  595,  595,  450,  332,  182,
 /*  8640 */   702,  693,  699,  595,  667,  595,  427,  595,  595,  280,
 /*  8650 */   595,  595,  595,  627,  595,  595,  595,  595,  654,  318,
 /*  8660 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  8670 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  8680 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  8690 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  8700 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  8710 */   595,  595,  324,  595,  627,  595,  595,  595,  451,  595,
 /*  8720 */   595,  654,  318,  450,  332,  182,  702,  693,  699,  595,
 /*  8730 */   667,  595,  595,  595,  427,  595,  595,  304,  595,  627,
 /*  8740 */   595,  595,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  8750 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  8760 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8770 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  8780 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  8790 */   693,  699,  595,  667,  595,  595,  595,  595,  278,  595,
 /*  8800 */   595,  595,  627,  595,  595,  595,  451,  654,  318,  595,
 /*  8810 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  8820 */   427,  595,  595,  267,  595,  595,  595,  627,  595,  595,
 /*  8830 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  8840 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  8850 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  8860 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  8870 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  8880 */   595,  595,  595,  595,  595,  595,  286,  595,  627,  595,
 /*  8890 */   595,  595,  451,  595,  595,  480,  317,  450,  332,  182,
 /*  8900 */   702,  693,  699,  595,  667,  595,  595,  595,  427,  595,
 /*  8910 */   595,  256,  595,  627,  595,  595,  595,  595,  595,  595,
 /*  8920 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  8930 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  8940 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  8950 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  8960 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  8970 */   595,  595,  283,  595,  595,  595,  627,  595,  595,  595,
 /*  8980 */   451,  654,  318,  595,  595,  450,  332,  182,  702,  693,
 /*  8990 */   699,  595,  667,  595,  427,  595,  595,  306,  595,  595,
 /*  9000 */   595,  627,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  9010 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  9020 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9030 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  9040 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  9050 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /*  9060 */   186,  595,  627,  595,  595,  595,  451,  595,  595,  654,
 /*  9070 */   318,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  9080 */   595,  595,  427,  595,  595,  287,  595,  627,  595,  595,
 /*  9090 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  9100 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  9110 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9120 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  9130 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  9140 */   595,  667,  595,  595,  595,  595,  263,  595,  595,  595,
 /*  9150 */   627,  595,  595,  595,  451,  654,  318,  595,  595,  450,
 /*  9160 */   332,  182,  702,  693,  699,  595,  667,  595,  427,  595,
 /*  9170 */   595,  262,  595,  595,  595,  627,  595,  595,  595,  595,
 /*  9180 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  9190 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  9200 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  9210 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  9220 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  9230 */   595,  595,  595,  595,  252,  595,  627,  595,  595,  595,
 /*  9240 */   451,  595,  595,  654,  318,  450,  332,  182,  702,  693,
 /*  9250 */   699,  595,  667,  595,  595,  595,  427,  595,  595,  264,
 /*  9260 */   595,  627,  595,  595,  595,  595,  595,  595,  654,  318,
 /*  9270 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  9280 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  9290 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  9300 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  9310 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  9320 */   325,  595,  595,  595,  627,  595,  595,  595,  451,  654,
 /*  9330 */   318,  595,  595,  450,  332,  182,  702,  693,  699,  595,
 /*  9340 */   667,  595,  427,  595,  595,  327,  595,  595,  595,  627,
 /*  9350 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  9360 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  9370 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9380 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /*  9390 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /*  9400 */   595,  667,  595,  595,  595,  595,  595,  595,  312,  595,
 /*  9410 */   627,  595,  595,  595,  451,  595,  595,  654,  318,  450,
 /*  9420 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /*  9430 */   427,  595,  595,  260,  595,  627,  595,  595,  595,  595,
 /*  9440 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  9450 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  9460 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9470 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  9480 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  9490 */   595,  595,  595,  595,  293,  595,  595,  595,  627,  595,
 /*  9500 */   595,  595,  451,  654,  318,  595,  595,  450,  332,  182,
 /*  9510 */   702,  693,  699,  595,  667,  595,  427,  595,  595,  265,
 /*  9520 */   595,  595,  595,  627,  595,  595,  595,  595,  654,  318,
 /*  9530 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /*  9540 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /*  9550 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /*  9560 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /*  9570 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /*  9580 */   595,  595,  305,  595,  627,  595,  595,  595,  451,  595,
 /*  9590 */   595,  654,  318,  450,  332,  182,  702,  693,  699,  595,
 /*  9600 */   667,  595,  595,  595,  427,  595,  595,  302,  595,  627,
 /*  9610 */   595,  595,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  9620 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  9630 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9640 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  9650 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  9660 */   693,  699,  595,  667,  595,  595,  595,  595,  261,  595,
 /*  9670 */   595,  595,  627,  595,  595,  595,  451,  654,  318,  595,
 /*  9680 */   595,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  9690 */   427,  595,  595,  291,  595,  595,  595,  627,  595,  595,
 /*  9700 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /*  9710 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /*  9720 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9730 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /*  9740 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /*  9750 */   595,  595,  595,  595,  595,  595,  300,  595,  627,  595,
 /*  9760 */   595,  595,  451,  595,  595,  654,  318,  450,  332,  182,
 /*  9770 */   702,  693,  699,  595,  667,  595,  595,  595,  427,  595,
 /*  9780 */   595,  313,  595,  627,  595,  595,  595,  595,  595,  595,
 /*  9790 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /*  9800 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /*  9810 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /*  9820 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /*  9830 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /*  9840 */   595,  595,  259,  595,  595,  595,  627,  595,  595,  595,
 /*  9850 */   451,  654,  318,  595,  595,  450,  332,  182,  702,  693,
 /*  9860 */   699,  595,  667,  595,  427,  595,  595,  311,  595,  595,
 /*  9870 */   595,  627,  595,  595,  595,  595,  654,  318,  595,  595,
 /*  9880 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  427,
 /*  9890 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9900 */   595,  595,  595,  595,  595,  656,  595,  595,  595,  339,
 /*  9910 */   513,  451,  573,  595,  595,  632,  450,  332,  182,  702,
 /*  9920 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /*  9930 */   297,  595,  627,  595,  595,  595,  451,  595,  595,  654,
 /*  9940 */   318,  450,  332,  182,  702,  693,  699,  595,  667,  595,
 /*  9950 */   595,  595,  427,  595,  595,  277,  595,  627,  595,  595,
 /*  9960 */   595,  595,  595,  595,  654,  318,  595,  595,  656,  595,
 /*  9970 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /*  9980 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*  9990 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /* 10000 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /* 10010 */   595,  667,  595,  595,  595,  595,  319,  595,  595,  595,
 /* 10020 */   627,  595,  595,  595,  451,  654,  318,  595,  595,  450,
 /* 10030 */   332,  182,  702,  693,  699,  595,  667,  595,  427,  595,
 /* 10040 */   595,  298,  595,  595,  595,  627,  595,  595,  595,  595,
 /* 10050 */   654,  318,  595,  595,  656,  595,  595,  595,  339,  513,
 /* 10060 */   595,  573,  595,  427,  632,  595,  595,  595,  595,  595,
 /* 10070 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  656,
 /* 10080 */   595,  595,  595,  339,  513,  451,  573,  595,  595,  632,
 /* 10090 */   450,  332,  182,  702,  693,  699,  595,  667,  595,  595,
 /* 10100 */   595,  595,  595,  595,  320,  595,  627,  595,  595,  595,
 /* 10110 */   451,  595,  595,  654,  318,  450,  332,  182,  702,  693,
 /* 10120 */   699,  595,  667,  595,  595,  595,  427,  595,  595,  257,
 /* 10130 */   595,  627,  595,  595,  595,  595,  595,  595,  654,  318,
 /* 10140 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /* 10150 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /* 10160 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /* 10170 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /* 10180 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /* 10190 */   284,  595,  595,  595,  627,  595,  595,  595,  451,  654,
 /* 10200 */   318,  595,  595,  450,  332,  182,  702,  693,  699,  595,
 /* 10210 */   667,  595,  427,  595,  595,  286,  595,  595,  595,  627,
 /* 10220 */   595,  595,  595,  595,  483,  316,  595,  595,  656,  595,
 /* 10230 */   595,  595,  339,  513,  595,  573,  595,  427,  632,  595,
 /* 10240 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /* 10250 */   595,  595,  595,  656,  595,  595,  595,  339,  513,  451,
 /* 10260 */   573,  595,  595,  632,  450,  332,  182,  702,  693,  699,
 /* 10270 */   595,  667,  595,  595,  595,  595,  595,  595,  285,  595,
 /* 10280 */   627,  595,  595,  595,  451,  595,  595,  654,  318,  450,
 /* 10290 */   332,  182,  702,  693,  699,  595,  667,  595,  595,  595,
 /* 10300 */   427,  595,  595,  294,  595,  627,  595,  595,  595,  595,
 /* 10310 */   595,  595,  654,  318,  595,  595,  656,  595,  595,  595,
 /* 10320 */   339,  513,  595,  573,  595,  427,  632,  595,  595,  595,
 /* 10330 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /* 10340 */   595,  656,  595,  595,  595,  339,  513,  451,  573,  595,
 /* 10350 */   595,  632,  450,  332,  182,  702,  693,  699,  595,  667,
 /* 10360 */   595,  595,  595,  595,  296,  595,  595,  595,  627,  595,
 /* 10370 */   595,  595,  451,  654,  318,  595,  595,  450,  332,  182,
 /* 10380 */   702,  693,  699,  595,  667,  595,  427,  595,  595,  286,
 /* 10390 */   595,  595,  595,  627,  595,  595,  595,  595,  355,  315,
 /* 10400 */   595,  595,  656,  595,  595,  595,  339,  513,  595,  573,
 /* 10410 */   595,  427,  632,  595,  595,  595,  595,  595,  595,  595,
 /* 10420 */   595,  595,  595,  595,  595,  595,  595,  656,  595,  595,
 /* 10430 */   595,  339,  513,  451,  573,  595,  595,  632,  450,  332,
 /* 10440 */   182,  702,  693,  699,  595,  667,  595,  595,  595,  595,
 /* 10450 */   595,  595,  274,  595,  627,  595,  595,  595,  451,  595,
 /* 10460 */   595,  654,  318,  450,  332,  182,  702,  693,  699,  595,
 /* 10470 */   667,  595,  595,  595,  427,  595,  595,  595,  595,  627,
 /* 10480 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /* 10490 */   656,  595,  595,  595,  339,  513,  595,  573,  595,  595,
 /* 10500 */   632,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /* 10510 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /* 10520 */   595,  451,  595,  595,  595,  595,  450,  332,  182,  702,
 /* 10530 */   693,  699,  595,  667,  595,  595,  595,  595,  595,  595,
 /* 10540 */   595,  595,  627,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    2,    3,    4,    5,  174,  175,  176,   23,   10,
 /*    10 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*    20 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*    30 */    45,  221,   47,   29,    6,  225,  226,  227,   95,   40,
 /*    40 */    41,   98,  232,  233,  234,   46,  103,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   47,   60,
 /*    60 */    61,  225,  226,  227,   65,   66,   67,  124,  232,   75,
 /*    70 */    71,   72,   99,   74,   75,   76,   77,   78,   79,   80,
 /*    80 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*    90 */    29,   92,   93,   75,   95,   96,   97,   98,   99,   95,
 /*   100 */   101,   73,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   110 */   111,  112,  113,  114,   59,    1,    2,    3,    4,    5,
 /*   120 */   120,  121,  122,  124,   10,   65,   66,   67,   68,   69,
 /*   130 */    70,  199,  200,  134,  202,  136,  137,  138,  139,  140,
 /*   140 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   150 */    44,   45,   98,   47,   40,   41,   95,   97,   95,  105,
 /*   160 */    46,   98,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   170 */    56,   57,   58,    6,   60,   61,  225,  226,  227,   65,
 /*   180 */    66,   67,  127,  232,   72,   71,   72,  124,   74,   75,
 /*   190 */   173,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   200 */    86,   87,   88,   89,   90,   29,   92,   93,  191,   95,
 /*   210 */    96,   97,   98,   99,  181,  101,   72,  103,  104,  105,
 /*   220 */   106,  107,  108,  109,  110,  111,  112,  113,  114,   95,
 /*   230 */    72,  117,   98,    1,    2,    3,    4,    5,  124,  206,
 /*   240 */   207,   74,   10,  226,  227,  228,  229,    6,  134,  232,
 /*   250 */   136,  137,  138,  139,  140,    6,   75,  221,  124,  242,
 /*   260 */   116,  225,  226,  227,  199,  200,    6,  202,  232,  233,
 /*   270 */   234,   95,   40,   41,   98,   59,   95,   74,   46,   98,
 /*   280 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   290 */    58,   75,   60,   61,   49,   50,    6,   65,   66,   67,
 /*   300 */   124,   62,   63,   71,   72,  124,   74,   75,   76,   77,
 /*   310 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   320 */    88,   89,   90,   74,   92,   93,    6,   95,   96,   97,
 /*   330 */    98,   99,   24,  101,   74,  103,  104,  105,  106,  107,
 /*   340 */   108,  109,  110,  111,  112,  113,  114,   95,    1,    2,
 /*   350 */     3,    4,    5,  120,  121,  122,  124,   10,   40,   41,
 /*   360 */    42,   43,   44,   45,   74,   47,  134,    6,  136,  137,
 /*   370 */   138,  139,  140,  221,   74,   75,  124,  225,  226,  227,
 /*   380 */    95,   95,   74,   98,  232,  233,  234,   40,   41,  199,
 /*   390 */   200,  181,  202,   46,   74,   48,   49,   50,   51,   52,
 /*   400 */    53,   54,   55,   56,   57,   58,   72,   60,   61,  124,
 /*   410 */   124,    6,   65,   66,   67,    6,  206,  207,   71,   72,
 /*   420 */   173,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   430 */    83,   84,   85,   86,   87,   88,   89,   90,  191,   92,
 /*   440 */    93,  226,   95,   96,   97,   98,   99,  232,  101,   74,
 /*   450 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   460 */   113,  114,  173,    1,    2,    3,    4,    5,  143,  144,
 /*   470 */    99,  124,   10,  226,  227,  228,  229,  188,   73,  232,
 /*   480 */    76,  134,   73,  136,  137,  138,  139,  140,   59,  242,
 /*   490 */   199,  200,   95,  202,  221,   98,  109,    6,  225,  226,
 /*   500 */   227,   72,   40,   41,   75,  232,  233,  234,   46,    6,
 /*   510 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   520 */    58,  124,   60,   61,  226,  121,  122,   65,   66,   67,
 /*   530 */   232,   62,   63,   71,   72,  162,   74,   75,  173,   77,
 /*   540 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   550 */    88,   89,   90,  188,   92,   93,  226,   95,   96,   97,
 /*   560 */    98,   99,  232,  101,   73,  103,  104,  105,  106,  107,
 /*   570 */   108,  109,  110,  111,  112,  113,  114,   95,    1,    2,
 /*   580 */     3,    4,    5,  210,   98,  123,  124,   10,  199,  200,
 /*   590 */   201,  202,  203,   43,   44,   45,  134,   47,  136,  137,
 /*   600 */   138,  139,  140,   11,    6,  211,  212,   95,  214,  215,
 /*   610 */    98,  217,  218,  199,  200,   73,  202,   40,   41,  199,
 /*   620 */   200,   72,  202,   46,   11,   48,   49,   50,   51,   52,
 /*   630 */    53,   54,   55,   56,   57,   58,    6,   60,   61,   11,
 /*   640 */    98,  129,   65,   66,   67,    6,   73,  105,   71,   72,
 /*   650 */   173,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   660 */    83,   84,   85,   86,   87,   88,   89,   90,  191,   92,
 /*   670 */    93,   73,   95,   96,   97,   98,   99,   97,  101,   76,
 /*   680 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   690 */   113,  114,   59,    1,    2,    3,    4,    5,   72,   95,
 /*   700 */    75,  124,   10,  226,  227,  228,  229,   75,   75,  232,
 /*   710 */    24,  134,   73,  136,  137,  138,  139,  140,   72,  242,
 /*   720 */   199,  200,   95,  202,  121,  122,   75,   95,  199,  200,
 /*   730 */    98,  202,   40,   41,  199,  200,   98,  202,   46,   73,
 /*   740 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   750 */    58,  124,   60,   61,   75,   11,  124,   65,   66,   67,
 /*   760 */   109,   75,   11,   71,   72,  238,   74,   75,   98,   77,
 /*   770 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   780 */    88,   89,   90,  218,   92,   93,    6,   95,   96,   97,
 /*   790 */    98,   99,  205,  101,  239,  103,  104,  105,  106,  107,
 /*   800 */   108,  109,  110,  111,  112,  113,  114,  210,  165,  199,
 /*   810 */   200,  119,  202,  207,  199,  200,  124,  202,    1,    2,
 /*   820 */     3,    4,    5,  159,  153,  205,  134,   10,  136,  137,
 /*   830 */   138,  139,  140,   26,   27,   28,   29,   30,   31,   32,
 /*   840 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*   850 */    43,   44,   45,   73,   47,  155,   94,   40,   41,  199,
 /*   860 */   200,  115,  202,   46,   11,   48,   49,   50,   51,   52,
 /*   870 */    53,   54,   55,   56,   57,   58,  115,   60,   61,   74,
 /*   880 */    72,  116,   65,   66,   67,   76,   98,   11,   71,   72,
 /*   890 */    72,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   900 */    83,   84,   85,   86,   87,   88,   89,   90,   95,   92,
 /*   910 */    93,   60,   95,   96,   97,   98,   99,   73,  101,   73,
 /*   920 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   930 */   113,  114,   59,    1,    2,    3,    4,    5,   98,  116,
 /*   940 */    24,  124,   10,   73,  128,   72,   95,  127,   75,   98,
 /*   950 */    72,  134,   73,  136,  137,  138,  139,  140,  199,  200,
 /*   960 */    74,  202,   64,  199,  200,   76,  202,  199,  200,   24,
 /*   970 */   202,  116,   40,   41,   73,  124,  199,  200,   46,  202,
 /*   980 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   990 */    58,   72,   60,   61,  127,   72,   72,   65,   66,   67,
 /*  1000 */    72,   24,    6,   71,   72,   74,   74,   75,   72,   77,
 /*  1010 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1020 */    88,   89,   90,   72,   92,   93,  243,   95,   96,   97,
 /*  1030 */    98,   99,   74,  101,   95,  103,  104,  105,  106,  107,
 /*  1040 */   108,  109,  110,  111,  112,  113,  114,   72,  199,  200,
 /*  1050 */   118,  202,   11,   98,   11,   74,  124,   73,    1,    2,
 /*  1060 */     3,    4,    5,   91,   73,  128,  134,   10,  136,  137,
 /*  1070 */   138,  139,  140,   27,   28,   29,   30,   31,   32,   33,
 /*  1080 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  1090 */    44,   45,   73,   47,   74,   73,   11,   40,   41,   74,
 /*  1100 */    73,   72,   95,   46,   73,   48,   49,   50,   51,   52,
 /*  1110 */    53,   54,   55,   56,   57,   58,   72,   60,   61,  116,
 /*  1120 */    94,   73,   65,   66,   67,   75,   74,   73,   71,   72,
 /*  1130 */    75,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*  1140 */    83,   84,   85,   86,   87,   88,   89,   90,   72,   92,
 /*  1150 */    93,   73,   95,   96,   97,   98,   99,   11,  101,   11,
 /*  1160 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1170 */   113,  114,   72,    1,    2,    3,    4,    5,   98,   95,
 /*  1180 */    72,  124,   10,   76,   98,   72,   74,   78,   72,   72,
 /*  1190 */    72,  134,   73,  136,  137,  138,  139,  140,   74,   74,
 /*  1200 */    72,  128,   72,  116,   98,   73,   75,   74,   98,   59,
 /*  1210 */    11,  150,   40,   41,  204,  168,  195,   72,   46,   72,
 /*  1220 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1230 */    58,  150,   60,   61,  176,  115,  161,   65,   66,   67,
 /*  1240 */    74,  173,  167,   71,   72,  170,   74,   75,  173,   77,
 /*  1250 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1260 */    88,   89,   90,  173,   92,   93,  102,   95,   96,   97,
 /*  1270 */    98,   99,  150,  101,   29,  103,  104,  105,  106,  107,
 /*  1280 */   108,  109,  110,  111,  112,  113,  114,  150,    1,    2,
 /*  1290 */     3,    4,    5,  100,  168,  220,  124,   10,   72,  222,
 /*  1300 */   225,  226,  227,  228,  229,  230,  134,  232,  136,  137,
 /*  1310 */   138,  139,  140,  192,  185,  213,   95,  150,  183,  150,
 /*  1320 */   223,  150,  180,  222,  173,  150,  163,   40,   41,  180,
 /*  1330 */    74,  150,  244,   46,  127,   48,   49,   50,   51,   52,
 /*  1340 */    53,   54,   55,   56,   57,   58,  185,   60,   61,  192,
 /*  1350 */   198,  198,   65,   66,   67,  150,  198,  216,   71,   72,
 /*  1360 */   152,   74,   75,  150,   77,   78,   79,   80,   81,   82,
 /*  1370 */    83,   84,   85,   86,   87,   88,   89,   90,   98,   92,
 /*  1380 */    93,  150,   95,   96,   97,   98,   99,  198,  101,  204,
 /*  1390 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1400 */   113,  114,  150,  171,    6,  150,  127,  100,  150,  173,
 /*  1410 */   224,  124,   95,    1,    2,    3,    4,    5,  204,  204,
 /*  1420 */   237,  134,   10,  136,  137,  138,  139,  140,  187,  246,
 /*  1430 */   184,  246,  246,  246,  246,  246,   24,   11,   12,   13,
 /*  1440 */    14,   15,   16,   17,   18,   19,   20,   21,   22,  246,
 /*  1450 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1460 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1470 */    58,  246,   60,   61,  246,   49,   50,   65,  246,  246,
 /*  1480 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1490 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1500 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  1510 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  1520 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  1530 */   246,  246,  246,  246,  246,  246,  124,  246,    1,    2,
 /*  1540 */     3,    4,    5,  246,  246,  246,  134,   10,  136,  137,
 /*  1550 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  1560 */   246,   24,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1570 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  1580 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  1590 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  1600 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  1610 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  1620 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  1630 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  1640 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1650 */   113,  114,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1660 */   246,  124,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  1670 */   246,  134,   10,  136,  137,  138,  139,  140,  246,  246,
 /*  1680 */   246,  246,  246,  246,  246,  246,   24,  246,  246,  246,
 /*  1690 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1700 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1710 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1720 */    58,  246,   60,   61,  246,  246,  246,   65,  246,  246,
 /*  1730 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1740 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1750 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  1760 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  1770 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  1780 */   246,  246,  246,  246,  246,  246,  124,  246,    1,    2,
 /*  1790 */     3,    4,    5,  246,  246,  246,  134,   10,  136,  137,
 /*  1800 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  1810 */   246,   24,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1820 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  1830 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  1840 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  1850 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  1860 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  1870 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  1880 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  1890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1900 */   113,  114,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1910 */   246,  124,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  1920 */   246,  134,   10,  136,  137,  138,  139,  140,  246,  246,
 /*  1930 */   246,  246,  246,  246,  246,  246,   24,  246,  246,  246,
 /*  1940 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  1950 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  1960 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1970 */    58,  246,   60,   61,  246,  246,  246,   65,  246,  246,
 /*  1980 */   246,  246,  246,  246,   72,  246,   74,   75,  246,   77,
 /*  1990 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2000 */    88,   89,   90,  246,   92,   93,  246,   95,   96,  246,
 /*  2010 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2020 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2030 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2040 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2050 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  2060 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2070 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2080 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2090 */   246,  246,   65,  246,  246,  246,  246,  246,  246,   72,
 /*  2100 */   246,   74,   75,  246,   77,   78,   79,   80,   81,   82,
 /*  2110 */    83,   84,   85,   86,   87,   88,   89,   90,  246,   92,
 /*  2120 */    93,  246,   95,   96,  246,   98,  246,  246,  246,  246,
 /*  2130 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2140 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  2150 */   246,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2160 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2170 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2180 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2190 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2200 */    58,  246,   60,   61,   65,   66,   67,   68,   69,   70,
 /*  2210 */   246,  246,  246,  246,   72,   76,   25,   26,   27,   28,
 /*  2220 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  2230 */    39,   40,   41,   42,   43,   44,   45,   95,   47,  246,
 /*  2240 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2250 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2260 */     3,    4,    5,  246,  125,  126,  124,   10,  246,  246,
 /*  2270 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2280 */   138,  139,  140,  246,  246,  246,   29,  246,  246,  246,
 /*  2290 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2300 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2310 */    53,   54,   55,   56,   57,   58,  246,   60,   61,   65,
 /*  2320 */    66,   67,   68,   69,   70,  246,  246,  246,  246,   72,
 /*  2330 */    76,  246,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  2340 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  2350 */   246,   47,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2360 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2370 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  125,
 /*  2380 */   126,  124,   10,  246,  246,  246,  246,  246,  246,  246,
 /*  2390 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2400 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2410 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2420 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2430 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  2440 */   246,  246,  246,  246,   72,  246,  246,  246,   29,   30,
 /*  2450 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  2460 */    41,   42,   43,   44,   45,  246,   47,   95,  246,  246,
 /*  2470 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2480 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2490 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2500 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  2510 */   138,  139,  140,  246,  246,  246,   29,  246,  246,  246,
 /*  2520 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2530 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2540 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2550 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  2560 */   246,  246,  246,  246,   30,   31,   32,   33,   34,   35,
 /*  2570 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  2580 */   246,   47,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2590 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2600 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  2610 */   246,  124,   10,   40,   41,  246,  246,  246,  246,  246,
 /*  2620 */   246,  134,  246,  136,  137,  138,  139,  140,  246,  246,
 /*  2630 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2640 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  2650 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2660 */    58,  246,   60,   61,  246,  246,  246,  246,  246,  246,
 /*  2670 */   246,   98,  246,  246,   72,   73,  246,  246,  105,  246,
 /*  2680 */   107,  108,  109,  110,  111,  112,  113,  114,  246,  246,
 /*  2690 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  2700 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2710 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2720 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  2730 */   246,  246,  161,  246,  246,  246,  134,  166,  136,  137,
 /*  2740 */   138,  139,  140,  246,  173,  246,   29,  246,  246,  246,
 /*  2750 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2760 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  2770 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  2780 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  2790 */   219,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /*  2800 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  2810 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  2820 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2830 */   113,  114,  246,    1,    2,    3,    4,    5,  246,  246,
 /*  2840 */   246,  124,   10,  246,  246,  246,  161,  246,  246,  246,
 /*  2850 */   246,  134,  246,  136,  137,  138,  139,  140,  173,  246,
 /*  2860 */   246,   29,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  2870 */   246,  246,   40,   41,  246,  190,  246,  246,   46,  246,
 /*  2880 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2890 */    58,  246,   60,   61,  161,  246,  246,  246,  246,  246,
 /*  2900 */   167,  246,  246,  170,   72,  220,  173,  246,  246,  246,
 /*  2910 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  2920 */   235,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  2930 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  2940 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  2950 */     3,    4,    5,  220,  246,  246,  124,   10,  225,  226,
 /*  2960 */   227,  228,  229,  230,  246,  232,  134,  246,  136,  137,
 /*  2970 */   138,  139,  140,  246,  246,  246,   29,  246,  246,  246,
 /*  2980 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  2990 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  3000 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3010 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3020 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3030 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3040 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3050 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3060 */   113,  114,  161,    1,    2,    3,    4,    5,  246,  246,
 /*  3070 */   246,  124,   10,  246,  173,  246,  161,  246,  246,  246,
 /*  3080 */   246,  134,  246,  136,  137,  138,  139,  140,  173,  246,
 /*  3090 */   246,  246,  246,  246,  193,  246,  246,  246,  246,  246,
 /*  3100 */   246,  246,   40,   41,  246,  190,  246,  246,   46,  246,
 /*  3110 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3120 */    58,  220,   60,   61,  246,  246,  225,  226,  227,  228,
 /*  3130 */   229,  230,  246,  232,   72,  220,   74,  246,  246,  246,
 /*  3140 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  3150 */   235,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3160 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3170 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  3180 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  3190 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  3200 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  3210 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  3220 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  3230 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3240 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3250 */   246,   74,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3260 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3270 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3280 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3290 */   113,  114,  161,    1,    2,    3,    4,    5,  246,  246,
 /*  3300 */   246,  124,   10,  246,  173,  246,  246,  246,  246,  161,
 /*  3310 */   246,  134,  246,  136,  137,  138,  139,  140,  170,  246,
 /*  3320 */   246,  173,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3330 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  3340 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3350 */    58,  220,   60,   61,  246,  246,  225,  226,  227,  228,
 /*  3360 */   229,  230,  246,  232,   72,  246,   74,  246,  220,  246,
 /*  3370 */   246,  240,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  3380 */   232,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3390 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3400 */   108,  109,  110,  111,  112,  113,  114,  246,    1,    2,
 /*  3410 */     3,    4,    5,  246,  246,  246,  124,   10,  246,  246,
 /*  3420 */   246,  246,  246,  246,  246,  246,  134,  246,  136,  137,
 /*  3430 */   138,  139,  140,  246,  246,  246,  246,  246,  246,  246,
 /*  3440 */   246,  246,  246,  246,  246,  246,  246,   40,   41,  246,
 /*  3450 */   246,  246,  246,   46,  246,   48,   49,   50,   51,   52,
 /*  3460 */    53,   54,   55,   56,   57,   58,  246,   60,   61,  246,
 /*  3470 */   246,  161,  246,  246,  246,  246,  246,  246,  246,   72,
 /*  3480 */   170,  246,  246,  173,  246,  246,  246,  246,  246,  246,
 /*  3490 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3500 */   246,  246,   95,  246,  246,   98,  246,  246,  246,  246,
 /*  3510 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3520 */   113,  114,  161,    1,    2,    3,    4,    5,  246,  246,
 /*  3530 */   220,  124,   10,  246,  173,  225,  226,  227,  228,  229,
 /*  3540 */   230,  134,  232,  136,  137,  138,  139,  140,  246,  246,
 /*  3550 */   246,  246,  246,  246,  193,  246,  246,  246,  246,  246,
 /*  3560 */   246,  246,   40,   41,  246,  246,  246,  246,   46,  246,
 /*  3570 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3580 */    58,  220,   60,   61,  246,  246,  225,  226,  227,  228,
 /*  3590 */   229,  230,  246,  232,   72,  246,  246,  246,  246,  246,
 /*  3600 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3610 */   246,  246,  246,  246,  246,  246,  246,   95,  246,  246,
 /*  3620 */    98,  246,  246,  246,  246,  103,  104,  105,  106,  107,
 /*  3630 */   108,  109,  110,  111,  112,  113,  114,  246,  246,  246,
 /*  3640 */   246,  246,  246,  246,  246,  246,  124,  246,  246,  146,
 /*  3650 */   147,  148,  149,  246,  151,  246,  134,  154,  136,  137,
 /*  3660 */   138,  139,  140,  160,  161,  246,  246,  246,  246,  246,
 /*  3670 */   246,  246,  246,  246,  246,  246,  173,  246,  246,  246,
 /*  3680 */   177,  178,  179,  246,  246,  182,  246,  246,  246,  186,
 /*  3690 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  3700 */   246,  246,  199,  246,   11,   12,   13,   14,   15,   16,
 /*  3710 */    17,   18,   19,   20,   21,   22,  246,  246,  246,  246,
 /*  3720 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  3730 */   227,  228,  229,  230,  246,  232,    7,    8,    9,  246,
 /*  3740 */   246,  246,   49,   50,  241,  246,  246,  246,  246,  246,
 /*  3750 */   246,  246,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3760 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  3770 */    41,   42,   43,   44,   45,  246,   47,  246,  246,  246,
 /*  3780 */   246,  246,  246,  246,   91,  246,  246,  246,  246,  246,
 /*  3790 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3800 */   246,  246,  246,   74,  246,  246,  246,  246,  246,  246,
 /*  3810 */   246,    7,    8,    9,  246,  246,  246,  246,  246,  246,
 /*  3820 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  3830 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  3840 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  3850 */   246,   47,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3860 */   246,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3870 */    20,   21,   22,  246,  246,  246,  161,   73,  246,  246,
 /*  3880 */   246,  246,  246,  246,  246,    7,    8,    9,  173,  246,
 /*  3890 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   49,
 /*  3900 */    50,   23,  246,   25,   26,   27,   28,   29,   30,   31,
 /*  3910 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  3920 */    42,   43,   44,   45,   74,   47,  246,  246,  246,  246,
 /*  3930 */   246,  246,  246,  246,  219,  220,  246,  246,  246,  246,
 /*  3940 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  3950 */   246,   73,  246,  246,  246,  246,  246,  246,  246,    7,
 /*  3960 */     8,    9,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  3970 */   246,  246,  246,  246,  246,   23,  246,   25,   26,   27,
 /*  3980 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  3990 */    38,   39,   40,   41,   42,   43,   44,   45,  246,   47,
 /*  4000 */     6,  246,  246,  246,  246,   11,   12,   13,   14,   15,
 /*  4010 */    16,   17,   18,   19,   20,   21,   22,  246,  246,  246,
 /*  4020 */   246,  246,  246,  246,  246,   73,  246,  246,  246,  161,
 /*  4030 */   246,  246,  146,  147,  148,  149,  246,  151,  170,  246,
 /*  4040 */   246,  173,  246,   49,   50,  246,  160,  161,  246,  246,
 /*  4050 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  173,
 /*  4060 */   246,  246,  246,  177,  178,  179,  246,   73,  182,  246,
 /*  4070 */   246,  246,  186,  246,  246,  189,  246,  246,  246,  193,
 /*  4080 */   194,  246,  196,  246,  246,  199,  246,  246,  220,  246,
 /*  4090 */   246,  246,   59,  225,  226,  227,  228,  229,  230,  246,
 /*  4100 */   232,  246,  246,  246,  246,  246,  220,  246,   75,   76,
 /*  4110 */   246,  225,  226,  227,  228,  229,  230,  246,  232,    7,
 /*  4120 */     8,    9,  246,  246,  246,  246,  246,  241,   95,  246,
 /*  4130 */   246,   98,  246,  246,  246,   23,  246,   25,   26,   27,
 /*  4140 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  4150 */    38,   39,   40,   41,   42,   43,   44,   45,  246,   47,
 /*  4160 */   127,  128,  129,  130,  131,  132,  133,  246,  135,  246,
 /*  4170 */   246,  138,   59,  246,  246,  246,  246,  246,  246,  246,
 /*  4180 */   246,  246,  246,  246,  246,  246,   74,  246,   75,   76,
 /*  4190 */   246,  161,  246,  246,    7,    8,    9,  246,  246,  246,
 /*  4200 */   170,  246,  246,  173,  246,  246,  246,  246,   95,  246,
 /*  4210 */    23,   98,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4220 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  4230 */    43,   44,   45,  246,   47,  246,  246,  246,  246,  246,
 /*  4240 */   127,  128,  129,  130,  131,  132,  133,  246,  135,  246,
 /*  4250 */   220,  246,  139,  246,  161,  225,  226,  227,  228,  229,
 /*  4260 */   230,   74,  232,  170,  246,  246,  173,  246,  246,    7,
 /*  4270 */     8,    9,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4280 */   246,  246,  246,  246,  246,   23,  246,   25,   26,   27,
 /*  4290 */    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
 /*  4300 */    38,   39,   40,   41,   42,   43,   44,   45,  246,   47,
 /*  4310 */   246,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  4320 */   227,  228,  229,  230,  246,  232,  246,  161,  246,  246,
 /*  4330 */   246,  246,  246,  246,  246,   73,  170,  246,  246,  173,
 /*  4340 */   246,  246,  246,    7,    8,    9,  246,  246,  246,  246,
 /*  4350 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   23,
 /*  4360 */   246,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4370 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4380 */    44,   45,  246,   47,  246,  246,  220,  246,  246,  246,
 /*  4390 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  4400 */   246,  246,  161,  246,  246,  246,  246,  246,  246,   73,
 /*  4410 */   246,  170,  246,  246,  173,  246,  161,    7,    8,    9,
 /*  4420 */   246,  246,  246,  246,  246,  246,  246,  246,  173,  246,
 /*  4430 */   246,  246,  246,   23,  246,   25,   26,   27,   28,   29,
 /*  4440 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4450 */    40,   41,   42,   43,   44,   45,  246,   47,  246,  246,
 /*  4460 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /*  4470 */   229,  230,  246,  232,  246,  220,  246,  246,  246,  246,
 /*  4480 */   225,  226,  227,  228,  229,  230,   76,  232,  246,  246,
 /*  4490 */   235,  246,  246,  246,    7,    8,    9,  246,  246,  246,
 /*  4500 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4510 */    23,  246,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4520 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  4530 */    43,   44,   45,  246,   47,  246,  246,  246,    6,  246,
 /*  4540 */   246,  246,  246,   11,   12,   13,   14,   15,   16,   17,
 /*  4550 */    18,   19,   20,   21,   22,  246,   59,  246,  246,  246,
 /*  4560 */   246,   74,  246,  145,  146,  147,  148,  149,  246,  151,
 /*  4570 */   246,  246,   75,   76,  246,  246,  246,  246,  160,  161,
 /*  4580 */   246,   49,   50,  246,  246,  246,  246,  246,  246,  246,
 /*  4590 */   246,  173,   95,  246,  246,   98,  178,  179,  246,  246,
 /*  4600 */   182,  246,  246,  106,  186,   73,  246,  189,  246,  246,
 /*  4610 */   246,  193,  194,  246,  196,  246,  246,  199,  246,  246,
 /*  4620 */   246,  246,  246,  246,  127,  128,  129,  130,  131,  132,
 /*  4630 */   133,  246,  135,  246,  246,  246,  246,  246,  220,  246,
 /*  4640 */   246,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  4650 */   232,    7,    8,    9,  246,  246,  246,  246,  246,  241,
 /*  4660 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  4670 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  4680 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  4690 */   246,   47,    7,    8,    9,  246,  246,  246,  246,  246,
 /*  4700 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  4710 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  4720 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  4730 */    45,  246,   47,    7,    8,    9,  246,  246,  246,  246,
 /*  4740 */   246,  246,  246,  246,  246,  246,  246,  246,  246,   23,
 /*  4750 */   246,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  4760 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  4770 */    44,   45,  128,   47,  246,  246,  246,  246,  246,  246,
 /*  4780 */    59,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4790 */   246,  246,  246,  246,  246,  246,   75,   76,  246,   73,
 /*  4800 */   115,  246,  246,  246,  246,  246,  246,    7,    8,    9,
 /*  4810 */   246,  246,  246,  246,  246,  246,   95,  246,  246,   98,
 /*  4820 */   246,  246,  246,   23,  246,   25,   26,   27,   28,   29,
 /*  4830 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  4840 */    40,   41,   42,   43,   44,   45,  246,   47,  127,  128,
 /*  4850 */   129,  130,  131,  132,  133,  246,  135,  246,  246,  246,
 /*  4860 */   246,  246,  141,  246,  246,  246,  246,  246,  246,  246,
 /*  4870 */   246,  246,  246,   73,  246,  161,  246,  246,  246,  246,
 /*  4880 */   246,    7,    8,    9,  170,  246,  246,  173,  246,  246,
 /*  4890 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  4900 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  4910 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  4920 */   246,   47,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4930 */   246,  246,  246,  246,  220,  246,  246,  246,  246,  225,
 /*  4940 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  4950 */    76,  246,  246,  246,  246,  246,  246,  246,    7,    8,
 /*  4960 */     9,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  4970 */   246,  246,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  4980 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  4990 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  5000 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5010 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5020 */   246,  246,  246,  246,  246,  246,  246,   76,  246,  246,
 /*  5030 */   246,  246,  246,  246,  246,    7,    8,    9,  246,  246,
 /*  5040 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5050 */   246,   23,  246,   25,   26,   27,   28,   29,   30,   31,
 /*  5060 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  5070 */    42,   43,   44,   45,  246,   47,    7,    8,    9,  246,
 /*  5080 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5090 */   246,  246,   23,  246,   25,   26,   27,   28,   29,   30,
 /*  5100 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*  5110 */    41,   42,   43,   44,   45,  246,   47,  246,  246,  246,
 /*  5120 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5130 */   246,  246,  246,  246,  246,  246,  161,  246,  246,  246,
 /*  5140 */   246,  246,   73,  115,  246,  246,  246,  246,  173,  246,
 /*  5150 */     7,    8,    9,  246,  246,  246,  246,  246,  246,  246,
 /*  5160 */   246,  246,  246,  246,  189,  246,   23,  246,   25,   26,
 /*  5170 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*  5180 */    37,   38,   39,   40,   41,   42,   43,   44,   45,  246,
 /*  5190 */    47,  246,  246,  246,  246,  220,  246,  246,  246,  246,
 /*  5200 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  5210 */   246,  246,  246,  246,  246,  246,   73,  246,  246,  246,
 /*  5220 */   246,  246,  246,  246,    7,    8,    9,  246,  246,  246,
 /*  5230 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5240 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  5250 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  5260 */    43,   44,   45,  246,   47,    7,    8,    9,  246,  246,
 /*  5270 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5280 */   246,   23,  246,   25,   26,   27,   28,   29,   30,   31,
 /*  5290 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  5300 */    42,   43,   44,   45,  246,   47,  246,  246,  246,  246,
 /*  5310 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5320 */   246,  246,  246,  246,  246,  246,  161,  246,  246,  246,
 /*  5330 */   246,  246,  246,  246,   76,  246,  246,  161,  173,  246,
 /*  5340 */   246,  246,    7,    8,    9,  246,  246,  246,  246,  173,
 /*  5350 */   246,  246,  246,  246,  246,  246,  246,  246,   23,  246,
 /*  5360 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  5370 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*  5380 */    45,  246,   47,  246,  246,  220,  246,  246,  246,  246,
 /*  5390 */   225,  226,  227,  228,  229,  230,  220,  232,  246,  246,
 /*  5400 */   246,  225,  226,  227,  228,  229,  230,  246,  232,   74,
 /*  5410 */   161,  246,  246,  246,  246,  246,  246,    7,    8,    9,
 /*  5420 */   246,  246,  173,  246,  246,  246,  246,  246,  246,  246,
 /*  5430 */   246,  246,  246,   23,  246,   25,   26,   27,   28,   29,
 /*  5440 */    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
 /*  5450 */    40,   41,   42,   43,   44,   45,  246,   47,  246,  246,
 /*  5460 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  220,
 /*  5470 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  5480 */   246,  232,  246,  246,  246,  246,   76,  246,  161,  246,
 /*  5490 */   246,  246,  246,  246,    7,    8,    9,  246,  246,  246,
 /*  5500 */   173,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5510 */    23,  246,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  5520 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*  5530 */    43,   44,   45,  246,   47,  246,  246,  246,  246,  246,
 /*  5540 */   246,  246,  246,  246,  246,  246,  246,  220,  246,  246,
 /*  5550 */   246,  246,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  5560 */   246,  246,  246,   76,  246,  246,  246,  246,  246,  246,
 /*  5570 */   246,    7,    8,    9,  246,  246,  246,  246,  246,  246,
 /*  5580 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  5590 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  5600 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  5610 */   246,   47,    8,    9,  246,  246,  246,  246,  246,  246,
 /*  5620 */   246,  246,  246,  246,  246,  246,  246,   23,  246,   25,
 /*  5630 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*  5640 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*  5650 */     9,   47,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5660 */   246,  246,  246,  246,   23,  246,   25,   26,   27,   28,
 /*  5670 */    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
 /*  5680 */    39,   40,   41,   42,   43,   44,   45,  246,   47,  246,
 /*  5690 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5700 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5710 */   246,  246,  246,  246,  246,  246,  246,  246,  146,  246,
 /*  5720 */   246,  149,  246,  151,  246,  246,  246,  246,  246,  246,
 /*  5730 */   158,  246,  160,  161,  246,  246,  146,  246,  246,  149,
 /*  5740 */   246,  151,  246,  246,  246,  173,  246,  246,  246,  246,
 /*  5750 */   160,  161,  246,  246,  246,  246,  246,  246,  246,  169,
 /*  5760 */   246,  189,  246,  173,  246,  193,  194,  246,  196,  246,
 /*  5770 */   246,  199,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  5780 */   246,  246,  246,  193,  194,  246,  196,  246,  246,  199,
 /*  5790 */   246,  246,  220,  246,  246,  246,  246,  225,  226,  227,
 /*  5800 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  5810 */   220,  246,  246,  241,  246,  225,  226,  227,  228,  229,
 /*  5820 */   230,  146,  232,  246,  149,  246,  151,  246,  246,  246,
 /*  5830 */   246,  241,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  5840 */   246,  246,  246,  246,  169,  246,  246,  246,  173,  246,
 /*  5850 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  5860 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  5870 */   146,  196,  246,  149,  199,  151,  246,  246,  246,  246,
 /*  5880 */   156,  246,  246,  246,  160,  161,  246,  246,  246,  246,
 /*  5890 */   246,  246,  246,  246,  246,  220,  246,  173,  246,  246,
 /*  5900 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  5910 */   246,  246,  246,  189,  246,  246,  241,  193,  194,  246,
 /*  5920 */   196,  246,  246,  199,  246,  246,  246,  246,  246,  246,
 /*  5930 */   246,  146,  246,  246,  149,  246,  151,  246,  246,  246,
 /*  5940 */   246,  246,  246,  246,  220,  160,  161,  246,  246,  225,
 /*  5950 */   226,  227,  228,  229,  230,  246,  232,  172,  173,  246,
 /*  5960 */   246,  246,  246,  246,  246,  241,  246,  246,  246,  246,
 /*  5970 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  5980 */   246,  196,  246,  246,  199,  246,  246,  151,  246,  246,
 /*  5990 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  6000 */   246,  246,  246,  246,  246,  220,  246,  246,  246,  173,
 /*  6010 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6020 */   246,  246,  246,  246,  246,  189,  241,  246,  246,  193,
 /*  6030 */   194,  246,  196,  246,  246,  199,  246,  151,  246,  246,
 /*  6040 */   246,  246,  246,  246,  208,  209,  160,  161,  246,  246,
 /*  6050 */   246,  246,  246,  246,  246,  246,  220,  246,  246,  173,
 /*  6060 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  6070 */   246,  246,  246,  246,  246,  189,  246,  241,  246,  193,
 /*  6080 */   194,  246,  196,  151,  246,  199,  246,  246,  246,  246,
 /*  6090 */   246,  246,  160,  161,  208,  209,  246,  246,  246,  246,
 /*  6100 */   246,  246,  246,  246,  246,  173,  220,  246,  246,  246,
 /*  6110 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  6120 */   246,  189,  246,  246,  246,  193,  194,  241,  196,  246,
 /*  6130 */   246,  199,  246,  151,  246,  246,  246,  246,  246,  246,
 /*  6140 */   208,  209,  160,  161,  246,  246,  246,  246,  246,  246,
 /*  6150 */   246,  246,  220,  246,  246,  173,  246,  225,  226,  227,
 /*  6160 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  6170 */   246,  189,  246,  241,  246,  193,  194,  246,  196,  146,
 /*  6180 */   246,  199,  149,  246,  151,  246,  246,  246,  246,  246,
 /*  6190 */   208,  209,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  6200 */   246,  246,  220,  246,  246,  246,  173,  225,  226,  227,
 /*  6210 */   228,  229,  230,  246,  232,  246,  246,  246,  246,  246,
 /*  6220 */   246,  246,  189,  241,  246,  246,  193,  194,  246,  196,
 /*  6230 */   246,  246,  199,  246,  151,  246,  246,  246,  246,  246,
 /*  6240 */   157,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  6250 */   246,  246,  246,  220,  246,  246,  173,  246,  225,  226,
 /*  6260 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  6270 */   246,  246,  189,  246,  241,  246,  193,  194,  151,  196,
 /*  6280 */   246,  246,  199,  246,  157,  246,  246,  160,  161,  246,
 /*  6290 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6300 */   173,  246,  246,  220,  246,  246,  246,  246,  225,  226,
 /*  6310 */   227,  228,  229,  230,  246,  232,  189,  246,  246,  246,
 /*  6320 */   193,  194,  246,  196,  241,  246,  199,  246,  245,  246,
 /*  6330 */   246,  246,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  6340 */   246,  246,  157,  246,  246,  160,  161,  220,  246,  246,
 /*  6350 */   246,  246,  225,  226,  227,  228,  229,  230,  173,  232,
 /*  6360 */   246,  246,  246,  246,  246,  246,  246,  246,  241,  246,
 /*  6370 */   246,  246,  245,  246,  189,  246,  246,  246,  193,  194,
 /*  6380 */   246,  196,  246,  246,  199,  246,  151,  246,  246,  246,
 /*  6390 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  6400 */   246,  246,  246,  246,  246,  220,  246,  246,  173,  246,
 /*  6410 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6420 */   246,  246,  246,  246,  189,  246,  241,  246,  193,  194,
 /*  6430 */   245,  196,  246,  246,  199,  246,  151,  246,  246,  246,
 /*  6440 */   246,  246,  246,  208,  209,  160,  161,  246,  246,  246,
 /*  6450 */   246,  246,  246,  246,  246,  220,  246,  246,  173,  246,
 /*  6460 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6470 */   246,  246,  246,  246,  189,  246,  241,  246,  193,  194,
 /*  6480 */   151,  196,  246,  246,  199,  246,  246,  246,  246,  160,
 /*  6490 */   161,  246,  246,  208,  209,  246,  246,  151,  246,  246,
 /*  6500 */   246,  246,  173,  246,  246,  220,  160,  161,  246,  246,
 /*  6510 */   225,  226,  227,  228,  229,  230,  246,  232,  189,  173,
 /*  6520 */   246,  246,  193,  194,  246,  196,  241,  246,  199,  246,
 /*  6530 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  6540 */   194,  246,  196,  197,  246,  199,  246,  246,  246,  220,
 /*  6550 */   246,  246,  246,  246,  225,  226,  227,  228,  229,  230,
 /*  6560 */   231,  232,  246,  246,  246,  246,  220,  246,  246,  246,
 /*  6570 */   241,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  6580 */   246,  146,  236,  246,  149,  246,  151,  241,  246,  246,
 /*  6590 */   246,  246,  246,  246,  246,  160,  161,  246,  246,  246,
 /*  6600 */   246,  246,  246,  246,  246,  246,  246,  246,  173,  246,
 /*  6610 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6620 */   246,  246,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  6630 */   246,  196,  151,  246,  199,  246,  246,  246,  246,  246,
 /*  6640 */   246,  160,  161,  246,  146,  246,  246,  149,  246,  151,
 /*  6650 */   246,  246,  246,  246,  173,  220,  246,  246,  160,  161,
 /*  6660 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  6670 */   189,  173,  246,  246,  193,  194,  241,  196,  246,  246,
 /*  6680 */   199,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  6690 */   146,  193,  194,  149,  196,  151,  246,  199,  246,  246,
 /*  6700 */   246,  220,  246,  246,  160,  161,  225,  226,  227,  228,
 /*  6710 */   229,  230,  231,  232,  246,  246,  246,  173,  220,  246,
 /*  6720 */   246,  246,  241,  225,  226,  227,  228,  229,  230,  246,
 /*  6730 */   232,  246,  246,  189,  246,  246,  246,  193,  194,  241,
 /*  6740 */   196,  246,  246,  199,  246,  246,  246,  246,  246,  246,
 /*  6750 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6760 */   246,  246,  246,  246,  220,  246,  246,  246,  246,  225,
 /*  6770 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  6780 */   151,  246,  246,  246,  246,  241,  246,  246,  246,  160,
 /*  6790 */   161,  246,  246,  164,  246,  246,  246,  246,  246,  151,
 /*  6800 */   246,  246,  173,  246,  246,  246,  246,  246,  160,  161,
 /*  6810 */   246,  246,  246,  246,  246,  246,  246,  246,  189,  246,
 /*  6820 */   246,  173,  193,  194,  246,  196,  246,  246,  199,  246,
 /*  6830 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  6840 */   246,  193,  194,  151,  196,  246,  246,  199,  246,  220,
 /*  6850 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /*  6860 */   246,  232,  151,  246,  246,  173,  246,  246,  220,  246,
 /*  6870 */   241,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  6880 */   232,  189,  246,  246,  173,  193,  194,  246,  196,  241,
 /*  6890 */   246,  199,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  6900 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  246,
 /*  6910 */   199,  246,  220,  246,  246,  246,  246,  225,  226,  227,
 /*  6920 */   228,  229,  230,  246,  232,  151,  246,  246,  246,  246,
 /*  6930 */   246,  220,  246,  241,  160,  161,  225,  226,  227,  228,
 /*  6940 */   229,  230,  246,  232,  246,  246,  246,  173,  246,  246,
 /*  6950 */   246,  246,  241,  246,  246,  246,  246,  246,  246,  246,
 /*  6960 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  246,
 /*  6970 */   196,  246,  246,  199,  151,  246,  246,  246,  246,  246,
 /*  6980 */   246,  246,  246,  160,  161,  246,  246,  246,  246,  246,
 /*  6990 */   246,  246,  246,  246,  220,  246,  173,  246,  246,  225,
 /*  7000 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  7010 */   246,  246,  189,  246,  246,  241,  193,  194,  246,  196,
 /*  7020 */   151,  246,  199,  246,  246,  246,  246,  246,  246,  160,
 /*  7030 */   161,  246,  246,  246,  246,  246,  246,  151,  246,  246,
 /*  7040 */   246,  246,  173,  220,  246,  246,  160,  161,  225,  226,
 /*  7050 */   227,  228,  229,  230,  246,  232,  246,  246,  189,  173,
 /*  7060 */   246,  246,  193,  194,  241,  196,  246,  246,  199,  246,
 /*  7070 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  7080 */   194,  246,  196,  151,  246,  199,  246,  246,  246,  220,
 /*  7090 */   246,  246,  160,  161,  225,  226,  227,  228,  229,  230,
 /*  7100 */   246,  232,  246,  246,  246,  173,  220,  246,  246,  246,
 /*  7110 */   241,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  7120 */   246,  189,  246,  246,  246,  193,  194,  241,  196,  246,
 /*  7130 */   246,  199,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7140 */   246,  246,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  7150 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  7160 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  246,
 /*  7170 */   246,  151,  246,  241,  246,  246,  246,  246,  246,  246,
 /*  7180 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  7190 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  7200 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  7210 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  7220 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  7230 */   246,  246,  151,  246,  246,  246,  241,  246,  246,  246,
 /*  7240 */   220,  160,  161,  246,  246,  225,  226,  227,  228,  229,
 /*  7250 */   230,  246,  232,  246,  173,  246,  246,  151,  246,  246,
 /*  7260 */   246,  241,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  7270 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  7280 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7290 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  7300 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  7310 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  7320 */   151,  246,  241,  246,  246,  246,  220,  246,  246,  160,
 /*  7330 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  7340 */   246,  246,  173,  246,  246,  151,  246,  241,  246,  246,
 /*  7350 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  7360 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  7370 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7380 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  7390 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  7400 */   246,  232,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  7410 */   241,  246,  246,  246,  220,  160,  161,  246,  246,  225,
 /*  7420 */   226,  227,  228,  229,  230,  246,  232,  246,  173,  246,
 /*  7430 */   246,  151,  246,  246,  246,  241,  246,  246,  246,  246,
 /*  7440 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  7450 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  7460 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  7470 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  7480 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  7490 */   246,  246,  246,  246,  151,  246,  241,  246,  246,  246,
 /*  7500 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /*  7510 */   230,  246,  232,  246,  246,  246,  173,  246,  246,  151,
 /*  7520 */   246,  241,  246,  246,  246,  246,  246,  246,  160,  161,
 /*  7530 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  7540 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  7550 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  7560 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  7570 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  7580 */   151,  246,  246,  246,  241,  246,  246,  246,  220,  160,
 /*  7590 */   161,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  7600 */   232,  246,  173,  246,  246,  151,  246,  246,  246,  241,
 /*  7610 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  7620 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  7630 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7640 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  7650 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  7660 */   246,  232,  246,  246,  246,  246,  246,  246,  151,  246,
 /*  7670 */   241,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /*  7680 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  7690 */   173,  246,  246,  151,  246,  241,  246,  246,  246,  246,
 /*  7700 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  7710 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  7720 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7730 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  7740 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  7750 */   246,  246,  246,  246,  151,  246,  246,  246,  241,  246,
 /*  7760 */   246,  246,  220,  160,  161,  246,  246,  225,  226,  227,
 /*  7770 */   228,  229,  230,  246,  232,  246,  173,  246,  246,  151,
 /*  7780 */   246,  246,  246,  241,  246,  246,  246,  246,  160,  161,
 /*  7790 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  7800 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  7810 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  7820 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  7830 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  7840 */   246,  246,  151,  246,  241,  246,  246,  246,  220,  246,
 /*  7850 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  7860 */   232,  246,  246,  246,  173,  246,  246,  151,  246,  241,
 /*  7870 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  7880 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  7890 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7900 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  7910 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  7920 */   229,  230,  246,  232,  246,  246,  246,  246,  151,  246,
 /*  7930 */   246,  246,  241,  246,  246,  246,  220,  160,  161,  246,
 /*  7940 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  7950 */   173,  246,  246,  151,  246,  246,  246,  241,  246,  246,
 /*  7960 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  7970 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  7980 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  7990 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  8000 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  8010 */   246,  246,  246,  246,  246,  246,  151,  246,  241,  246,
 /*  8020 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  8030 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  246,
 /*  8040 */   246,  151,  246,  241,  246,  246,  246,  246,  246,  246,
 /*  8050 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  8060 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  8070 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  8080 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  8090 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8100 */   246,  246,  151,  246,  246,  246,  241,  246,  246,  246,
 /*  8110 */   220,  160,  161,  246,  246,  225,  226,  227,  228,  229,
 /*  8120 */   230,  246,  232,  246,  173,  246,  246,  151,  246,  246,
 /*  8130 */   246,  241,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  8140 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  8150 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8160 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  8170 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  8180 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  8190 */   151,  246,  241,  246,  246,  246,  220,  246,  246,  160,
 /*  8200 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  8210 */   246,  246,  173,  246,  246,  151,  246,  241,  246,  246,
 /*  8220 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  8230 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  8240 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8250 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  8260 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  8270 */   246,  232,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  8280 */   241,  246,  246,  246,  220,  160,  161,  246,  246,  225,
 /*  8290 */   226,  227,  228,  229,  230,  246,  232,  246,  173,  246,
 /*  8300 */   246,  151,  246,  246,  246,  241,  246,  246,  246,  246,
 /*  8310 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  8320 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  8330 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  8340 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  8350 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8360 */   246,  246,  246,  246,  151,  246,  241,  246,  246,  246,
 /*  8370 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /*  8380 */   230,  246,  232,  246,  246,  246,  173,  246,  246,  151,
 /*  8390 */   246,  241,  246,  246,  246,  246,  246,  246,  160,  161,
 /*  8400 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  8410 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  8420 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  8430 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  8440 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  8450 */   151,  246,  246,  246,  241,  246,  246,  246,  220,  160,
 /*  8460 */   161,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  8470 */   232,  246,  173,  246,  246,  151,  246,  246,  246,  241,
 /*  8480 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  8490 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  8500 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8510 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  8520 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  8530 */   246,  232,  246,  246,  246,  246,  246,  246,  151,  246,
 /*  8540 */   241,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /*  8550 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  8560 */   173,  246,  246,  151,  246,  241,  246,  246,  246,  246,
 /*  8570 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  8580 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  8590 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8600 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  8610 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  8620 */   246,  246,  246,  246,  151,  246,  246,  246,  241,  246,
 /*  8630 */   246,  246,  220,  160,  161,  246,  246,  225,  226,  227,
 /*  8640 */   228,  229,  230,  246,  232,  246,  173,  246,  246,  151,
 /*  8650 */   246,  246,  246,  241,  246,  246,  246,  246,  160,  161,
 /*  8660 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  8670 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  8680 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  8690 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  8700 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  8710 */   246,  246,  151,  246,  241,  246,  246,  246,  220,  246,
 /*  8720 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  8730 */   232,  246,  246,  246,  173,  246,  246,  151,  246,  241,
 /*  8740 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  8750 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  8760 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8770 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  8780 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  8790 */   229,  230,  246,  232,  246,  246,  246,  246,  151,  246,
 /*  8800 */   246,  246,  241,  246,  246,  246,  220,  160,  161,  246,
 /*  8810 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  8820 */   173,  246,  246,  151,  246,  246,  246,  241,  246,  246,
 /*  8830 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  8840 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  8850 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  8860 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  8870 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  8880 */   246,  246,  246,  246,  246,  246,  151,  246,  241,  246,
 /*  8890 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  8900 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  246,
 /*  8910 */   246,  151,  246,  241,  246,  246,  246,  246,  246,  246,
 /*  8920 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  8930 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  8940 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  8950 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  8960 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  8970 */   246,  246,  151,  246,  246,  246,  241,  246,  246,  246,
 /*  8980 */   220,  160,  161,  246,  246,  225,  226,  227,  228,  229,
 /*  8990 */   230,  246,  232,  246,  173,  246,  246,  151,  246,  246,
 /*  9000 */   246,  241,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  9010 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  9020 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9030 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  9040 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  9050 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  9060 */   151,  246,  241,  246,  246,  246,  220,  246,  246,  160,
 /*  9070 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  9080 */   246,  246,  173,  246,  246,  151,  246,  241,  246,  246,
 /*  9090 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  9100 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  9110 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9120 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  9130 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  9140 */   246,  232,  246,  246,  246,  246,  151,  246,  246,  246,
 /*  9150 */   241,  246,  246,  246,  220,  160,  161,  246,  246,  225,
 /*  9160 */   226,  227,  228,  229,  230,  246,  232,  246,  173,  246,
 /*  9170 */   246,  151,  246,  246,  246,  241,  246,  246,  246,  246,
 /*  9180 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  9190 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  9200 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  9210 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  9220 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  9230 */   246,  246,  246,  246,  151,  246,  241,  246,  246,  246,
 /*  9240 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /*  9250 */   230,  246,  232,  246,  246,  246,  173,  246,  246,  151,
 /*  9260 */   246,  241,  246,  246,  246,  246,  246,  246,  160,  161,
 /*  9270 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  9280 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  9290 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  9300 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  9310 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  9320 */   151,  246,  246,  246,  241,  246,  246,  246,  220,  160,
 /*  9330 */   161,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /*  9340 */   232,  246,  173,  246,  246,  151,  246,  246,  246,  241,
 /*  9350 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  9360 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  9370 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9380 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /*  9390 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /*  9400 */   246,  232,  246,  246,  246,  246,  246,  246,  151,  246,
 /*  9410 */   241,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /*  9420 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /*  9430 */   173,  246,  246,  151,  246,  241,  246,  246,  246,  246,
 /*  9440 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  9450 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  9460 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9470 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  9480 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  9490 */   246,  246,  246,  246,  151,  246,  246,  246,  241,  246,
 /*  9500 */   246,  246,  220,  160,  161,  246,  246,  225,  226,  227,
 /*  9510 */   228,  229,  230,  246,  232,  246,  173,  246,  246,  151,
 /*  9520 */   246,  246,  246,  241,  246,  246,  246,  246,  160,  161,
 /*  9530 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /*  9540 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /*  9550 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /*  9560 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /*  9570 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /*  9580 */   246,  246,  151,  246,  241,  246,  246,  246,  220,  246,
 /*  9590 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /*  9600 */   232,  246,  246,  246,  173,  246,  246,  151,  246,  241,
 /*  9610 */   246,  246,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  9620 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  9630 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9640 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  9650 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  9660 */   229,  230,  246,  232,  246,  246,  246,  246,  151,  246,
 /*  9670 */   246,  246,  241,  246,  246,  246,  220,  160,  161,  246,
 /*  9680 */   246,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  9690 */   173,  246,  246,  151,  246,  246,  246,  241,  246,  246,
 /*  9700 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /*  9710 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /*  9720 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9730 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /*  9740 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /*  9750 */   246,  246,  246,  246,  246,  246,  151,  246,  241,  246,
 /*  9760 */   246,  246,  220,  246,  246,  160,  161,  225,  226,  227,
 /*  9770 */   228,  229,  230,  246,  232,  246,  246,  246,  173,  246,
 /*  9780 */   246,  151,  246,  241,  246,  246,  246,  246,  246,  246,
 /*  9790 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /*  9800 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /*  9810 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /*  9820 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /*  9830 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /*  9840 */   246,  246,  151,  246,  246,  246,  241,  246,  246,  246,
 /*  9850 */   220,  160,  161,  246,  246,  225,  226,  227,  228,  229,
 /*  9860 */   230,  246,  232,  246,  173,  246,  246,  151,  246,  246,
 /*  9870 */   246,  241,  246,  246,  246,  246,  160,  161,  246,  246,
 /*  9880 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  173,
 /*  9890 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9900 */   246,  246,  246,  246,  246,  189,  246,  246,  246,  193,
 /*  9910 */   194,  220,  196,  246,  246,  199,  225,  226,  227,  228,
 /*  9920 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /*  9930 */   151,  246,  241,  246,  246,  246,  220,  246,  246,  160,
 /*  9940 */   161,  225,  226,  227,  228,  229,  230,  246,  232,  246,
 /*  9950 */   246,  246,  173,  246,  246,  151,  246,  241,  246,  246,
 /*  9960 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /*  9970 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /*  9980 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /*  9990 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /* 10000 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /* 10010 */   246,  232,  246,  246,  246,  246,  151,  246,  246,  246,
 /* 10020 */   241,  246,  246,  246,  220,  160,  161,  246,  246,  225,
 /* 10030 */   226,  227,  228,  229,  230,  246,  232,  246,  173,  246,
 /* 10040 */   246,  151,  246,  246,  246,  241,  246,  246,  246,  246,
 /* 10050 */   160,  161,  246,  246,  189,  246,  246,  246,  193,  194,
 /* 10060 */   246,  196,  246,  173,  199,  246,  246,  246,  246,  246,
 /* 10070 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  189,
 /* 10080 */   246,  246,  246,  193,  194,  220,  196,  246,  246,  199,
 /* 10090 */   225,  226,  227,  228,  229,  230,  246,  232,  246,  246,
 /* 10100 */   246,  246,  246,  246,  151,  246,  241,  246,  246,  246,
 /* 10110 */   220,  246,  246,  160,  161,  225,  226,  227,  228,  229,
 /* 10120 */   230,  246,  232,  246,  246,  246,  173,  246,  246,  151,
 /* 10130 */   246,  241,  246,  246,  246,  246,  246,  246,  160,  161,
 /* 10140 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /* 10150 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /* 10160 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /* 10170 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /* 10180 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /* 10190 */   151,  246,  246,  246,  241,  246,  246,  246,  220,  160,
 /* 10200 */   161,  246,  246,  225,  226,  227,  228,  229,  230,  246,
 /* 10210 */   232,  246,  173,  246,  246,  151,  246,  246,  246,  241,
 /* 10220 */   246,  246,  246,  246,  160,  161,  246,  246,  189,  246,
 /* 10230 */   246,  246,  193,  194,  246,  196,  246,  173,  199,  246,
 /* 10240 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10250 */   246,  246,  246,  189,  246,  246,  246,  193,  194,  220,
 /* 10260 */   196,  246,  246,  199,  225,  226,  227,  228,  229,  230,
 /* 10270 */   246,  232,  246,  246,  246,  246,  246,  246,  151,  246,
 /* 10280 */   241,  246,  246,  246,  220,  246,  246,  160,  161,  225,
 /* 10290 */   226,  227,  228,  229,  230,  246,  232,  246,  246,  246,
 /* 10300 */   173,  246,  246,  151,  246,  241,  246,  246,  246,  246,
 /* 10310 */   246,  246,  160,  161,  246,  246,  189,  246,  246,  246,
 /* 10320 */   193,  194,  246,  196,  246,  173,  199,  246,  246,  246,
 /* 10330 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10340 */   246,  189,  246,  246,  246,  193,  194,  220,  196,  246,
 /* 10350 */   246,  199,  225,  226,  227,  228,  229,  230,  246,  232,
 /* 10360 */   246,  246,  246,  246,  151,  246,  246,  246,  241,  246,
 /* 10370 */   246,  246,  220,  160,  161,  246,  246,  225,  226,  227,
 /* 10380 */   228,  229,  230,  246,  232,  246,  173,  246,  246,  151,
 /* 10390 */   246,  246,  246,  241,  246,  246,  246,  246,  160,  161,
 /* 10400 */   246,  246,  189,  246,  246,  246,  193,  194,  246,  196,
 /* 10410 */   246,  173,  199,  246,  246,  246,  246,  246,  246,  246,
 /* 10420 */   246,  246,  246,  246,  246,  246,  246,  189,  246,  246,
 /* 10430 */   246,  193,  194,  220,  196,  246,  246,  199,  225,  226,
 /* 10440 */   227,  228,  229,  230,  246,  232,  246,  246,  246,  246,
 /* 10450 */   246,  246,  151,  246,  241,  246,  246,  246,  220,  246,
 /* 10460 */   246,  160,  161,  225,  226,  227,  228,  229,  230,  246,
 /* 10470 */   232,  246,  246,  246,  173,  246,  246,  246,  246,  241,
 /* 10480 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10490 */   189,  246,  246,  246,  193,  194,  246,  196,  246,  246,
 /* 10500 */   199,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10510 */   246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
 /* 10520 */   246,  220,  246,  246,  246,  246,  225,  226,  227,  228,
 /* 10530 */   229,  230,  246,  232,  246,  246,  246,  246,  246,  246,
 /* 10540 */   246,  246,  241,
);
    const YY_SHIFT_USE_DFLT = -58;
    const YY_SHIFT_MAX = 490;
    static public $yy_shift_ofst = array(
 /*     0 */   -58, 1287, 1057,  932,  692,  817,   -1,  232,  347,  577,
 /*    10 */   462,  114, 1172, 1287, 1287, 1287, 1287, 1537, 1537, 1912,
 /*    20 */  1662, 1412, 1787, 2027, 2027, 2027, 2142, 2257, 2257, 2257,
 /*    30 */  2257, 2257, 2257, 3407, 3407, 3407, 3407, 3407, 3407, 3177,
 /*    40 */  3292, 3062, 2947, 2487, 2372, 2602, 2717, 2832, 3407, 3407,
 /*    50 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    60 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3522, 3407,
 /*    70 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    80 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*    90 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   100 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   110 */  3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407, 3407,
 /*   120 */  3407, 3407, 3407, 3407,  176,  -57,  -57,  176,  134,  632,
 /*   130 */   -57,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*   140 */   134,  134,  134,  851,  134,  134,  134,   63,   63,   63,
 /*   150 */   181,  181,  181,  181, 2139, 2254, 2573,  285,  397,  627,
 /*   160 */  2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573,
 /*   170 */  2573, 2573, 2573, 2573, 2573, 2573, 2573,  542,  542,  762,
 /*   180 */   286,  252,  286,  286,  670,  670, 3729, 4497, 4113, 4033,
 /*   190 */  4721,   60,  512,  252,  308,  239,  686,  469,  651,   54,
 /*   200 */   300, 1226, 1207, 1398, 1279, 1317, 1120, 1166, 1147, 1147,
 /*   210 */  1226,  670, 1245, 1120, 1164, 1307, 1256, 1280,  670,  670,
 /*   220 */  1193, 1221,  670,  762, 1145, 1245,  -58,  -58,  -58,  -58,
 /*   230 */   -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
 /*   240 */   -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
 /*   250 */   -58,  -58, 3804, 5410, 4487, 4644, 4726, 4685, 4410, 4112,
 /*   260 */  3952, 4187, 4336, 4262, 4800, 5335, 5258, 5487, 5143, 4874,
 /*   270 */  5217, 3878, 4951, 5028, 5069, 5564, 5564, 5564, 5564, 5564,
 /*   280 */  5564, 5564, 5564, 5564, 5564, 5564, 5564, 5604, 5641,  -15,
 /*   290 */   -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   300 */   -15,  -15,  -15,  -15, 2191,  807, 1046, 2304, 2419, 2534,
 /*   310 */  2534, 2534, 2534, 2534, 4532, 3994, 3850, 3693, 1426,  106,
 /*   320 */   106,  106,  106,  318,  318,  550,  550,  550,  550,  550,
 /*   330 */   873,  603,  429,    0,  404,  233,  249,  405,  633,  245,
 /*   340 */    55,   61,  216,  409,  491,  216,  216,  144,  639,  290,
 /*   350 */    28,  598,  260,  320,  216,  780,  167,    4,  788,   11,
 /*   360 */   876,  818,  844,  751,  809,  765,  746,  361,  853,  761,
 /*   370 */   808,  805,  846,  646,  241,  158,   11,   18,  112,  203,
 /*   380 */   361,  387,  -27,  625,  371,  375,  334,  503,   11,   -6,
 /*   390 */   744,  482,  604,  625,  638,  679,  666,  626,  573,  613,
 /*   400 */   592,  486,  549,  630,  628,  580,  813, 1199,  840, 1148,
 /*   410 */  1146, 1078, 1100, 1080, 1107, 1108, 1084, 1076, 1055, 1026,
 /*   420 */  1044, 1007, 1031, 1048, 1050, 1054, 1052, 1003, 1086, 1113,
 /*   430 */  1106, 1130, 1073, 1131, 1110, 1150, 1132, 1133, 1087, 1128,
 /*   440 */  1117, 1116, 1109, 1112, 1118,  808, 1125, 1124, 1119,   11,
 /*   450 */  1029,  867,  919,  855,  901,  923,  924,  931,  977,  928,
 /*   460 */   945,  898,  816,  870,  916,  823,  820,  878,  889,  879,
 /*   470 */   886,  996, 1019,  991,  937, 1020, 1022, 1027, 1025, 1085,
 /*   480 */   972,  984,  939,  958,  951,  936,  975, 1041,  981, 1043,
 /*   490 */   955,
);
    const YY_REDUCE_USE_DFLT = -191;
    const YY_REDUCE_MAX = 251;
    static public $yy_reduce_ofst = array(
 /*     0 */   325, 3503, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
 /*    10 */  3886, 3886, 4418, 3886, 3886, 3886, 3886, 5675, 5590, 5572,
 /*    20 */  5785, 5724, 6498, 6033, 6544, 6435, 6346, 6235, 6285, 5932,
 /*    30 */  5886, 5836, 5982, 6083, 6185, 6127, 6629, 6481, 6329, 9517,
 /*    40 */  9691, 10064, 10152, 9978, 10127, 10301, 10238, 10039, 9890, 9953,
 /*    50 */  9630, 9605, 9716, 9779, 9865, 9804, 10213, 9456, 8647, 7603,
 /*    60 */  7542, 7517, 7628, 7691, 7777, 7716, 7454, 7429, 7169, 7106,
 /*    70 */  7081, 8672, 7194, 7255, 7368, 7343, 7280, 7802, 7865, 8412,
 /*    80 */  8387, 8324, 8473, 8498, 8586, 8561, 8299, 8238, 7976, 7951,
 /*    90 */  7890, 8039, 8064, 8213, 8150, 8934, 8995, 9020, 8909, 8846,
 /*   100 */  8735, 8760, 8821, 9083, 9108, 9368, 9431, 9542, 9343, 9282,
 /*   110 */  9169, 9194, 9257, 8125, 6648, 6692, 7020, 6886, 6823, 6869,
 /*   120 */  6995, 6711, 6932, 6774, 2733, 2915, 2685, 1075, 2571, 4975,
 /*   130 */  4255, 4714, 4166, 3148, 3310, 2901, 3868, 3361, 4030, 3131,
 /*   140 */  3715, 4093, 4241, 5327, 5165, 5176, 5249,  477,  247,   17,
 /*   150 */   152,   36,  273, -190,  394,  394,  389, -164, -164,  -49,
 /*   160 */   615,  521,  190,  414,  759,  849,  535,  777,  768,  764,
 /*   170 */   660,  420,  291,  -68,   65,  529,  610,   33,  210, -169,
 /*   180 */   330,  373,  215,  298,  289,  365,  587,  527,  527,  527,
 /*   190 */   527,  565,  555,  597,  620,  700,  664,  671,  643,  606,
 /*   200 */  1141, 1157, 1088, 1183, 1186, 1163, 1126, 1010, 1077, 1101,
 /*   210 */  1121, 1090, 1142, 1047, 1246, 1241, 1185, 1232, 1236, 1068,
 /*   220 */  1135, 1102, 1151, 1058, 1021, 1149, 1215, 1252, 1158, 1213,
 /*   230 */  1189, 1205, 1214, 1122,  783, 1153, 1255, 1152, 1181, 1231,
 /*   240 */  1208, 1161, 1258, 1137, 1171, 1175, 1167, 1129, 1169, 1097,
 /*   250 */  1081, 1061,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(),
        /* 1 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 2 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 3 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 124, 134, 136, 137, 138, 139, 140, ),
        /* 4 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 124, 134, 136, 137, 138, 139, 140, ),
        /* 5 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 6 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 7 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 8 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 9 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 10 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 134, 136, 137, 138, 139, 140, ),
        /* 11 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 124, 134, 136, 137, 138, 139, 140, ),
        /* 12 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 13 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 14 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 15 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 16 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 17 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 18 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 19 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 20 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 21 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 22 */ array(1, 2, 3, 4, 5, 10, 24, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 23 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 24 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 25 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 26 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 27 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 28 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 29 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 30 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 31 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 32 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 33 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 34 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 35 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 36 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 37 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 38 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 39 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 40 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 41 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 74, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 42 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 43 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 44 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 45 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 73, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 46 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 47 */ array(1, 2, 3, 4, 5, 10, 29, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 48 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 49 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 50 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 51 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 52 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 53 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 54 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 55 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 56 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 57 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 58 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 59 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 60 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 61 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 62 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 63 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 64 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 65 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 66 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 67 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 68 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 69 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 70 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 71 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 72 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 73 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 74 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 75 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 76 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 77 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 78 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 79 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 80 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 81 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 82 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 83 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 84 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 85 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 86 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 87 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 88 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 89 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 90 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 91 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 92 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 93 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 94 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 95 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 96 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 97 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 98 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 99 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 100 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 101 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 102 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 103 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 104 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 105 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 106 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 107 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 108 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 109 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 110 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 111 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 112 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 113 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 114 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 115 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 116 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 117 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 118 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 119 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 120 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 121 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 122 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 123 */ array(1, 2, 3, 4, 5, 10, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 72, 95, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 134, 136, 137, 138, 139, 140, ),
        /* 124 */ array(29, 95, 98, 124, ),
        /* 125 */ array(95, 98, 103, 124, ),
        /* 126 */ array(95, 98, 103, 124, ),
        /* 127 */ array(29, 95, 98, 124, ),
        /* 128 */ array(95, 98, 124, ),
        /* 129 */ array(75, 95, 98, 124, ),
        /* 130 */ array(95, 98, 103, 124, ),
        /* 131 */ array(95, 98, 124, ),
        /* 132 */ array(95, 98, 124, ),
        /* 133 */ array(95, 98, 124, ),
        /* 134 */ array(95, 98, 124, ),
        /* 135 */ array(95, 98, 124, ),
        /* 136 */ array(95, 98, 124, ),
        /* 137 */ array(95, 98, 124, ),
        /* 138 */ array(95, 98, 124, ),
        /* 139 */ array(95, 98, 124, ),
        /* 140 */ array(95, 98, 124, ),
        /* 141 */ array(95, 98, 124, ),
        /* 142 */ array(95, 98, 124, ),
        /* 143 */ array(60, 95, 98, 124, ),
        /* 144 */ array(95, 98, 124, ),
        /* 145 */ array(95, 98, 124, ),
        /* 146 */ array(95, 98, 124, ),
        /* 147 */ array(95, 98, 124, ),
        /* 148 */ array(95, 98, 124, ),
        /* 149 */ array(95, 98, 124, ),
        /* 150 */ array(75, 95, 98, 124, ),
        /* 151 */ array(75, 95, 98, 124, ),
        /* 152 */ array(75, 95, 98, 124, ),
        /* 153 */ array(75, 95, 98, 124, ),
        /* 154 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 155 */ array(65, 66, 67, 68, 69, 70, 76, 125, 126, ),
        /* 156 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 157 */ array(95, 98, 124, ),
        /* 158 */ array(95, 98, 124, ),
        /* 159 */ array(95, 124, ),
        /* 160 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 161 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 162 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 163 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 164 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 165 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 166 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 167 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 168 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 169 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 170 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 171 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 172 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 173 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 174 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 175 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 176 */ array(40, 41, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, ),
        /* 177 */ array(73, 98, 105, ),
        /* 178 */ array(73, 98, 105, ),
        /* 179 */ array(94, ),
        /* 180 */ array(95, 124, ),
        /* 181 */ array(95, 124, ),
        /* 182 */ array(95, 124, ),
        /* 183 */ array(95, 124, ),
        /* 184 */ array(98, ),
        /* 185 */ array(98, ),
        /* 186 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 187 */ array(59, 75, 76, 95, 98, 106, 127, 128, 129, 130, 131, 132, 133, 135, ),
        /* 188 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 139, ),
        /* 189 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 138, ),
        /* 190 */ array(59, 75, 76, 95, 98, 127, 128, 129, 130, 131, 132, 133, 135, 141, ),
        /* 191 */ array(65, 66, 67, 68, 69, 70, 97, ),
        /* 192 */ array(95, 98, 129, ),
        /* 193 */ array(95, 124, ),
        /* 194 */ array(24, 74, ),
        /* 195 */ array(62, 63, ),
        /* 196 */ array(24, 75, ),
        /* 197 */ array(62, 63, ),
        /* 198 */ array(75, 109, ),
        /* 199 */ array(98, 105, ),
        /* 200 */ array(74, 75, ),
        /* 201 */ array(72, ),
        /* 202 */ array(127, ),
        /* 203 */ array(6, ),
        /* 204 */ array(127, ),
        /* 205 */ array(95, ),
        /* 206 */ array(115, ),
        /* 207 */ array(74, ),
        /* 208 */ array(72, ),
        /* 209 */ array(72, ),
        /* 210 */ array(72, ),
        /* 211 */ array(98, ),
        /* 212 */ array(29, ),
        /* 213 */ array(115, ),
        /* 214 */ array(102, ),
        /* 215 */ array(100, ),
        /* 216 */ array(74, ),
        /* 217 */ array(98, ),
        /* 218 */ array(98, ),
        /* 219 */ array(98, ),
        /* 220 */ array(100, ),
        /* 221 */ array(95, ),
        /* 222 */ array(98, ),
        /* 223 */ array(94, ),
        /* 224 */ array(72, ),
        /* 225 */ array(29, ),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 253 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 254 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 255 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 128, ),
        /* 256 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 257 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 258 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 259 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 260 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 261 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 262 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 263 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 264 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 265 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 74, ),
        /* 266 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 267 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 268 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 269 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 270 */ array(7, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 271 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 272 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 76, ),
        /* 273 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 115, ),
        /* 274 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 73, ),
        /* 275 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 276 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 277 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 278 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 279 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 280 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 281 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 282 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 283 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 284 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 285 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 286 */ array(7, 8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 287 */ array(8, 9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 288 */ array(9, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 289 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 290 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 291 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 292 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 293 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 294 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 295 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 296 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 297 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 298 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 299 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 300 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 301 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 302 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 303 */ array(23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 304 */ array(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 305 */ array(26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 306 */ array(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 307 */ array(28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 308 */ array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 309 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 310 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 311 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 312 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 313 */ array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 314 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 315 */ array(6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 73, ),
        /* 316 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 74, ),
        /* 317 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 91, ),
        /* 318 */ array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, ),
        /* 319 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 320 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 321 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 322 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, ),
        /* 323 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 324 */ array(40, 41, 42, 43, 44, 45, 47, ),
        /* 325 */ array(43, 44, 45, 47, ),
        /* 326 */ array(43, 44, 45, 47, ),
        /* 327 */ array(43, 44, 45, 47, ),
        /* 328 */ array(43, 44, 45, 47, ),
        /* 329 */ array(43, 44, 45, 47, ),
        /* 330 */ array(59, 72, 75, ),
        /* 331 */ array(76, 121, 122, ),
        /* 332 */ array(59, 72, 75, ),
        /* 333 */ array(120, 121, 122, ),
        /* 334 */ array(76, 121, 122, ),
        /* 335 */ array(120, 121, 122, ),
        /* 336 */ array(6, 74, ),
        /* 337 */ array(6, 73, ),
        /* 338 */ array(59, 75, ),
        /* 339 */ array(49, 50, ),
        /* 340 */ array(59, 127, ),
        /* 341 */ array(29, 95, ),
        /* 342 */ array(59, 75, ),
        /* 343 */ array(6, 73, ),
        /* 344 */ array(6, 73, ),
        /* 345 */ array(59, 75, ),
        /* 346 */ array(59, 75, ),
        /* 347 */ array(72, 116, ),
        /* 348 */ array(6, 73, ),
        /* 349 */ array(6, 74, ),
        /* 350 */ array(6, 73, ),
        /* 351 */ array(6, 73, ),
        /* 352 */ array(6, 74, ),
        /* 353 */ array(6, 74, ),
        /* 354 */ array(59, 75, ),
        /* 355 */ array(6, 73, ),
        /* 356 */ array(6, 74, ),
        /* 357 */ array(29, 95, ),
        /* 358 */ array(98, ),
        /* 359 */ array(47, ),
        /* 360 */ array(11, ),
        /* 361 */ array(72, ),
        /* 362 */ array(73, ),
        /* 363 */ array(11, ),
        /* 364 */ array(76, ),
        /* 365 */ array(116, ),
        /* 366 */ array(115, ),
        /* 367 */ array(6, ),
        /* 368 */ array(11, ),
        /* 369 */ array(115, ),
        /* 370 */ array(72, ),
        /* 371 */ array(74, ),
        /* 372 */ array(73, ),
        /* 373 */ array(72, ),
        /* 374 */ array(6, ),
        /* 375 */ array(72, ),
        /* 376 */ array(47, ),
        /* 377 */ array(75, ),
        /* 378 */ array(72, ),
        /* 379 */ array(74, ),
        /* 380 */ array(6, ),
        /* 381 */ array(109, ),
        /* 382 */ array(99, ),
        /* 383 */ array(75, ),
        /* 384 */ array(99, ),
        /* 385 */ array(74, ),
        /* 386 */ array(72, ),
        /* 387 */ array(6, ),
        /* 388 */ array(47, ),
        /* 389 */ array(75, ),
        /* 390 */ array(11, ),
        /* 391 */ array(95, ),
        /* 392 */ array(95, ),
        /* 393 */ array(75, ),
        /* 394 */ array(98, ),
        /* 395 */ array(75, ),
        /* 396 */ array(73, ),
        /* 397 */ array(72, ),
        /* 398 */ array(73, ),
        /* 399 */ array(11, ),
        /* 400 */ array(11, ),
        /* 401 */ array(98, ),
        /* 402 */ array(72, ),
        /* 403 */ array(6, ),
        /* 404 */ array(11, ),
        /* 405 */ array(97, ),
        /* 406 */ array(95, ),
        /* 407 */ array(11, ),
        /* 408 */ array(98, ),
        /* 409 */ array(11, ),
        /* 410 */ array(11, ),
        /* 411 */ array(73, ),
        /* 412 */ array(72, ),
        /* 413 */ array(98, ),
        /* 414 */ array(76, ),
        /* 415 */ array(72, ),
        /* 416 */ array(95, ),
        /* 417 */ array(72, ),
        /* 418 */ array(75, ),
        /* 419 */ array(94, ),
        /* 420 */ array(72, ),
        /* 421 */ array(95, ),
        /* 422 */ array(73, ),
        /* 423 */ array(73, ),
        /* 424 */ array(75, ),
        /* 425 */ array(73, ),
        /* 426 */ array(74, ),
        /* 427 */ array(116, ),
        /* 428 */ array(98, ),
        /* 429 */ array(72, ),
        /* 430 */ array(98, ),
        /* 431 */ array(72, ),
        /* 432 */ array(128, ),
        /* 433 */ array(75, ),
        /* 434 */ array(98, ),
        /* 435 */ array(59, ),
        /* 436 */ array(73, ),
        /* 437 */ array(74, ),
        /* 438 */ array(116, ),
        /* 439 */ array(72, ),
        /* 440 */ array(72, ),
        /* 441 */ array(72, ),
        /* 442 */ array(78, ),
        /* 443 */ array(74, ),
        /* 444 */ array(72, ),
        /* 445 */ array(72, ),
        /* 446 */ array(74, ),
        /* 447 */ array(74, ),
        /* 448 */ array(73, ),
        /* 449 */ array(47, ),
        /* 450 */ array(72, ),
        /* 451 */ array(127, ),
        /* 452 */ array(72, ),
        /* 453 */ array(116, ),
        /* 454 */ array(73, ),
        /* 455 */ array(72, ),
        /* 456 */ array(72, ),
        /* 457 */ array(74, ),
        /* 458 */ array(24, ),
        /* 459 */ array(72, ),
        /* 460 */ array(24, ),
        /* 461 */ array(64, ),
        /* 462 */ array(128, ),
        /* 463 */ array(73, ),
        /* 464 */ array(24, ),
        /* 465 */ array(116, ),
        /* 466 */ array(127, ),
        /* 467 */ array(72, ),
        /* 468 */ array(76, ),
        /* 469 */ array(73, ),
        /* 470 */ array(74, ),
        /* 471 */ array(6, ),
        /* 472 */ array(73, ),
        /* 473 */ array(73, ),
        /* 474 */ array(128, ),
        /* 475 */ array(74, ),
        /* 476 */ array(73, ),
        /* 477 */ array(73, ),
        /* 478 */ array(74, ),
        /* 479 */ array(11, ),
        /* 480 */ array(91, ),
        /* 481 */ array(73, ),
        /* 482 */ array(95, ),
        /* 483 */ array(74, ),
        /* 484 */ array(72, ),
        /* 485 */ array(72, ),
        /* 486 */ array(72, ),
        /* 487 */ array(11, ),
        /* 488 */ array(74, ),
        /* 489 */ array(11, ),
        /* 490 */ array(98, ),
        /* 491 */ array(),
        /* 492 */ array(),
        /* 493 */ array(),
        /* 494 */ array(),
        /* 495 */ array(),
        /* 496 */ array(),
        /* 497 */ array(),
        /* 498 */ array(),
        /* 499 */ array(),
        /* 500 */ array(),
        /* 501 */ array(),
        /* 502 */ array(),
        /* 503 */ array(),
        /* 504 */ array(),
        /* 505 */ array(),
        /* 506 */ array(),
        /* 507 */ array(),
        /* 508 */ array(),
        /* 509 */ array(),
        /* 510 */ array(),
        /* 511 */ array(),
        /* 512 */ array(),
        /* 513 */ array(),
        /* 514 */ array(),
        /* 515 */ array(),
        /* 516 */ array(),
        /* 517 */ array(),
        /* 518 */ array(),
        /* 519 */ array(),
        /* 520 */ array(),
        /* 521 */ array(),
        /* 522 */ array(),
        /* 523 */ array(),
        /* 524 */ array(),
        /* 525 */ array(),
        /* 526 */ array(),
        /* 527 */ array(),
        /* 528 */ array(),
        /* 529 */ array(),
        /* 530 */ array(),
        /* 531 */ array(),
        /* 532 */ array(),
        /* 533 */ array(),
        /* 534 */ array(),
        /* 535 */ array(),
        /* 536 */ array(),
        /* 537 */ array(),
        /* 538 */ array(),
        /* 539 */ array(),
        /* 540 */ array(),
        /* 541 */ array(),
        /* 542 */ array(),
        /* 543 */ array(),
        /* 544 */ array(),
        /* 545 */ array(),
        /* 546 */ array(),
        /* 547 */ array(),
        /* 548 */ array(),
        /* 549 */ array(),
        /* 550 */ array(),
        /* 551 */ array(),
        /* 552 */ array(),
        /* 553 */ array(),
        /* 554 */ array(),
        /* 555 */ array(),
        /* 556 */ array(),
        /* 557 */ array(),
        /* 558 */ array(),
        /* 559 */ array(),
        /* 560 */ array(),
        /* 561 */ array(),
        /* 562 */ array(),
        /* 563 */ array(),
        /* 564 */ array(),
        /* 565 */ array(),
        /* 566 */ array(),
        /* 567 */ array(),
        /* 568 */ array(),
        /* 569 */ array(),
        /* 570 */ array(),
        /* 571 */ array(),
        /* 572 */ array(),
        /* 573 */ array(),
        /* 574 */ array(),
        /* 575 */ array(),
        /* 576 */ array(),
        /* 577 */ array(),
        /* 578 */ array(),
        /* 579 */ array(),
        /* 580 */ array(),
        /* 581 */ array(),
        /* 582 */ array(),
        /* 583 */ array(),
        /* 584 */ array(),
        /* 585 */ array(),
        /* 586 */ array(),
        /* 587 */ array(),
        /* 588 */ array(),
        /* 589 */ array(),
        /* 590 */ array(),
        /* 591 */ array(),
        /* 592 */ array(),
        /* 593 */ array(),
        /* 594 */ array(),
        /* 595 */ array(),
        /* 596 */ array(),
        /* 597 */ array(),
        /* 598 */ array(),
        /* 599 */ array(),
        /* 600 */ array(),
        /* 601 */ array(),
        /* 602 */ array(),
        /* 603 */ array(),
        /* 604 */ array(),
        /* 605 */ array(),
        /* 606 */ array(),
        /* 607 */ array(),
        /* 608 */ array(),
        /* 609 */ array(),
        /* 610 */ array(),
        /* 611 */ array(),
        /* 612 */ array(),
        /* 613 */ array(),
        /* 614 */ array(),
        /* 615 */ array(),
        /* 616 */ array(),
        /* 617 */ array(),
        /* 618 */ array(),
        /* 619 */ array(),
        /* 620 */ array(),
        /* 621 */ array(),
        /* 622 */ array(),
        /* 623 */ array(),
        /* 624 */ array(),
        /* 625 */ array(),
        /* 626 */ array(),
        /* 627 */ array(),
        /* 628 */ array(),
        /* 629 */ array(),
        /* 630 */ array(),
        /* 631 */ array(),
        /* 632 */ array(),
        /* 633 */ array(),
        /* 634 */ array(),
        /* 635 */ array(),
        /* 636 */ array(),
        /* 637 */ array(),
        /* 638 */ array(),
        /* 639 */ array(),
        /* 640 */ array(),
        /* 641 */ array(),
        /* 642 */ array(),
        /* 643 */ array(),
        /* 644 */ array(),
        /* 645 */ array(),
        /* 646 */ array(),
        /* 647 */ array(),
        /* 648 */ array(),
        /* 649 */ array(),
        /* 650 */ array(),
        /* 651 */ array(),
        /* 652 */ array(),
        /* 653 */ array(),
        /* 654 */ array(),
        /* 655 */ array(),
        /* 656 */ array(),
        /* 657 */ array(),
        /* 658 */ array(),
        /* 659 */ array(),
        /* 660 */ array(),
        /* 661 */ array(),
        /* 662 */ array(),
        /* 663 */ array(),
        /* 664 */ array(),
        /* 665 */ array(),
        /* 666 */ array(),
        /* 667 */ array(),
        /* 668 */ array(),
        /* 669 */ array(),
        /* 670 */ array(),
        /* 671 */ array(),
        /* 672 */ array(),
        /* 673 */ array(),
        /* 674 */ array(),
        /* 675 */ array(),
        /* 676 */ array(),
        /* 677 */ array(),
        /* 678 */ array(),
        /* 679 */ array(),
        /* 680 */ array(),
        /* 681 */ array(),
        /* 682 */ array(),
        /* 683 */ array(),
        /* 684 */ array(),
        /* 685 */ array(),
        /* 686 */ array(),
        /* 687 */ array(),
        /* 688 */ array(),
        /* 689 */ array(),
        /* 690 */ array(),
        /* 691 */ array(),
        /* 692 */ array(),
        /* 693 */ array(),
        /* 694 */ array(),
        /* 695 */ array(),
        /* 696 */ array(),
        /* 697 */ array(),
        /* 698 */ array(),
        /* 699 */ array(),
        /* 700 */ array(),
        /* 701 */ array(),
        /* 702 */ array(),
        /* 703 */ array(),
        /* 704 */ array(),
        /* 705 */ array(),
        /* 706 */ array(),
);
    static public $yy_default = array(
 /*     0 */   709,  886, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    10 */  1054, 1054,  707,  878,  889,  877,  885, 1054, 1054, 1054,
 /*    20 */  1054, 1054, 1054, 1054, 1054, 1054,  987,  904,  904,  904,
 /*    30 */   904,  904,  904, 1049, 1049, 1049, 1054,  971,  971, 1054,
 /*    40 */  1054, 1054, 1054, 1046, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    50 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    60 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    70 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    80 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*    90 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   100 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   110 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   120 */  1054, 1054, 1054, 1054, 1054,  985,  985, 1054, 1054, 1054,
 /*   130 */   985, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   140 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   150 */  1054, 1054, 1054, 1054,  930,  930,  855, 1054, 1054, 1054,
 /*   160 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   170 */  1054, 1054,  854, 1054, 1054, 1054, 1054,  902,  902,  743,
 /*   180 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   190 */  1054,  927, 1054, 1054, 1054,  890, 1054,  888, 1054,  902,
 /*   200 */  1054, 1045, 1039, 1047,  950, 1054,  862,  879,  956,  956,
 /*   210 */  1045, 1054, 1053,  862,  766,  765,  879, 1054, 1054, 1054,
 /*   220 */   762, 1054, 1054,  742,  840, 1053,  879,  748, 1007,  748,
 /*   230 */  1007,  748,  879,  748, 1042, 1007,  748, 1007,  748,  748,
 /*   240 */   884,  921,  748,  748,  748,  748,  748,  921,  748,  953,
 /*   250 */   748,  748, 1054, 1054, 1054, 1054, 1054,  989, 1054, 1054,
 /*   260 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   270 */  1054, 1054, 1054,  991, 1054,  970, 1017, 1021, 1020,  940,
 /*   280 */  1018,  941, 1051, 1050,  988,  990, 1054,  795,  797,  778,
 /*   290 */   779,  772,  837,  796,  773,  785,  786,  788,  787,  784,
 /*   300 */   780,  782,  783,  781,  823,  793,  794,  798,  800,  815,
 /*   310 */   816,  813,  799,  814,  947,  947,  947,  947,  947,  818,
 /*   320 */   820,  817,  819,  807,  808,  802,  801,  803,  810,  809,
 /*   330 */   963, 1054,  962, 1054, 1054, 1054, 1054, 1054,  972, 1054,
 /*   340 */  1008, 1054,  958, 1054, 1054,  962,  963, 1030, 1054, 1054,
 /*   350 */   771, 1054, 1054, 1054,  957,  771, 1054, 1054, 1054,  811,
 /*   360 */  1054, 1054, 1054, 1054, 1054, 1054,  859,  767,  918,  857,
 /*   370 */  1054, 1054, 1054, 1054,  853, 1054,  805, 1054, 1054, 1054,
 /*   380 */   764, 1054, 1054,  979, 1054, 1054, 1054,  903,  806, 1054,
 /*   390 */   894, 1054, 1054,  980, 1054, 1054, 1054, 1054, 1054,  934,
 /*   400 */   893, 1054, 1054,  891,  897, 1054, 1054,  936, 1054, 1054,
 /*   410 */   898, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   420 */  1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   430 */  1054,  959, 1054, 1054, 1054, 1031, 1054, 1054,  848, 1054,
 /*   440 */  1054, 1054, 1054, 1054, 1054, 1024, 1054, 1054, 1054,  804,
 /*   450 */  1054,  951, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   460 */  1054, 1054, 1054, 1054, 1054, 1037, 1040, 1054, 1054, 1054,
 /*   470 */  1054, 1048, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
 /*   480 */   771, 1054, 1054,  771, 1025, 1054, 1054,  916, 1054, 1054,
 /*   490 */  1054,  882, 1010,  872,  895, 1027,  887,  744,  883,  925,
 /*   500 */   924,  839,  871,  828,  867,  761,  881,  999,  825,  869,
 /*   510 */  1001,  832, 1002,  824,  900,  710,  708,  831,  870,  829,
 /*   520 */   899, 1011, 1015,  712, 1003, 1000,  901,  711,  717,  896,
 /*   530 */   866,  874,  864,  768,  827,  758,  931,  861,  760,  863,
 /*   540 */   759,  714, 1022, 1006,  715, 1005,  769,  939,  737, 1025,
 /*   550 */   826,  880,  763,  875, 1009,  713,  757,  833, 1014,  997,
 /*   560 */   716, 1023,  836,  865,  876,  933, 1052,  926,  928,  996,
 /*   570 */   932, 1004,  868,  834,  998,  740,  949,  873,  721,  986,
 /*   580 */   790,  722,  791,  720, 1019,  954,  792,  718,  952,  719,
 /*   590 */   821, 1016,  723,  913,  911,  777,  914,  830,  835, 1026,
 /*   600 */   729,  724,  789,  725,  726,  728,  727, 1031,  982,  976,
 /*   610 */   973,  975,  977, 1028,  978, 1035, 1036,  993,  959,  966,
 /*   620 */  1029, 1038,  974,  995, 1034, 1013,  775, 1032,  992,  981,
 /*   630 */   984,  983, 1033,  774, 1043, 1041,  965,  955, 1044,  910,
 /*   640 */   915,  947,  751,  750,  749,  752,  753,  969,  754,  747,
 /*   650 */   746,  838,  812,  745,  771,  741,  770,  755,  822,  923,
 /*   660 */   937,  844,  938,  842,  843,  845,  935,  967,  968,  756,
 /*   670 */   920,  846,  922,  739,  738,  856,  852,  851,  858,  917,
 /*   680 */   731,  919,  850,  849,  730,  912,  948,  847,  907,  860,
 /*   690 */   776,  994,  943,  960,  944,  942,  736, 1012,  735,  961,
 /*   700 */   733,  732,  964,  734,  946,  945,  841,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 247;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 707;
    const YYNRULE = 347;
    const YYERRORSYMBOL = 142;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_INCLUDE',     'T_INCLUDE_ONCE',  'T_EVAL',      
  'T_REQUIRE',     'T_REQUIRE_ONCE',  'COMMA',         'T_LOGICAL_OR',
  'T_LOGICAL_XOR',  'T_LOGICAL_AND',  'T_PRINT',       'EQUALS',      
  'T_PLUS_EQUAL',  'T_MINUS_EQUAL',  'T_MUL_EQUAL',   'T_DIV_EQUAL', 
  'T_CONCAT_EQUAL',  'T_MOD_EQUAL',   'T_AND_EQUAL',   'T_OR_EQUAL',  
  'T_XOR_EQUAL',   'T_SL_EQUAL',    'T_SR_EQUAL',    'QUESTION',    
  'COLON',         'T_BOOLEAN_OR',  'T_BOOLEAN_AND',  'BAR',         
  'CARAT',         'AMPERSAND',     'T_IS_EQUAL',    'T_IS_NOT_EQUAL',
  'T_IS_IDENTICAL',  'T_IS_NOT_IDENTICAL',  'LESSTHAN',      'T_IS_SMALLER_OR_EQUAL',
  'GREATERTHAN',   'T_IS_GREATER_OR_EQUAL',  'T_SL',          'T_SR',        
  'PLUS',          'MINUS',         'DOT',           'TIMES',       
  'DIVIDE',        'PERCENT',       'EXCLAM',        'T_INSTANCEOF',
  'TILDE',         'T_INC',         'T_DEC',         'T_INT_CAST',  
  'T_DOUBLE_CAST',  'T_STRING_CAST',  'T_ARRAY_CAST',  'T_OBJECT_CAST',
  'T_BOOL_CAST',   'T_UNSET_CAST',  'AT',            'LBRACKET',    
  'T_NEW',         'T_CLONE',       'T_ELSEIF',      'T_ELSE',      
  'T_ENDIF',       'T_STATIC',      'T_ABSTRACT',    'T_FINAL',     
  'T_PRIVATE',     'T_PROTECTED',   'T_PUBLIC',      'T_HALT_COMPILER',
  'LPAREN',        'RPAREN',        'SEMI',          'LCURLY',      
  'RCURLY',        'T_IF',          'T_WHILE',       'T_DO',        
  'T_FOR',         'T_SWITCH',      'T_BREAK',       'T_CONTINUE',  
  'T_RETURN',      'T_GLOBAL',      'T_ECHO',        'T_INLINE_HTML',
  'T_USE',         'T_UNSET',       'T_FOREACH',     'T_AS',        
  'T_DECLARE',     'T_TRY',         'T_CATCH',       'T_VARIABLE',  
  'T_THROW',       'T_FUNCTION',    'T_STRING',      'T_CLASS',     
  'T_EXTENDS',     'T_INTERFACE',   'T_IMPLEMENTS',  'T_LIST',      
  'T_EXIT',        'T_ARRAY',       'BACKQUOTE',     'T_LNUMBER',   
  'T_DNUMBER',     'T_CONSTANT_ENCAPSED_STRING',  'T_LINE',        'T_FILE',      
  'T_CLASS_C',     'T_METHOD_C',    'T_FUNC_C',      'T_DOUBLE_ARROW',
  'T_PAAMAYIM_NEKUDOTAYIM',  'T_ENDFOR',      'T_ENDFOREACH',  'T_ENDDECLARE',
  'T_ENDSWITCH',   'T_CASE',        'T_DEFAULT',     'T_ENDWHILE',  
  'DOLLAR',        'T_VAR',         'T_CONST',       'T_OBJECT_OPERATOR',
  'RBRACKET',      'T_NUM_STRING',  'T_ENCAPSED_AND_WHITESPACE',  'T_CHARACTER', 
  'T_BAD_CHARACTER',  'T_DOLLAR_OPEN_CURLY_BRACES',  'T_STRING_VARNAME',  'T_CURLY_OPEN',
  'T_ISSET',       'T_EMPTY',       'DOUBLEQUOTE',   'SINGLEQUOTE', 
  'T_START_HEREDOC',  'T_END_HEREDOC',  'error',         'start',       
  'top_statement_list',  'top_statement',  'statement',     'function_declaration_statement',
  'class_declaration_statement',  'unticked_statement',  'inner_statement_list',  'expr',        
  'elseif_list',   'else_single',   'new_elseif_list',  'new_else_single',
  'while_statement',  'for_expr',      'for_statement',  'switch_case_list',
  'expr_without_variable',  'variable',      'global_var_list',  'static_var_list',
  'echo_expr_list',  'use_filename',  'unset_variables',  'foreach_variable',
  'foreach_optional_arg',  'foreach_statement',  'w_variable',    'declare_list',
  'declare_statement',  'fully_qualified_class_name',  'additional_catches',  'non_empty_additional_catches',
  'additional_catch',  'inner_statement',  'unticked_function_declaration_statement',  'unticked_class_declaration_statement',
  'is_reference',  'parameter_list',  'class_entry_type',  'extends_from',
  'implements_list',  'class_statement_list',  'interface_entry',  'interface_extends_list',
  'interface_list',  'r_variable',    'assignment_list',  'class_name_reference',
  'ctor_arguments',  'rw_variable',   'internal_functions_in_yacc',  'exit_expr',   
  'scalar',        'array_pair_list',  'encaps_list',   'common_scalar',
  'static_scalar',  'static_array_pair_list',  'static_class_constant',  'non_empty_static_array_pair_list',
  'case_list',     'case_separator',  'non_empty_parameter_list',  'optional_class_type',
  'function_call_parameter_list',  'non_empty_function_call_parameter_list',  'global_var',    'class_statement',
  'variable_modifiers',  'class_variable_declaration',  'class_constant_declaration',  'method_modifiers',
  'method_body',   'non_empty_member_modifiers',  'member_modifier',  'unset_variable',
  'base_variable_with_function_calls',  'object_property',  'method_or_not',  'variable_properties',
  'variable_property',  'variable_without_objects',  'reference_variable',  'simple_indirect_reference',
  'static_member',  'base_variable',  'function_call',  'dim_offset',  
  'compound_variable',  'object_dim_list',  'variable_name',  'assignment_list_element',
  'non_empty_array_pair_list',  'possible_comma',  'encaps_var',    'encaps_var_offset',
  'isset_variables',  'class_constant',  'dynamic_class_name_reference',  'dynamic_class_name_variable_properties',
  'dynamic_class_name_variable_property',  'non_empty_for_expr',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= top_statement_list",
 /*   1 */ "top_statement_list ::= top_statement_list top_statement",
 /*   2 */ "top_statement_list ::=",
 /*   3 */ "top_statement ::= statement",
 /*   4 */ "top_statement ::= function_declaration_statement",
 /*   5 */ "top_statement ::= class_declaration_statement",
 /*   6 */ "top_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*   7 */ "statement ::= unticked_statement",
 /*   8 */ "unticked_statement ::= LCURLY inner_statement_list RCURLY",
 /*   9 */ "unticked_statement ::= T_IF LPAREN expr RPAREN statement elseif_list else_single",
 /*  10 */ "unticked_statement ::= T_IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single T_ENDIF COLON",
 /*  11 */ "unticked_statement ::= T_WHILE LPAREN expr RPAREN while_statement",
 /*  12 */ "unticked_statement ::= T_DO statement T_WHILE LPAREN expr RPAREN SEMI",
 /*  13 */ "unticked_statement ::= T_FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement",
 /*  14 */ "unticked_statement ::= T_SWITCH LPAREN expr RPAREN switch_case_list",
 /*  15 */ "unticked_statement ::= T_BREAK SEMI",
 /*  16 */ "unticked_statement ::= T_BREAK expr SEMI",
 /*  17 */ "unticked_statement ::= T_CONTINUE SEMI",
 /*  18 */ "unticked_statement ::= T_CONTINUE expr SEMI",
 /*  19 */ "unticked_statement ::= T_RETURN SEMI",
 /*  20 */ "unticked_statement ::= T_RETURN expr_without_variable SEMI",
 /*  21 */ "unticked_statement ::= T_RETURN variable SEMI",
 /*  22 */ "unticked_statement ::= T_GLOBAL global_var_list SEMI",
 /*  23 */ "unticked_statement ::= T_STATIC static_var_list SEMI",
 /*  24 */ "unticked_statement ::= T_ECHO echo_expr_list SEMI",
 /*  25 */ "unticked_statement ::= T_INLINE_HTML",
 /*  26 */ "unticked_statement ::= expr SEMI",
 /*  27 */ "unticked_statement ::= T_USE use_filename SEMI",
 /*  28 */ "unticked_statement ::= T_UNSET LPAREN unset_variables RPAREN SEMI",
 /*  29 */ "unticked_statement ::= T_FOREACH LPAREN variable T_AS foreach_variable foreach_optional_arg RPAREN foreach_statement",
 /*  30 */ "unticked_statement ::= T_FOREACH LPAREN expr_without_variable T_AS w_variable foreach_optional_arg RPAREN foreach_statement",
 /*  31 */ "unticked_statement ::= T_DECLARE LPAREN declare_list RPAREN declare_statement",
 /*  32 */ "unticked_statement ::= SEMI",
 /*  33 */ "unticked_statement ::= T_TRY LCURLY inner_statement_list RCURLY T_CATCH LPAREN fully_qualified_class_name T_VARIABLE RPAREN LCURLY inner_statement_list RCURLY additional_catches",
 /*  34 */ "unticked_statement ::= T_THROW expr SEMI",
 /*  35 */ "additional_catches ::= non_empty_additional_catches",
 /*  36 */ "additional_catches ::=",
 /*  37 */ "non_empty_additional_catches ::= additional_catch",
 /*  38 */ "non_empty_additional_catches ::= non_empty_additional_catches additional_catch",
 /*  39 */ "additional_catch ::= T_CATCH LPAREN fully_qualified_class_name T_VARIABLE RPAREN LCURLY inner_statement_list RCURLY",
 /*  40 */ "inner_statement_list ::= inner_statement_list inner_statement",
 /*  41 */ "inner_statement_list ::=",
 /*  42 */ "inner_statement ::= statement",
 /*  43 */ "inner_statement ::= function_declaration_statement",
 /*  44 */ "inner_statement ::= class_declaration_statement",
 /*  45 */ "inner_statement ::= T_HALT_COMPILER LPAREN RPAREN SEMI",
 /*  46 */ "function_declaration_statement ::= unticked_function_declaration_statement",
 /*  47 */ "class_declaration_statement ::= unticked_class_declaration_statement",
 /*  48 */ "unticked_function_declaration_statement ::= T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN LCURLY inner_statement_list RCURLY",
 /*  49 */ "unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list LCURLY class_statement_list RCURLY",
 /*  50 */ "unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list LCURLY class_statement_list RCURLY",
 /*  51 */ "class_entry_type ::= T_CLASS",
 /*  52 */ "class_entry_type ::= T_ABSTRACT T_CLASS",
 /*  53 */ "class_entry_type ::= T_FINAL T_CLASS",
 /*  54 */ "extends_from ::= T_EXTENDS fully_qualified_class_name",
 /*  55 */ "extends_from ::=",
 /*  56 */ "interface_entry ::= T_INTERFACE",
 /*  57 */ "interface_extends_list ::= T_EXTENDS interface_list",
 /*  58 */ "interface_extends_list ::=",
 /*  59 */ "implements_list ::=",
 /*  60 */ "implements_list ::= T_IMPLEMENTS interface_list",
 /*  61 */ "interface_list ::= fully_qualified_class_name",
 /*  62 */ "interface_list ::= interface_list COMMA fully_qualified_class_name",
 /*  63 */ "expr ::= r_variable",
 /*  64 */ "expr ::= expr_without_variable",
 /*  65 */ "expr_without_variable ::= T_LIST LPAREN assignment_list RPAREN EQUALS expr",
 /*  66 */ "expr_without_variable ::= variable EQUALS expr",
 /*  67 */ "expr_without_variable ::= variable EQUALS AMPERSAND variable",
 /*  68 */ "expr_without_variable ::= variable EQUALS AMPERSAND T_NEW class_name_reference ctor_arguments",
 /*  69 */ "expr_without_variable ::= T_NEW class_name_reference ctor_arguments",
 /*  70 */ "expr_without_variable ::= T_CLONE expr",
 /*  71 */ "expr_without_variable ::= variable T_PLUS_EQUAL expr",
 /*  72 */ "expr_without_variable ::= variable T_MINUS_EQUAL expr",
 /*  73 */ "expr_without_variable ::= variable T_MUL_EQUAL expr",
 /*  74 */ "expr_without_variable ::= variable T_DIV_EQUAL expr",
 /*  75 */ "expr_without_variable ::= variable T_CONCAT_EQUAL expr",
 /*  76 */ "expr_without_variable ::= variable T_MOD_EQUAL expr",
 /*  77 */ "expr_without_variable ::= variable T_AND_EQUAL expr",
 /*  78 */ "expr_without_variable ::= variable T_OR_EQUAL expr",
 /*  79 */ "expr_without_variable ::= variable T_XOR_EQUAL expr",
 /*  80 */ "expr_without_variable ::= variable T_SL_EQUAL expr",
 /*  81 */ "expr_without_variable ::= variable T_SR_EQUAL expr",
 /*  82 */ "expr_without_variable ::= rw_variable T_INC",
 /*  83 */ "expr_without_variable ::= T_INC rw_variable",
 /*  84 */ "expr_without_variable ::= rw_variable T_DEC",
 /*  85 */ "expr_without_variable ::= T_DEC rw_variable",
 /*  86 */ "expr_without_variable ::= expr T_BOOLEAN_OR expr",
 /*  87 */ "expr_without_variable ::= expr T_BOOLEAN_AND expr",
 /*  88 */ "expr_without_variable ::= expr T_LOGICAL_OR expr",
 /*  89 */ "expr_without_variable ::= expr T_LOGICAL_AND expr",
 /*  90 */ "expr_without_variable ::= expr T_LOGICAL_XOR expr",
 /*  91 */ "expr_without_variable ::= expr BAR expr",
 /*  92 */ "expr_without_variable ::= expr AMPERSAND expr",
 /*  93 */ "expr_without_variable ::= expr CARAT expr",
 /*  94 */ "expr_without_variable ::= expr DOT expr",
 /*  95 */ "expr_without_variable ::= expr PLUS expr",
 /*  96 */ "expr_without_variable ::= expr MINUS expr",
 /*  97 */ "expr_without_variable ::= expr TIMES expr",
 /*  98 */ "expr_without_variable ::= expr DIVIDE expr",
 /*  99 */ "expr_without_variable ::= expr PERCENT expr",
 /* 100 */ "expr_without_variable ::= expr T_SL expr",
 /* 101 */ "expr_without_variable ::= expr T_SR expr",
 /* 102 */ "expr_without_variable ::= PLUS expr",
 /* 103 */ "expr_without_variable ::= MINUS expr",
 /* 104 */ "expr_without_variable ::= EXCLAM expr",
 /* 105 */ "expr_without_variable ::= TILDE expr",
 /* 106 */ "expr_without_variable ::= expr T_IS_IDENTICAL expr",
 /* 107 */ "expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr",
 /* 108 */ "expr_without_variable ::= expr T_IS_EQUAL expr",
 /* 109 */ "expr_without_variable ::= expr T_IS_NOT_EQUAL expr",
 /* 110 */ "expr_without_variable ::= expr LESSTHAN expr",
 /* 111 */ "expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr",
 /* 112 */ "expr_without_variable ::= expr GREATERTHAN expr",
 /* 113 */ "expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr",
 /* 114 */ "expr_without_variable ::= expr T_INSTANCEOF class_name_reference",
 /* 115 */ "expr_without_variable ::= LPAREN expr RPAREN",
 /* 116 */ "expr_without_variable ::= expr QUESTION expr COLON expr",
 /* 117 */ "expr_without_variable ::= internal_functions_in_yacc",
 /* 118 */ "expr_without_variable ::= T_INT_CAST expr",
 /* 119 */ "expr_without_variable ::= T_DOUBLE_CAST expr",
 /* 120 */ "expr_without_variable ::= T_STRING_CAST expr",
 /* 121 */ "expr_without_variable ::= T_ARRAY_CAST expr",
 /* 122 */ "expr_without_variable ::= T_OBJECT_CAST expr",
 /* 123 */ "expr_without_variable ::= T_BOOL_CAST expr",
 /* 124 */ "expr_without_variable ::= T_UNSET_CAST expr",
 /* 125 */ "expr_without_variable ::= T_EXIT exit_expr",
 /* 126 */ "expr_without_variable ::= AT expr",
 /* 127 */ "expr_without_variable ::= scalar",
 /* 128 */ "expr_without_variable ::= T_ARRAY LPAREN array_pair_list RPAREN",
 /* 129 */ "expr_without_variable ::= BACKQUOTE encaps_list BACKQUOTE",
 /* 130 */ "expr_without_variable ::= T_PRINT expr",
 /* 131 */ "exit_expr ::= LPAREN RPAREN",
 /* 132 */ "exit_expr ::= LPAREN expr RPAREN",
 /* 133 */ "exit_expr ::=",
 /* 134 */ "common_scalar ::= T_LNUMBER",
 /* 135 */ "common_scalar ::= T_DNUMBER",
 /* 136 */ "common_scalar ::= T_CONSTANT_ENCAPSED_STRING",
 /* 137 */ "common_scalar ::= T_LINE",
 /* 138 */ "common_scalar ::= T_FILE",
 /* 139 */ "common_scalar ::= T_CLASS_C|T_METHOD_C|T_FUNC_C",
 /* 140 */ "static_scalar ::= common_scalar",
 /* 141 */ "static_scalar ::= T_STRING",
 /* 142 */ "static_scalar ::= PLUS static_scalar",
 /* 143 */ "static_scalar ::= MINUS static_scalar",
 /* 144 */ "static_scalar ::= T_ARRAY LPAREN static_array_pair_list RPAREN",
 /* 145 */ "static_scalar ::= static_class_constant",
 /* 146 */ "static_array_pair_list ::= non_empty_static_array_pair_list",
 /* 147 */ "static_array_pair_list ::= non_empty_static_array_pair_list COMMA",
 /* 148 */ "static_array_pair_list ::=",
 /* 149 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar T_DOUBLE_ARROW static_scalar",
 /* 150 */ "non_empty_static_array_pair_list ::= non_empty_static_array_pair_list COMMA static_scalar",
 /* 151 */ "non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar",
 /* 152 */ "non_empty_static_array_pair_list ::= static_scalar",
 /* 153 */ "static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 154 */ "foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable",
 /* 155 */ "foreach_optional_arg ::=",
 /* 156 */ "foreach_variable ::= w_variable",
 /* 157 */ "foreach_variable ::= AMPERSAND w_variable",
 /* 158 */ "for_statement ::= statement",
 /* 159 */ "for_statement ::= COLON inner_statement_list T_ENDFOR SEMI",
 /* 160 */ "foreach_statement ::= statement",
 /* 161 */ "foreach_statement ::= COLON inner_statement_list T_ENDFOREACH SEMI",
 /* 162 */ "declare_statement ::= statement",
 /* 163 */ "declare_statement ::= COLON inner_statement_list T_ENDDECLARE SEMI",
 /* 164 */ "declare_list ::= T_STRING EQUALS static_scalar",
 /* 165 */ "declare_list ::= declare_list COMMA T_STRING EQUALS static_scalar",
 /* 166 */ "switch_case_list ::= LCURLY case_list RCURLY",
 /* 167 */ "switch_case_list ::= LCURLY SEMI case_list RCURLY",
 /* 168 */ "switch_case_list ::= COLON case_list T_ENDSWITCH SEMI",
 /* 169 */ "switch_case_list ::= COLON SEMI case_list T_ENDSWITCH SEMI",
 /* 170 */ "case_list ::= case_list T_CASE expr case_separator inner_statement_list",
 /* 171 */ "case_list ::= case_list T_DEFAULT case_separator inner_statement_list",
 /* 172 */ "case_list ::=",
 /* 173 */ "case_separator ::= COLON|SEMI",
 /* 174 */ "while_statement ::= statement",
 /* 175 */ "while_statement ::= COLON inner_statement_list T_ENDWHILE SEMI",
 /* 176 */ "elseif_list ::= elseif_list T_ELSEIF LPAREN expr RPAREN statement",
 /* 177 */ "elseif_list ::=",
 /* 178 */ "new_elseif_list ::= new_elseif_list T_ELSEIF LPAREN expr RPAREN COLON inner_statement_list",
 /* 179 */ "new_elseif_list ::=",
 /* 180 */ "else_single ::= T_ELSE statement",
 /* 181 */ "else_single ::=",
 /* 182 */ "new_else_single ::= T_ELSE COLON inner_statement_list",
 /* 183 */ "new_else_single ::=",
 /* 184 */ "parameter_list ::= non_empty_parameter_list",
 /* 185 */ "parameter_list ::=",
 /* 186 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE",
 /* 187 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE",
 /* 188 */ "non_empty_parameter_list ::= optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 189 */ "non_empty_parameter_list ::= optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 190 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE",
 /* 191 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE",
 /* 192 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type AMPERSAND T_VARIABLE EQUALS static_scalar",
 /* 193 */ "non_empty_parameter_list ::= non_empty_parameter_list COMMA optional_class_type T_VARIABLE EQUALS static_scalar",
 /* 194 */ "optional_class_type ::= T_STRING|T_ARRAY",
 /* 195 */ "optional_class_type ::=",
 /* 196 */ "function_call_parameter_list ::= non_empty_function_call_parameter_list",
 /* 197 */ "function_call_parameter_list ::=",
 /* 198 */ "non_empty_function_call_parameter_list ::= expr_without_variable",
 /* 199 */ "non_empty_function_call_parameter_list ::= variable",
 /* 200 */ "non_empty_function_call_parameter_list ::= AMPERSAND w_variable",
 /* 201 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA expr_without_variable",
 /* 202 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA variable",
 /* 203 */ "non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list COMMA AMPERSAND w_variable",
 /* 204 */ "global_var_list ::= global_var_list COMMA global_var",
 /* 205 */ "global_var_list ::= global_var",
 /* 206 */ "global_var ::= T_VARIABLE",
 /* 207 */ "global_var ::= DOLLAR r_variable",
 /* 208 */ "global_var ::= DOLLAR LCURLY expr RCURLY",
 /* 209 */ "static_var_list ::= static_var_list COMMA T_VARIABLE",
 /* 210 */ "static_var_list ::= static_var_list COMMA T_VARIABLE EQUALS static_scalar",
 /* 211 */ "static_var_list ::= T_VARIABLE",
 /* 212 */ "static_var_list ::= T_VARIABLE EQUALS static_scalar",
 /* 213 */ "class_statement_list ::= class_statement_list class_statement",
 /* 214 */ "class_statement_list ::=",
 /* 215 */ "class_statement ::= variable_modifiers class_variable_declaration SEMI",
 /* 216 */ "class_statement ::= class_constant_declaration SEMI",
 /* 217 */ "class_statement ::= method_modifiers T_FUNCTION is_reference T_STRING LPAREN parameter_list RPAREN method_body",
 /* 218 */ "method_body ::= SEMI",
 /* 219 */ "method_body ::= LCURLY inner_statement_list RCURLY",
 /* 220 */ "variable_modifiers ::= non_empty_member_modifiers",
 /* 221 */ "variable_modifiers ::= T_VAR",
 /* 222 */ "method_modifiers ::= non_empty_member_modifiers",
 /* 223 */ "method_modifiers ::=",
 /* 224 */ "non_empty_member_modifiers ::= member_modifier",
 /* 225 */ "non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier",
 /* 226 */ "member_modifier ::= T_PUBLIC|T_PROTECTED|T_PRIVATE|T_STATIC|T_ABSTRACT|T_FINAL",
 /* 227 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE",
 /* 228 */ "class_variable_declaration ::= class_variable_declaration COMMA T_VARIABLE EQUALS static_scalar",
 /* 229 */ "class_variable_declaration ::= T_VARIABLE",
 /* 230 */ "class_variable_declaration ::= T_VARIABLE EQUALS static_scalar",
 /* 231 */ "class_constant_declaration ::= class_constant_declaration COMMA T_STRING EQUALS static_scalar",
 /* 232 */ "class_constant_declaration ::= T_CONST T_STRING EQUALS static_scalar",
 /* 233 */ "echo_expr_list ::= echo_expr_list COMMA expr",
 /* 234 */ "echo_expr_list ::= expr",
 /* 235 */ "unset_variables ::= unset_variable",
 /* 236 */ "unset_variables ::= unset_variables COMMA unset_variable",
 /* 237 */ "unset_variable ::= variable",
 /* 238 */ "use_filename ::= T_CONSTANT_ENCAPSED_STRING",
 /* 239 */ "use_filename ::= LCURLY T_CONSTANT_ENCAPSED_STRING RCURLY",
 /* 240 */ "r_variable ::= variable",
 /* 241 */ "w_variable ::= variable",
 /* 242 */ "rw_variable ::= variable",
 /* 243 */ "variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties",
 /* 244 */ "variable ::= base_variable_with_function_calls",
 /* 245 */ "variable_properties ::= variable_properties variable_property",
 /* 246 */ "variable_properties ::=",
 /* 247 */ "variable_property ::= T_OBJECT_OPERATOR object_property method_or_not",
 /* 248 */ "method_or_not ::= LPAREN function_call_parameter_list RPAREN",
 /* 249 */ "method_or_not ::=",
 /* 250 */ "variable_without_objects ::= reference_variable",
 /* 251 */ "variable_without_objects ::= simple_indirect_reference reference_variable",
 /* 252 */ "static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects",
 /* 253 */ "base_variable_with_function_calls ::= base_variable",
 /* 254 */ "base_variable_with_function_calls ::= function_call",
 /* 255 */ "base_variable ::= reference_variable",
 /* 256 */ "base_variable ::= simple_indirect_reference reference_variable",
 /* 257 */ "base_variable ::= static_member",
 /* 258 */ "reference_variable ::= reference_variable LBRACKET dim_offset RBRACKET",
 /* 259 */ "reference_variable ::= reference_variable LCURLY expr RCURLY",
 /* 260 */ "reference_variable ::= compound_variable",
 /* 261 */ "compound_variable ::= T_VARIABLE",
 /* 262 */ "compound_variable ::= DOLLAR LCURLY expr RCURLY",
 /* 263 */ "dim_offset ::= expr",
 /* 264 */ "dim_offset ::=",
 /* 265 */ "object_property ::= object_dim_list",
 /* 266 */ "object_property ::= variable_without_objects",
 /* 267 */ "object_dim_list ::= object_dim_list LBRACKET dim_offset RBRACKET",
 /* 268 */ "object_dim_list ::= object_dim_list LCURLY expr RCURLY",
 /* 269 */ "object_dim_list ::= variable_name",
 /* 270 */ "variable_name ::= T_STRING",
 /* 271 */ "variable_name ::= LCURLY expr RCURLY",
 /* 272 */ "simple_indirect_reference ::= DOLLAR",
 /* 273 */ "simple_indirect_reference ::= simple_indirect_reference DOLLAR",
 /* 274 */ "assignment_list ::= assignment_list COMMA assignment_list_element",
 /* 275 */ "assignment_list ::= assignment_list_element",
 /* 276 */ "assignment_list_element ::= variable",
 /* 277 */ "assignment_list_element ::= T_LIST LPAREN assignment_list RPAREN",
 /* 278 */ "assignment_list_element ::=",
 /* 279 */ "array_pair_list ::= non_empty_array_pair_list possible_comma",
 /* 280 */ "array_pair_list ::=",
 /* 281 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW expr",
 /* 282 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr",
 /* 283 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr",
 /* 284 */ "non_empty_array_pair_list ::= expr",
 /* 285 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 286 */ "non_empty_array_pair_list ::= non_empty_array_pair_list COMMA AMPERSAND w_variable",
 /* 287 */ "non_empty_array_pair_list ::= expr T_DOUBLE_ARROW AMPERSAND w_variable",
 /* 288 */ "non_empty_array_pair_list ::= AMPERSAND w_variable",
 /* 289 */ "encaps_list ::= encaps_list encaps_var",
 /* 290 */ "encaps_list ::= encaps_list T_STRING",
 /* 291 */ "encaps_list ::= encaps_list T_NUM_STRING",
 /* 292 */ "encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE",
 /* 293 */ "encaps_list ::= encaps_list T_CHARACTER",
 /* 294 */ "encaps_list ::= encaps_list T_BAD_CHARACTER",
 /* 295 */ "encaps_list ::= encaps_list LBRACKET",
 /* 296 */ "encaps_list ::= encaps_list RBRACKET",
 /* 297 */ "encaps_list ::= encaps_list LCURLY",
 /* 298 */ "encaps_list ::= encaps_list RCURLY",
 /* 299 */ "encaps_list ::= encaps_list T_OBJECT_OPERATOR",
 /* 300 */ "encaps_list ::=",
 /* 301 */ "encaps_var ::= T_VARIABLE",
 /* 302 */ "encaps_var ::= T_VARIABLE LBRACKET encaps_var_offset RBRACKET",
 /* 303 */ "encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR T_STRING",
 /* 304 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr RCURLY",
 /* 305 */ "encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME LBRACKET expr RBRACKET RCURLY",
 /* 306 */ "encaps_var ::= T_CURLY_OPEN variable RCURLY",
 /* 307 */ "encaps_var_offset ::= T_STRING|T_NUM_STRING|T_VARIABLE",
 /* 308 */ "internal_functions_in_yacc ::= T_ISSET LPAREN isset_variables RPAREN",
 /* 309 */ "internal_functions_in_yacc ::= T_EMPTY LPAREN variable RPAREN",
 /* 310 */ "internal_functions_in_yacc ::= T_INCLUDE expr",
 /* 311 */ "internal_functions_in_yacc ::= T_INCLUDE_ONCE expr",
 /* 312 */ "internal_functions_in_yacc ::= T_EVAL LPAREN expr RPAREN",
 /* 313 */ "internal_functions_in_yacc ::= T_REQUIRE expr",
 /* 314 */ "internal_functions_in_yacc ::= T_REQUIRE_ONCE expr",
 /* 315 */ "isset_variables ::= variable",
 /* 316 */ "isset_variables ::= isset_variables COMMA variable",
 /* 317 */ "class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING",
 /* 318 */ "fully_qualified_class_name ::= T_STRING",
 /* 319 */ "function_call ::= T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 320 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING LPAREN function_call_parameter_list RPAREN",
 /* 321 */ "function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 322 */ "function_call ::= variable_without_objects LPAREN function_call_parameter_list RPAREN",
 /* 323 */ "scalar ::= T_STRING",
 /* 324 */ "scalar ::= T_STRING_VARNAME",
 /* 325 */ "scalar ::= class_constant",
 /* 326 */ "scalar ::= common_scalar",
 /* 327 */ "scalar ::= DOUBLEQUOTE encaps_list DOUBLEQUOTE",
 /* 328 */ "scalar ::= SINGLEQUOTE encaps_list SINGLEQUOTE",
 /* 329 */ "scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC",
 /* 330 */ "class_name_reference ::= T_STRING",
 /* 331 */ "class_name_reference ::= dynamic_class_name_reference",
 /* 332 */ "dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties",
 /* 333 */ "dynamic_class_name_reference ::= base_variable",
 /* 334 */ "dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property",
 /* 335 */ "dynamic_class_name_variable_properties ::=",
 /* 336 */ "dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property",
 /* 337 */ "ctor_arguments ::= LPAREN function_call_parameter_list RPAREN",
 /* 338 */ "ctor_arguments ::=",
 /* 339 */ "possible_comma ::= COMMA",
 /* 340 */ "possible_comma ::=",
 /* 341 */ "for_expr ::= non_empty_for_expr",
 /* 342 */ "for_expr ::=",
 /* 343 */ "non_empty_for_expr ::= non_empty_for_expr COMMA expr",
 /* 344 */ "non_empty_for_expr ::= expr",
 /* 345 */ "is_reference ::= AMPERSAND",
 /* 346 */ "is_reference ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param PC_Stmt_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Stmt_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new PC_Stmt_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new PC_Stmt_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 0 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 4 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 10 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 7 ),
  array( 'lhs' => 149, 'rhs' => 9 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 8 ),
  array( 'lhs' => 149, 'rhs' => 8 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 13 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 0 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 8 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 4 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 9 ),
  array( 'lhs' => 179, 'rhs' => 7 ),
  array( 'lhs' => 179, 'rhs' => 6 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 0 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 5 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 4 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 0 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 4 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 0 ),
  array( 'lhs' => 203, 'rhs' => 5 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 3 ),
  array( 'lhs' => 203, 'rhs' => 1 ),
  array( 'lhs' => 202, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 0 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 4 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 4 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 5 ),
  array( 'lhs' => 159, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 4 ),
  array( 'lhs' => 159, 'rhs' => 5 ),
  array( 'lhs' => 204, 'rhs' => 5 ),
  array( 'lhs' => 204, 'rhs' => 4 ),
  array( 'lhs' => 204, 'rhs' => 0 ),
  array( 'lhs' => 205, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 6 ),
  array( 'lhs' => 152, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 7 ),
  array( 'lhs' => 154, 'rhs' => 0 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 0 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 0 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 0 ),
  array( 'lhs' => 206, 'rhs' => 2 ),
  array( 'lhs' => 206, 'rhs' => 3 ),
  array( 'lhs' => 206, 'rhs' => 5 ),
  array( 'lhs' => 206, 'rhs' => 4 ),
  array( 'lhs' => 206, 'rhs' => 4 ),
  array( 'lhs' => 206, 'rhs' => 5 ),
  array( 'lhs' => 206, 'rhs' => 7 ),
  array( 'lhs' => 206, 'rhs' => 6 ),
  array( 'lhs' => 207, 'rhs' => 1 ),
  array( 'lhs' => 207, 'rhs' => 0 ),
  array( 'lhs' => 208, 'rhs' => 1 ),
  array( 'lhs' => 208, 'rhs' => 0 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 1 ),
  array( 'lhs' => 209, 'rhs' => 2 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 3 ),
  array( 'lhs' => 209, 'rhs' => 4 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 1 ),
  array( 'lhs' => 210, 'rhs' => 2 ),
  array( 'lhs' => 210, 'rhs' => 4 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 5 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 0 ),
  array( 'lhs' => 211, 'rhs' => 3 ),
  array( 'lhs' => 211, 'rhs' => 2 ),
  array( 'lhs' => 211, 'rhs' => 8 ),
  array( 'lhs' => 216, 'rhs' => 1 ),
  array( 'lhs' => 216, 'rhs' => 3 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 212, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 1 ),
  array( 'lhs' => 215, 'rhs' => 0 ),
  array( 'lhs' => 217, 'rhs' => 1 ),
  array( 'lhs' => 217, 'rhs' => 2 ),
  array( 'lhs' => 218, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 213, 'rhs' => 5 ),
  array( 'lhs' => 213, 'rhs' => 1 ),
  array( 'lhs' => 213, 'rhs' => 3 ),
  array( 'lhs' => 214, 'rhs' => 5 ),
  array( 'lhs' => 214, 'rhs' => 4 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 219, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 5 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 223, 'rhs' => 2 ),
  array( 'lhs' => 223, 'rhs' => 0 ),
  array( 'lhs' => 224, 'rhs' => 3 ),
  array( 'lhs' => 222, 'rhs' => 3 ),
  array( 'lhs' => 222, 'rhs' => 0 ),
  array( 'lhs' => 225, 'rhs' => 1 ),
  array( 'lhs' => 225, 'rhs' => 2 ),
  array( 'lhs' => 228, 'rhs' => 3 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 220, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 229, 'rhs' => 2 ),
  array( 'lhs' => 229, 'rhs' => 1 ),
  array( 'lhs' => 226, 'rhs' => 4 ),
  array( 'lhs' => 226, 'rhs' => 4 ),
  array( 'lhs' => 226, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 1 ),
  array( 'lhs' => 232, 'rhs' => 4 ),
  array( 'lhs' => 231, 'rhs' => 1 ),
  array( 'lhs' => 231, 'rhs' => 0 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 221, 'rhs' => 1 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 4 ),
  array( 'lhs' => 233, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 1 ),
  array( 'lhs' => 234, 'rhs' => 3 ),
  array( 'lhs' => 227, 'rhs' => 1 ),
  array( 'lhs' => 227, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 1 ),
  array( 'lhs' => 235, 'rhs' => 4 ),
  array( 'lhs' => 235, 'rhs' => 0 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 197, 'rhs' => 0 ),
  array( 'lhs' => 236, 'rhs' => 5 ),
  array( 'lhs' => 236, 'rhs' => 3 ),
  array( 'lhs' => 236, 'rhs' => 3 ),
  array( 'lhs' => 236, 'rhs' => 1 ),
  array( 'lhs' => 236, 'rhs' => 6 ),
  array( 'lhs' => 236, 'rhs' => 4 ),
  array( 'lhs' => 236, 'rhs' => 4 ),
  array( 'lhs' => 236, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 0 ),
  array( 'lhs' => 238, 'rhs' => 1 ),
  array( 'lhs' => 238, 'rhs' => 4 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 238, 'rhs' => 6 ),
  array( 'lhs' => 238, 'rhs' => 3 ),
  array( 'lhs' => 239, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 240, 'rhs' => 1 ),
  array( 'lhs' => 240, 'rhs' => 3 ),
  array( 'lhs' => 241, 'rhs' => 3 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 230, 'rhs' => 4 ),
  array( 'lhs' => 230, 'rhs' => 6 ),
  array( 'lhs' => 230, 'rhs' => 6 ),
  array( 'lhs' => 230, 'rhs' => 4 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 1 ),
  array( 'lhs' => 242, 'rhs' => 4 ),
  array( 'lhs' => 242, 'rhs' => 1 ),
  array( 'lhs' => 243, 'rhs' => 2 ),
  array( 'lhs' => 243, 'rhs' => 0 ),
  array( 'lhs' => 244, 'rhs' => 2 ),
  array( 'lhs' => 192, 'rhs' => 3 ),
  array( 'lhs' => 192, 'rhs' => 0 ),
  array( 'lhs' => 237, 'rhs' => 1 ),
  array( 'lhs' => 237, 'rhs' => 0 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 0 ),
  array( 'lhs' => 245, 'rhs' => 3 ),
  array( 'lhs' => 245, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        9 => 9,
        10 => 9,
        14 => 9,
        33 => 9,
        11 => 11,
        12 => 11,
        13 => 11,
        29 => 11,
        30 => 11,
        48 => 48,
        217 => 48,
        49 => 49,
        50 => 49,
        63 => 63,
        64 => 63,
        126 => 63,
        127 => 63,
        140 => 63,
        145 => 63,
        146 => 63,
        196 => 63,
        240 => 63,
        241 => 63,
        242 => 63,
        250 => 63,
        253 => 63,
        254 => 63,
        255 => 63,
        257 => 63,
        263 => 63,
        265 => 63,
        325 => 63,
        326 => 63,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        88 => 86,
        87 => 87,
        89 => 87,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        244 => 117,
        260 => 117,
        331 => 117,
        333 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        130 => 125,
        249 => 125,
        264 => 125,
        128 => 128,
        144 => 128,
        147 => 128,
        248 => 128,
        271 => 128,
        279 => 128,
        337 => 128,
        129 => 129,
        324 => 129,
        327 => 129,
        328 => 129,
        329 => 129,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        141 => 141,
        323 => 141,
        142 => 142,
        143 => 143,
        148 => 148,
        149 => 149,
        281 => 149,
        150 => 150,
        282 => 150,
        151 => 151,
        283 => 151,
        152 => 152,
        284 => 152,
        288 => 152,
        153 => 153,
        197 => 197,
        246 => 197,
        338 => 197,
        198 => 198,
        199 => 198,
        200 => 198,
        201 => 201,
        202 => 201,
        203 => 203,
        206 => 206,
        209 => 209,
        211 => 209,
        210 => 210,
        212 => 210,
        243 => 243,
        245 => 245,
        247 => 247,
        251 => 251,
        252 => 252,
        256 => 256,
        258 => 258,
        259 => 259,
        332 => 259,
        261 => 261,
        262 => 262,
        266 => 266,
        269 => 266,
        267 => 267,
        268 => 267,
        270 => 270,
        318 => 270,
        330 => 270,
        280 => 280,
        285 => 285,
        286 => 286,
        287 => 287,
        308 => 308,
        309 => 308,
        317 => 317,
        319 => 319,
        320 => 320,
        321 => 321,
        322 => 322,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 120 "src/compile/stmtparser.y"
    function yy_r9(){
	$this->state->end_cond();
    }
#line 4780 "src/compile/stmtparser.php"
#line 127 "src/compile/stmtparser.y"
    function yy_r11(){
	$this->state->end_loop();
    }
#line 4785 "src/compile/stmtparser.php"
#line 205 "src/compile/stmtparser.y"
    function yy_r48(){
	$this->state->end_function();
    }
#line 4790 "src/compile/stmtparser.php"
#line 214 "src/compile/stmtparser.y"
    function yy_r49(){
	$this->state->end_class();
    }
#line 4795 "src/compile/stmtparser.php"
#line 244 "src/compile/stmtparser.y"
    function yy_r63(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 4798 "src/compile/stmtparser.php"
#line 248 "src/compile/stmtparser.y"
    function yy_r66(){
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4803 "src/compile/stmtparser.php"
#line 251 "src/compile/stmtparser.y"
    function yy_r67(){
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4808 "src/compile/stmtparser.php"
#line 255 "src/compile/stmtparser.y"
    function yy_r68(){
	$func = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,'__construct'));
	$obj = $this->state->add_call($this->yystack[$this->yyidx + -1]->minor,$func,$this->yystack[$this->yyidx + 0]->minor);
	$this->_retvalue = $this->state->set_var($this->yystack[$this->yyidx + -5]->minor,$obj);
    }
#line 4815 "src/compile/stmtparser.php"
#line 260 "src/compile/stmtparser.y"
    function yy_r69(){
	$func = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,'__construct'));
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -1]->minor,$func,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4821 "src/compile/stmtparser.php"
#line 264 "src/compile/stmtparser.y"
    function yy_r70(){
	$this->_retvalue = clone $this->yystack[$this->yyidx + 0]->minor;
    }
#line 4826 "src/compile/stmtparser.php"
#line 267 "src/compile/stmtparser.y"
    function yy_r71(){
	$this->_retvalue = $this->state->handle_bin_assign_op('+',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4831 "src/compile/stmtparser.php"
#line 270 "src/compile/stmtparser.y"
    function yy_r72(){
	$this->_retvalue = $this->state->handle_bin_assign_op('-',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4836 "src/compile/stmtparser.php"
#line 273 "src/compile/stmtparser.y"
    function yy_r73(){
	$this->_retvalue = $this->state->handle_bin_assign_op('*',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4841 "src/compile/stmtparser.php"
#line 276 "src/compile/stmtparser.y"
    function yy_r74(){
	$this->_retvalue = $this->state->handle_bin_assign_op('/',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4846 "src/compile/stmtparser.php"
#line 279 "src/compile/stmtparser.y"
    function yy_r75(){
	$this->_retvalue = $this->state->handle_bin_assign_op('.',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4851 "src/compile/stmtparser.php"
#line 282 "src/compile/stmtparser.y"
    function yy_r76(){
	$this->_retvalue = $this->state->handle_bin_assign_op('%',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4856 "src/compile/stmtparser.php"
#line 285 "src/compile/stmtparser.y"
    function yy_r77(){
	$this->_retvalue = $this->state->handle_bin_assign_op('&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4861 "src/compile/stmtparser.php"
#line 288 "src/compile/stmtparser.y"
    function yy_r78(){
	$this->_retvalue = $this->state->handle_bin_assign_op('|',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4866 "src/compile/stmtparser.php"
#line 291 "src/compile/stmtparser.y"
    function yy_r79(){
	$this->_retvalue = $this->state->handle_bin_assign_op('^',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4871 "src/compile/stmtparser.php"
#line 294 "src/compile/stmtparser.y"
    function yy_r80(){
	$this->_retvalue = $this->state->handle_bin_assign_op('<<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4876 "src/compile/stmtparser.php"
#line 297 "src/compile/stmtparser.y"
    function yy_r81(){
	$this->_retvalue = $this->state->handle_bin_assign_op('>>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4881 "src/compile/stmtparser.php"
#line 300 "src/compile/stmtparser.y"
    function yy_r82(){
	$this->_retvalue = $this->state->handle_post_op('+',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 4886 "src/compile/stmtparser.php"
#line 303 "src/compile/stmtparser.y"
    function yy_r83(){
	$this->_retvalue = $this->state->handle_pre_op('+',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4891 "src/compile/stmtparser.php"
#line 306 "src/compile/stmtparser.y"
    function yy_r84(){
	$this->_retvalue = $this->state->handle_post_op('-',$this->yystack[$this->yyidx + -1]->minor);
    }
#line 4896 "src/compile/stmtparser.php"
#line 309 "src/compile/stmtparser.y"
    function yy_r85(){
	$this->_retvalue = $this->state->handle_pre_op('-',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4901 "src/compile/stmtparser.php"
#line 312 "src/compile/stmtparser.y"
    function yy_r86(){
	$this->_retvalue = $this->state->handle_bin_op('||',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4906 "src/compile/stmtparser.php"
#line 315 "src/compile/stmtparser.y"
    function yy_r87(){
	$this->_retvalue = $this->state->handle_bin_op('&&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4911 "src/compile/stmtparser.php"
#line 324 "src/compile/stmtparser.y"
    function yy_r90(){
	$this->_retvalue = $this->state->handle_bin_op('xor',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4916 "src/compile/stmtparser.php"
#line 327 "src/compile/stmtparser.y"
    function yy_r91(){
	$this->_retvalue = $this->state->handle_bin_op('|',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4921 "src/compile/stmtparser.php"
#line 330 "src/compile/stmtparser.y"
    function yy_r92(){
	$this->_retvalue = $this->state->handle_bin_op('&',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4926 "src/compile/stmtparser.php"
#line 333 "src/compile/stmtparser.y"
    function yy_r93(){
	$this->_retvalue = $this->state->handle_bin_op('^',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4931 "src/compile/stmtparser.php"
#line 336 "src/compile/stmtparser.y"
    function yy_r94(){
	$this->_retvalue = $this->state->handle_bin_op('.',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4936 "src/compile/stmtparser.php"
#line 339 "src/compile/stmtparser.y"
    function yy_r95(){
	$this->_retvalue = $this->state->handle_bin_op('+',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4941 "src/compile/stmtparser.php"
#line 342 "src/compile/stmtparser.y"
    function yy_r96(){
	$this->_retvalue = $this->state->handle_bin_op('-',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4946 "src/compile/stmtparser.php"
#line 345 "src/compile/stmtparser.y"
    function yy_r97(){
	$this->_retvalue = $this->state->handle_bin_op('*',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4951 "src/compile/stmtparser.php"
#line 348 "src/compile/stmtparser.y"
    function yy_r98(){
	$this->_retvalue = $this->state->handle_bin_op('/',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4956 "src/compile/stmtparser.php"
#line 351 "src/compile/stmtparser.y"
    function yy_r99(){
	$this->_retvalue = $this->state->handle_bin_op('%',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4961 "src/compile/stmtparser.php"
#line 354 "src/compile/stmtparser.y"
    function yy_r100(){
	$this->_retvalue = $this->state->handle_bin_op('<<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4966 "src/compile/stmtparser.php"
#line 357 "src/compile/stmtparser.y"
    function yy_r101(){
	$this->_retvalue = $this->state->handle_bin_op('>>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4971 "src/compile/stmtparser.php"
#line 360 "src/compile/stmtparser.y"
    function yy_r102(){
	$this->_retvalue = $this->state->handle_unary_op('+',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4976 "src/compile/stmtparser.php"
#line 363 "src/compile/stmtparser.y"
    function yy_r103(){
	$this->_retvalue = $this->state->handle_unary_op('-',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4981 "src/compile/stmtparser.php"
#line 366 "src/compile/stmtparser.y"
    function yy_r104(){
	$this->_retvalue = $this->state->handle_unary_op('!',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4986 "src/compile/stmtparser.php"
#line 369 "src/compile/stmtparser.y"
    function yy_r105(){
	$this->_retvalue = $this->state->handle_unary_op('~',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4991 "src/compile/stmtparser.php"
#line 372 "src/compile/stmtparser.y"
    function yy_r106(){
	$this->_retvalue = $this->state->handle_cmp('===',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 4996 "src/compile/stmtparser.php"
#line 375 "src/compile/stmtparser.y"
    function yy_r107(){
	$this->_retvalue = $this->state->handle_cmp('!==',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5001 "src/compile/stmtparser.php"
#line 378 "src/compile/stmtparser.y"
    function yy_r108(){
	$this->_retvalue = $this->state->handle_cmp('==',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5006 "src/compile/stmtparser.php"
#line 381 "src/compile/stmtparser.y"
    function yy_r109(){
	$this->_retvalue = $this->state->handle_cmp('!=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5011 "src/compile/stmtparser.php"
#line 384 "src/compile/stmtparser.y"
    function yy_r110(){
	$this->_retvalue = $this->state->handle_cmp('<',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5016 "src/compile/stmtparser.php"
#line 387 "src/compile/stmtparser.y"
    function yy_r111(){
	$this->_retvalue = $this->state->handle_cmp('<=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5021 "src/compile/stmtparser.php"
#line 390 "src/compile/stmtparser.y"
    function yy_r112(){
	$this->_retvalue = $this->state->handle_cmp('>',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5026 "src/compile/stmtparser.php"
#line 393 "src/compile/stmtparser.y"
    function yy_r113(){
	$this->_retvalue = $this->state->handle_cmp('>=',$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5031 "src/compile/stmtparser.php"
#line 396 "src/compile/stmtparser.y"
    function yy_r114(){
	$this->_retvalue = $this->state->handle_instanceof($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5036 "src/compile/stmtparser.php"
#line 399 "src/compile/stmtparser.y"
    function yy_r115(){
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 5041 "src/compile/stmtparser.php"
#line 402 "src/compile/stmtparser.y"
    function yy_r116(){
	$this->_retvalue = $this->state->handle_tri_op($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5046 "src/compile/stmtparser.php"
#line 405 "src/compile/stmtparser.y"
    function yy_r117(){
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5051 "src/compile/stmtparser.php"
#line 408 "src/compile/stmtparser.y"
    function yy_r118(){
	$this->_retvalue = $this->state->handle_cast('int',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5056 "src/compile/stmtparser.php"
#line 411 "src/compile/stmtparser.y"
    function yy_r119(){
	$this->_retvalue = $this->state->handle_cast('float',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5061 "src/compile/stmtparser.php"
#line 414 "src/compile/stmtparser.y"
    function yy_r120(){
	$this->_retvalue = $this->state->handle_cast('string',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5066 "src/compile/stmtparser.php"
#line 417 "src/compile/stmtparser.y"
    function yy_r121(){
	$this->_retvalue = $this->state->handle_cast('array',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5071 "src/compile/stmtparser.php"
#line 420 "src/compile/stmtparser.y"
    function yy_r122(){
	$this->_retvalue = $this->state->handle_cast('object',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5076 "src/compile/stmtparser.php"
#line 423 "src/compile/stmtparser.y"
    function yy_r123(){
	$this->_retvalue = $this->state->handle_cast('bool',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5081 "src/compile/stmtparser.php"
#line 426 "src/compile/stmtparser.y"
    function yy_r124(){
	$this->_retvalue = $this->state->handle_cast('unset',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5086 "src/compile/stmtparser.php"
#line 429 "src/compile/stmtparser.y"
    function yy_r125(){ $this->_retvalue = null;     }
#line 5089 "src/compile/stmtparser.php"
#line 432 "src/compile/stmtparser.y"
    function yy_r128(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 5092 "src/compile/stmtparser.php"
#line 433 "src/compile/stmtparser.y"
    function yy_r129(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING));
    }
#line 5097 "src/compile/stmtparser.php"
#line 442 "src/compile/stmtparser.y"
    function yy_r134(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::INT,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5102 "src/compile/stmtparser.php"
#line 445 "src/compile/stmtparser.y"
    function yy_r135(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::FLOAT,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5107 "src/compile/stmtparser.php"
#line 448 "src/compile/stmtparser.y"
    function yy_r136(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,substr($this->yystack[$this->yyidx + 0]->minor,1,-1)));
    }
#line 5112 "src/compile/stmtparser.php"
#line 451 "src/compile/stmtparser.y"
    function yy_r137(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::INT,$this->state->get_line()));
    }
#line 5117 "src/compile/stmtparser.php"
#line 454 "src/compile/stmtparser.y"
    function yy_r138(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->state->get_file()));
    }
#line 5122 "src/compile/stmtparser.php"
#line 457 "src/compile/stmtparser.y"
    function yy_r139(){
	$this->_retvalue = $this->state->get_scope_part($this->yystack[$this->yyidx + 0]->minor);
    }
#line 5127 "src/compile/stmtparser.php"
#line 463 "src/compile/stmtparser.y"
    function yy_r141(){
	if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"true") == 0)
		$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::BOOL,true));
	else if(strcasecmp($this->yystack[$this->yyidx + 0]->minor,"false") == 0)
		$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::BOOL,false));
	else
		$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5137 "src/compile/stmtparser.php"
#line 471 "src/compile/stmtparser.y"
    function yy_r142(){ $this->_retvalue = $this->state->handle_unary_op('+',$this->yystack[$this->yyidx + 0]->minor);     }
#line 5140 "src/compile/stmtparser.php"
#line 472 "src/compile/stmtparser.y"
    function yy_r143(){ $this->_retvalue = $this->state->handle_unary_op('-',$this->yystack[$this->yyidx + 0]->minor);     }
#line 5143 "src/compile/stmtparser.php"
#line 478 "src/compile/stmtparser.y"
    function yy_r148(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::TARRAY));
    }
#line 5148 "src/compile/stmtparser.php"
#line 483 "src/compile/stmtparser.y"
    function yy_r149(){
	$this->_retvalue = $this->yystack[$this->yyidx + -4]->minor;
	$this->_retvalue->get_type()->set_array_type($this->yystack[$this->yyidx + -2]->minor->get_type()->get_value(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5154 "src/compile/stmtparser.php"
#line 488 "src/compile/stmtparser.y"
    function yy_r150(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue->get_type()->set_array_type($this->_retvalue->get_type()->get_array_count(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5160 "src/compile/stmtparser.php"
#line 492 "src/compile/stmtparser.y"
    function yy_r151(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::TARRAY));
	$this->_retvalue->get_type()->set_array_type($this->yystack[$this->yyidx + -2]->minor->get_type()->get_value(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5166 "src/compile/stmtparser.php"
#line 496 "src/compile/stmtparser.y"
    function yy_r152(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::TARRAY));
	$this->_retvalue->get_type()->set_array_type(0,$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5172 "src/compile/stmtparser.php"
#line 501 "src/compile/stmtparser.y"
    function yy_r153(){
	$cname = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->yystack[$this->yyidx + -2]->minor));
	$this->_retvalue = $this->state->handle_classconst_access($cname,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5178 "src/compile/stmtparser.php"
#line 568 "src/compile/stmtparser.y"
    function yy_r197(){ $this->_retvalue = array();     }
#line 5181 "src/compile/stmtparser.php"
#line 570 "src/compile/stmtparser.y"
    function yy_r198(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 5184 "src/compile/stmtparser.php"
#line 574 "src/compile/stmtparser.y"
    function yy_r201(){
	$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5190 "src/compile/stmtparser.php"
#line 584 "src/compile/stmtparser.y"
    function yy_r203(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5196 "src/compile/stmtparser.php"
#line 592 "src/compile/stmtparser.y"
    function yy_r206(){ $this->state->do_global(substr($this->yystack[$this->yyidx + 0]->minor,1));     }
#line 5199 "src/compile/stmtparser.php"
#line 597 "src/compile/stmtparser.y"
    function yy_r209(){
	$var = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + 0]->minor,1),new PC_Obj_Type(PC_Obj_Type::UNKNOWN));
	$this->state->set_var($var,new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::UNKNOWN)));
    }
#line 5205 "src/compile/stmtparser.php"
#line 601 "src/compile/stmtparser.y"
    function yy_r210(){
	$var = new PC_Obj_Variable(substr($this->yystack[$this->yyidx + -2]->minor,1),new PC_Obj_Type(PC_Obj_Type::UNKNOWN));
	$this->state->set_var($var,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5211 "src/compile/stmtparser.php"
#line 665 "src/compile/stmtparser.y"
    function yy_r243(){
	$chain = array();
	$chain[] = array(
		'prop' => $this->yystack[$this->yyidx + -2]->minor,
		'args' => $this->yystack[$this->yyidx + -1]->minor
	);
	$this->_retvalue = $this->state->handle_object_prop_chain($this->yystack[$this->yyidx + -4]->minor,array_merge($chain,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5221 "src/compile/stmtparser.php"
#line 677 "src/compile/stmtparser.y"
    function yy_r245(){
	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
	$this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 5227 "src/compile/stmtparser.php"
#line 683 "src/compile/stmtparser.y"
    function yy_r247(){
	$this->_retvalue = array(
		'prop' => $this->yystack[$this->yyidx + -1]->minor,
		'args' => $this->yystack[$this->yyidx + 0]->minor
	);
    }
#line 5235 "src/compile/stmtparser.php"
#line 694 "src/compile/stmtparser.y"
    function yy_r251(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::UNKNOWN));
    }
#line 5240 "src/compile/stmtparser.php"
#line 698 "src/compile/stmtparser.y"
    function yy_r252(){
	$this->_retvalue = $this->state->handle_field_access($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5245 "src/compile/stmtparser.php"
#line 706 "src/compile/stmtparser.y"
    function yy_r256(){ /* TODO */ $this->_retvalue = null;     }
#line 5248 "src/compile/stmtparser.php"
#line 709 "src/compile/stmtparser.y"
    function yy_r258(){
	$this->_retvalue = $this->state->handle_array_access($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5253 "src/compile/stmtparser.php"
#line 712 "src/compile/stmtparser.y"
    function yy_r259(){
	// TODO
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::UNKNOWN));
    }
#line 5259 "src/compile/stmtparser.php"
#line 720 "src/compile/stmtparser.y"
    function yy_r261(){
	$this->_retvalue = $this->state->get_var(substr($this->yystack[$this->yyidx + 0]->minor,1));
    }
#line 5264 "src/compile/stmtparser.php"
#line 723 "src/compile/stmtparser.y"
    function yy_r262(){
	if($this->yystack[$this->yyidx + -1]->minor->get_type()->get_value() !== null)
		$this->_retvalue = $this->state->get_var($this->yystack[$this->yyidx + -1]->minor->get_type()->get_value_as_str());
	else
		$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::UNKNOWN));
    }
#line 5272 "src/compile/stmtparser.php"
#line 734 "src/compile/stmtparser.y"
    function yy_r266(){
	$this->_retvalue = array(array('type' => 'name','data' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 5277 "src/compile/stmtparser.php"
#line 738 "src/compile/stmtparser.y"
    function yy_r267(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue[] = array('type' => 'array','data' => $this->yystack[$this->yyidx + -1]->minor);
    }
#line 5283 "src/compile/stmtparser.php"
#line 750 "src/compile/stmtparser.y"
    function yy_r270(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 5288 "src/compile/stmtparser.php"
#line 766 "src/compile/stmtparser.y"
    function yy_r280(){ $this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::TARRAY));     }
#line 5291 "src/compile/stmtparser.php"
#line 785 "src/compile/stmtparser.y"
    function yy_r285(){
	$this->_retvalue = $this->yystack[$this->yyidx + -5]->minor;
	$this->_retvalue->get_type()->set_array_type($this->yystack[$this->yyidx + -3]->minor->get_type()->get_value(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5297 "src/compile/stmtparser.php"
#line 789 "src/compile/stmtparser.y"
    function yy_r286(){
	$this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
	$this->_retvalue->get_type()->set_array_type($this->_retvalue->get_type()->get_array_count(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5303 "src/compile/stmtparser.php"
#line 793 "src/compile/stmtparser.y"
    function yy_r287(){
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::TARRAY));
	$this->_retvalue->get_type()->set_array_type($this->yystack[$this->yyidx + -3]->minor->get_type()->get_value(),$this->yystack[$this->yyidx + 0]->minor->get_type());
    }
#line 5309 "src/compile/stmtparser.php"
#line 826 "src/compile/stmtparser.y"
    function yy_r308(){
	// TODO evaluate?
	$this->_retvalue = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::BOOL));
    }
#line 5315 "src/compile/stmtparser.php"
#line 843 "src/compile/stmtparser.y"
    function yy_r317(){
	$this->_retvalue = $this->state->handle_classconst_access($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 5320 "src/compile/stmtparser.php"
#line 851 "src/compile/stmtparser.y"
    function yy_r319(){
	$fname = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->yystack[$this->yyidx + -3]->minor));
	$this->_retvalue = $this->state->add_call(null,$fname,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5326 "src/compile/stmtparser.php"
#line 856 "src/compile/stmtparser.y"
    function yy_r320(){
	$fname = new PC_Obj_Variable('',new PC_Obj_Type(PC_Obj_Type::STRING,$this->yystack[$this->yyidx + -3]->minor));
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -5]->minor,$fname,$this->yystack[$this->yyidx + -1]->minor,true);
    }
#line 5332 "src/compile/stmtparser.php"
#line 861 "src/compile/stmtparser.y"
    function yy_r321(){
	$this->_retvalue = $this->state->add_call($this->yystack[$this->yyidx + -5]->minor,$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor,true);
    }
#line 5337 "src/compile/stmtparser.php"
#line 864 "src/compile/stmtparser.y"
    function yy_r322(){
	$this->_retvalue = $this->state->add_call(null,$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor);
    }
#line 5342 "src/compile/stmtparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //PC_Stmt_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new PC_Stmt_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 4 "src/compile/stmtparser.y"

    echo "Syntax Error " . ($this->state->get_file() ? "in file " . $this->state->get_file()." " : '');
		echo "on line " . $this->state->get_line() . ": token '" . htmlspecialchars($this->state->get_value()) . "'";
		echo " (".token_name($this->state->get_token()).") while parsing rule: ";
    foreach ($this->yystack as $entry) {
        echo $this->tokenName($entry->major) . '->';
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	echo "\n";	
    throw new Exception('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. '), expected one of: ' . implode(',', $expect));
#line 5468 "src/compile/stmtparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new PC_Stmt_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, self::$yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}